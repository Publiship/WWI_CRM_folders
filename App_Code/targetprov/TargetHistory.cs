using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DAL.CustomerTarget
{
	/// <summary>
	/// Strongly-typed collection for the TargetHistory class.
	/// </summary>
    [Serializable]
	public partial class TargetHistoryCollection : ActiveList<TargetHistory, TargetHistoryCollection>
	{	   
		public TargetHistoryCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TargetHistoryCollection</returns>
		public TargetHistoryCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TargetHistory o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the target_history table.
	/// </summary>
	[Serializable]
	public partial class TargetHistory : ActiveRecord<TargetHistory>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TargetHistory()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TargetHistory(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TargetHistory(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TargetHistory(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("target_history", TableType.Table, DataService.GetInstance("targetprov"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarHistoryID = new TableSchema.TableColumn(schema);
				colvarHistoryID.ColumnName = "historyID";
				colvarHistoryID.DataType = DbType.Int32;
				colvarHistoryID.MaxLength = 0;
				colvarHistoryID.AutoIncrement = true;
				colvarHistoryID.IsNullable = false;
				colvarHistoryID.IsPrimaryKey = true;
				colvarHistoryID.IsForeignKey = false;
				colvarHistoryID.IsReadOnly = false;
				colvarHistoryID.DefaultSetting = @"";
				colvarHistoryID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHistoryID);
				
				TableSchema.TableColumn colvarIDtarget = new TableSchema.TableColumn(schema);
				colvarIDtarget.ColumnName = "IDtarget";
				colvarIDtarget.DataType = DbType.Int32;
				colvarIDtarget.MaxLength = 0;
				colvarIDtarget.AutoIncrement = false;
				colvarIDtarget.IsNullable = true;
				colvarIDtarget.IsPrimaryKey = false;
				colvarIDtarget.IsForeignKey = false;
				colvarIDtarget.IsReadOnly = false;
				
						colvarIDtarget.DefaultSetting = @"((0))";
				colvarIDtarget.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIDtarget);
				
				TableSchema.TableColumn colvarLogDate = new TableSchema.TableColumn(schema);
				colvarLogDate.ColumnName = "log_date";
				colvarLogDate.DataType = DbType.DateTime;
				colvarLogDate.MaxLength = 0;
				colvarLogDate.AutoIncrement = false;
				colvarLogDate.IsNullable = true;
				colvarLogDate.IsPrimaryKey = false;
				colvarLogDate.IsForeignKey = false;
				colvarLogDate.IsReadOnly = false;
				colvarLogDate.DefaultSetting = @"";
				colvarLogDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLogDate);
				
				TableSchema.TableColumn colvarLogUser = new TableSchema.TableColumn(schema);
				colvarLogUser.ColumnName = "log_user";
				colvarLogUser.DataType = DbType.String;
				colvarLogUser.MaxLength = 25;
				colvarLogUser.AutoIncrement = false;
				colvarLogUser.IsNullable = true;
				colvarLogUser.IsPrimaryKey = false;
				colvarLogUser.IsForeignKey = false;
				colvarLogUser.IsReadOnly = false;
				colvarLogUser.DefaultSetting = @"";
				colvarLogUser.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLogUser);
				
				TableSchema.TableColumn colvarFieldName = new TableSchema.TableColumn(schema);
				colvarFieldName.ColumnName = "field_name";
				colvarFieldName.DataType = DbType.String;
				colvarFieldName.MaxLength = 25;
				colvarFieldName.AutoIncrement = false;
				colvarFieldName.IsNullable = true;
				colvarFieldName.IsPrimaryKey = false;
				colvarFieldName.IsForeignKey = false;
				colvarFieldName.IsReadOnly = false;
				colvarFieldName.DefaultSetting = @"";
				colvarFieldName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFieldName);
				
				TableSchema.TableColumn colvarChangedFrom = new TableSchema.TableColumn(schema);
				colvarChangedFrom.ColumnName = "changed_from";
				colvarChangedFrom.DataType = DbType.AnsiString;
				colvarChangedFrom.MaxLength = 2147483647;
				colvarChangedFrom.AutoIncrement = false;
				colvarChangedFrom.IsNullable = true;
				colvarChangedFrom.IsPrimaryKey = false;
				colvarChangedFrom.IsForeignKey = false;
				colvarChangedFrom.IsReadOnly = false;
				colvarChangedFrom.DefaultSetting = @"";
				colvarChangedFrom.ForeignKeyTableName = "";
				schema.Columns.Add(colvarChangedFrom);
				
				TableSchema.TableColumn colvarChangedTo = new TableSchema.TableColumn(schema);
				colvarChangedTo.ColumnName = "changed_to";
				colvarChangedTo.DataType = DbType.AnsiString;
				colvarChangedTo.MaxLength = 2147483647;
				colvarChangedTo.AutoIncrement = false;
				colvarChangedTo.IsNullable = true;
				colvarChangedTo.IsPrimaryKey = false;
				colvarChangedTo.IsForeignKey = false;
				colvarChangedTo.IsReadOnly = false;
				colvarChangedTo.DefaultSetting = @"";
				colvarChangedTo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarChangedTo);
				
				TableSchema.TableColumn colvarDbtimestamp = new TableSchema.TableColumn(schema);
				colvarDbtimestamp.ColumnName = "dbtimestamp";
				colvarDbtimestamp.DataType = DbType.Binary;
				colvarDbtimestamp.MaxLength = 0;
				colvarDbtimestamp.AutoIncrement = false;
				colvarDbtimestamp.IsNullable = true;
				colvarDbtimestamp.IsPrimaryKey = false;
				colvarDbtimestamp.IsForeignKey = false;
				colvarDbtimestamp.IsReadOnly = true;
				colvarDbtimestamp.DefaultSetting = @"";
				colvarDbtimestamp.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDbtimestamp);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["targetprov"].AddSchema("target_history",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("HistoryID")]
		[Bindable(true)]
		public int HistoryID 
		{
			get { return GetColumnValue<int>(Columns.HistoryID); }
			set { SetColumnValue(Columns.HistoryID, value); }
		}
		  
		[XmlAttribute("IDtarget")]
		[Bindable(true)]
		public int? IDtarget 
		{
			get { return GetColumnValue<int?>(Columns.IDtarget); }
			set { SetColumnValue(Columns.IDtarget, value); }
		}
		  
		[XmlAttribute("LogDate")]
		[Bindable(true)]
		public DateTime? LogDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.LogDate); }
			set { SetColumnValue(Columns.LogDate, value); }
		}
		  
		[XmlAttribute("LogUser")]
		[Bindable(true)]
		public string LogUser 
		{
			get { return GetColumnValue<string>(Columns.LogUser); }
			set { SetColumnValue(Columns.LogUser, value); }
		}
		  
		[XmlAttribute("FieldName")]
		[Bindable(true)]
		public string FieldName 
		{
			get { return GetColumnValue<string>(Columns.FieldName); }
			set { SetColumnValue(Columns.FieldName, value); }
		}
		  
		[XmlAttribute("ChangedFrom")]
		[Bindable(true)]
		public string ChangedFrom 
		{
			get { return GetColumnValue<string>(Columns.ChangedFrom); }
			set { SetColumnValue(Columns.ChangedFrom, value); }
		}
		  
		[XmlAttribute("ChangedTo")]
		[Bindable(true)]
		public string ChangedTo 
		{
			get { return GetColumnValue<string>(Columns.ChangedTo); }
			set { SetColumnValue(Columns.ChangedTo, value); }
		}
		  
		[XmlAttribute("Dbtimestamp")]
		[Bindable(true)]
		public byte[] Dbtimestamp 
		{
			get { return GetColumnValue<byte[]>(Columns.Dbtimestamp); }
			set { SetColumnValue(Columns.Dbtimestamp, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int? varIDtarget,DateTime? varLogDate,string varLogUser,string varFieldName,string varChangedFrom,string varChangedTo,byte[] varDbtimestamp)
		{
			TargetHistory item = new TargetHistory();
			
			item.IDtarget = varIDtarget;
			
			item.LogDate = varLogDate;
			
			item.LogUser = varLogUser;
			
			item.FieldName = varFieldName;
			
			item.ChangedFrom = varChangedFrom;
			
			item.ChangedTo = varChangedTo;
			
			item.Dbtimestamp = varDbtimestamp;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varHistoryID,int? varIDtarget,DateTime? varLogDate,string varLogUser,string varFieldName,string varChangedFrom,string varChangedTo,byte[] varDbtimestamp)
		{
			TargetHistory item = new TargetHistory();
			
				item.HistoryID = varHistoryID;
			
				item.IDtarget = varIDtarget;
			
				item.LogDate = varLogDate;
			
				item.LogUser = varLogUser;
			
				item.FieldName = varFieldName;
			
				item.ChangedFrom = varChangedFrom;
			
				item.ChangedTo = varChangedTo;
			
				item.Dbtimestamp = varDbtimestamp;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn HistoryIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn IDtargetColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn LogDateColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn LogUserColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn FieldNameColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn ChangedFromColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn ChangedToColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn DbtimestampColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string HistoryID = @"historyID";
			 public static string IDtarget = @"IDtarget";
			 public static string LogDate = @"log_date";
			 public static string LogUser = @"log_user";
			 public static string FieldName = @"field_name";
			 public static string ChangedFrom = @"changed_from";
			 public static string ChangedTo = @"changed_to";
			 public static string Dbtimestamp = @"dbtimestamp";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
