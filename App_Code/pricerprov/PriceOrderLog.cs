using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DAL.Pricer
{
	/// <summary>
	/// Strongly-typed collection for the PriceOrderLog class.
	/// </summary>
    [Serializable]
	public partial class PriceOrderLogCollection : ActiveList<PriceOrderLog, PriceOrderLogCollection>
	{	   
		public PriceOrderLogCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>PriceOrderLogCollection</returns>
		public PriceOrderLogCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                PriceOrderLog o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the price_order_log table.
	/// </summary>
	[Serializable]
	public partial class PriceOrderLog : ActiveRecord<PriceOrderLog>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public PriceOrderLog()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public PriceOrderLog(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public PriceOrderLog(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public PriceOrderLog(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("price_order_log", TableType.Table, DataService.GetInstance("pricerprov"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarPoLogId = new TableSchema.TableColumn(schema);
				colvarPoLogId.ColumnName = "po_log_id";
				colvarPoLogId.DataType = DbType.Int32;
				colvarPoLogId.MaxLength = 0;
				colvarPoLogId.AutoIncrement = true;
				colvarPoLogId.IsNullable = false;
				colvarPoLogId.IsPrimaryKey = true;
				colvarPoLogId.IsForeignKey = false;
				colvarPoLogId.IsReadOnly = false;
				colvarPoLogId.DefaultSetting = @"";
				colvarPoLogId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPoLogId);
				
				TableSchema.TableColumn colvarQuoteId = new TableSchema.TableColumn(schema);
				colvarQuoteId.ColumnName = "quote_id";
				colvarQuoteId.DataType = DbType.Int32;
				colvarQuoteId.MaxLength = 0;
				colvarQuoteId.AutoIncrement = false;
				colvarQuoteId.IsNullable = false;
				colvarQuoteId.IsPrimaryKey = false;
				colvarQuoteId.IsForeignKey = false;
				colvarQuoteId.IsReadOnly = false;
				
						colvarQuoteId.DefaultSetting = @"((0))";
				colvarQuoteId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarQuoteId);
				
				TableSchema.TableColumn colvarOrderId = new TableSchema.TableColumn(schema);
				colvarOrderId.ColumnName = "order_id";
				colvarOrderId.DataType = DbType.Int32;
				colvarOrderId.MaxLength = 0;
				colvarOrderId.AutoIncrement = false;
				colvarOrderId.IsNullable = false;
				colvarOrderId.IsPrimaryKey = false;
				colvarOrderId.IsForeignKey = false;
				colvarOrderId.IsReadOnly = false;
				
						colvarOrderId.DefaultSetting = @"((0))";
				colvarOrderId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOrderId);
				
				TableSchema.TableColumn colvarOrderNo = new TableSchema.TableColumn(schema);
				colvarOrderNo.ColumnName = "order_no";
				colvarOrderNo.DataType = DbType.Int32;
				colvarOrderNo.MaxLength = 0;
				colvarOrderNo.AutoIncrement = false;
				colvarOrderNo.IsNullable = true;
				colvarOrderNo.IsPrimaryKey = false;
				colvarOrderNo.IsForeignKey = false;
				colvarOrderNo.IsReadOnly = false;
				colvarOrderNo.DefaultSetting = @"";
				colvarOrderNo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOrderNo);
				
				TableSchema.TableColumn colvarUserId = new TableSchema.TableColumn(schema);
				colvarUserId.ColumnName = "user_id";
				colvarUserId.DataType = DbType.Int32;
				colvarUserId.MaxLength = 0;
				colvarUserId.AutoIncrement = false;
				colvarUserId.IsNullable = true;
				colvarUserId.IsPrimaryKey = false;
				colvarUserId.IsForeignKey = false;
				colvarUserId.IsReadOnly = false;
				
						colvarUserId.DefaultSetting = @"((0))";
				colvarUserId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUserId);
				
				TableSchema.TableColumn colvarCompanyId = new TableSchema.TableColumn(schema);
				colvarCompanyId.ColumnName = "company_id";
				colvarCompanyId.DataType = DbType.Int32;
				colvarCompanyId.MaxLength = 0;
				colvarCompanyId.AutoIncrement = false;
				colvarCompanyId.IsNullable = true;
				colvarCompanyId.IsPrimaryKey = false;
				colvarCompanyId.IsForeignKey = false;
				colvarCompanyId.IsReadOnly = false;
				
						colvarCompanyId.DefaultSetting = @"((0))";
				colvarCompanyId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCompanyId);
				
				TableSchema.TableColumn colvarLogDate = new TableSchema.TableColumn(schema);
				colvarLogDate.ColumnName = "log_date";
				colvarLogDate.DataType = DbType.DateTime;
				colvarLogDate.MaxLength = 0;
				colvarLogDate.AutoIncrement = false;
				colvarLogDate.IsNullable = true;
				colvarLogDate.IsPrimaryKey = false;
				colvarLogDate.IsForeignKey = false;
				colvarLogDate.IsReadOnly = false;
				colvarLogDate.DefaultSetting = @"";
				colvarLogDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLogDate);
				
				TableSchema.TableColumn colvarLogTs = new TableSchema.TableColumn(schema);
				colvarLogTs.ColumnName = "log_ts";
				colvarLogTs.DataType = DbType.Binary;
				colvarLogTs.MaxLength = 0;
				colvarLogTs.AutoIncrement = false;
				colvarLogTs.IsNullable = true;
				colvarLogTs.IsPrimaryKey = false;
				colvarLogTs.IsForeignKey = false;
				colvarLogTs.IsReadOnly = true;
				colvarLogTs.DefaultSetting = @"";
				colvarLogTs.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLogTs);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["pricerprov"].AddSchema("price_order_log",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("PoLogId")]
		[Bindable(true)]
		public int PoLogId 
		{
			get { return GetColumnValue<int>(Columns.PoLogId); }
			set { SetColumnValue(Columns.PoLogId, value); }
		}
		  
		[XmlAttribute("QuoteId")]
		[Bindable(true)]
		public int QuoteId 
		{
			get { return GetColumnValue<int>(Columns.QuoteId); }
			set { SetColumnValue(Columns.QuoteId, value); }
		}
		  
		[XmlAttribute("OrderId")]
		[Bindable(true)]
		public int OrderId 
		{
			get { return GetColumnValue<int>(Columns.OrderId); }
			set { SetColumnValue(Columns.OrderId, value); }
		}
		  
		[XmlAttribute("OrderNo")]
		[Bindable(true)]
		public int? OrderNo 
		{
			get { return GetColumnValue<int?>(Columns.OrderNo); }
			set { SetColumnValue(Columns.OrderNo, value); }
		}
		  
		[XmlAttribute("UserId")]
		[Bindable(true)]
		public int? UserId 
		{
			get { return GetColumnValue<int?>(Columns.UserId); }
			set { SetColumnValue(Columns.UserId, value); }
		}
		  
		[XmlAttribute("CompanyId")]
		[Bindable(true)]
		public int? CompanyId 
		{
			get { return GetColumnValue<int?>(Columns.CompanyId); }
			set { SetColumnValue(Columns.CompanyId, value); }
		}
		  
		[XmlAttribute("LogDate")]
		[Bindable(true)]
		public DateTime? LogDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.LogDate); }
			set { SetColumnValue(Columns.LogDate, value); }
		}
		  
		[XmlAttribute("LogTs")]
		[Bindable(true)]
		public byte[] LogTs 
		{
			get { return GetColumnValue<byte[]>(Columns.LogTs); }
			set { SetColumnValue(Columns.LogTs, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int varQuoteId,int varOrderId,int? varOrderNo,int? varUserId,int? varCompanyId,DateTime? varLogDate,byte[] varLogTs)
		{
			PriceOrderLog item = new PriceOrderLog();
			
			item.QuoteId = varQuoteId;
			
			item.OrderId = varOrderId;
			
			item.OrderNo = varOrderNo;
			
			item.UserId = varUserId;
			
			item.CompanyId = varCompanyId;
			
			item.LogDate = varLogDate;
			
			item.LogTs = varLogTs;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varPoLogId,int varQuoteId,int varOrderId,int? varOrderNo,int? varUserId,int? varCompanyId,DateTime? varLogDate,byte[] varLogTs)
		{
			PriceOrderLog item = new PriceOrderLog();
			
				item.PoLogId = varPoLogId;
			
				item.QuoteId = varQuoteId;
			
				item.OrderId = varOrderId;
			
				item.OrderNo = varOrderNo;
			
				item.UserId = varUserId;
			
				item.CompanyId = varCompanyId;
			
				item.LogDate = varLogDate;
			
				item.LogTs = varLogTs;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn PoLogIdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn QuoteIdColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn OrderIdColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn OrderNoColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn UserIdColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn CompanyIdColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn LogDateColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn LogTsColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string PoLogId = @"po_log_id";
			 public static string QuoteId = @"quote_id";
			 public static string OrderId = @"order_id";
			 public static string OrderNo = @"order_no";
			 public static string UserId = @"user_id";
			 public static string CompanyId = @"company_id";
			 public static string LogDate = @"log_date";
			 public static string LogTs = @"log_ts";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
