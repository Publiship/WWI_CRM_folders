using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DAL.Pricer
{
	/// <summary>
	/// Strongly-typed collection for the ShipmentSize class.
	/// </summary>
    [Serializable]
	public partial class ShipmentSizeCollection : ActiveList<ShipmentSize, ShipmentSizeCollection>
	{	   
		public ShipmentSizeCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>ShipmentSizeCollection</returns>
		public ShipmentSizeCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                ShipmentSize o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the shipment_size table.
	/// </summary>
	[Serializable]
	public partial class ShipmentSize : ActiveRecord<ShipmentSize>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public ShipmentSize()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public ShipmentSize(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public ShipmentSize(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public ShipmentSize(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("shipment_size", TableType.Table, DataService.GetInstance("pricerprov"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarShipmentSizeId = new TableSchema.TableColumn(schema);
				colvarShipmentSizeId.ColumnName = "shipment_size_Id";
				colvarShipmentSizeId.DataType = DbType.Int32;
				colvarShipmentSizeId.MaxLength = 0;
				colvarShipmentSizeId.AutoIncrement = true;
				colvarShipmentSizeId.IsNullable = false;
				colvarShipmentSizeId.IsPrimaryKey = true;
				colvarShipmentSizeId.IsForeignKey = false;
				colvarShipmentSizeId.IsReadOnly = false;
				colvarShipmentSizeId.DefaultSetting = @"";
				colvarShipmentSizeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarShipmentSizeId);
				
				TableSchema.TableColumn colvarQuoteId = new TableSchema.TableColumn(schema);
				colvarQuoteId.ColumnName = "quote_id";
				colvarQuoteId.DataType = DbType.Int32;
				colvarQuoteId.MaxLength = 0;
				colvarQuoteId.AutoIncrement = false;
				colvarQuoteId.IsNullable = true;
				colvarQuoteId.IsPrimaryKey = false;
				colvarQuoteId.IsForeignKey = false;
				colvarQuoteId.IsReadOnly = false;
				colvarQuoteId.DefaultSetting = @"";
				colvarQuoteId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarQuoteId);
				
				TableSchema.TableColumn colvarCalcCopiescarton = new TableSchema.TableColumn(schema);
				colvarCalcCopiescarton.ColumnName = "calc_copiescarton";
				colvarCalcCopiescarton.DataType = DbType.Double;
				colvarCalcCopiescarton.MaxLength = 0;
				colvarCalcCopiescarton.AutoIncrement = false;
				colvarCalcCopiescarton.IsNullable = true;
				colvarCalcCopiescarton.IsPrimaryKey = false;
				colvarCalcCopiescarton.IsForeignKey = false;
				colvarCalcCopiescarton.IsReadOnly = false;
				
						colvarCalcCopiescarton.DefaultSetting = @"((0))";
				colvarCalcCopiescarton.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCalcCopiescarton);
				
				TableSchema.TableColumn colvarTotCartons = new TableSchema.TableColumn(schema);
				colvarTotCartons.ColumnName = "tot_cartons";
				colvarTotCartons.DataType = DbType.Double;
				colvarTotCartons.MaxLength = 0;
				colvarTotCartons.AutoIncrement = false;
				colvarTotCartons.IsNullable = true;
				colvarTotCartons.IsPrimaryKey = false;
				colvarTotCartons.IsForeignKey = false;
				colvarTotCartons.IsReadOnly = false;
				colvarTotCartons.DefaultSetting = @"";
				colvarTotCartons.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTotCartons);
				
				TableSchema.TableColumn colvarPalCartons = new TableSchema.TableColumn(schema);
				colvarPalCartons.ColumnName = "pal_cartons";
				colvarPalCartons.DataType = DbType.Double;
				colvarPalCartons.MaxLength = 0;
				colvarPalCartons.AutoIncrement = false;
				colvarPalCartons.IsNullable = true;
				colvarPalCartons.IsPrimaryKey = false;
				colvarPalCartons.IsForeignKey = false;
				colvarPalCartons.IsReadOnly = false;
				colvarPalCartons.DefaultSetting = @"";
				colvarPalCartons.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPalCartons);
				
				TableSchema.TableColumn colvarPalFull = new TableSchema.TableColumn(schema);
				colvarPalFull.ColumnName = "pal_full";
				colvarPalFull.DataType = DbType.Double;
				colvarPalFull.MaxLength = 0;
				colvarPalFull.AutoIncrement = false;
				colvarPalFull.IsNullable = true;
				colvarPalFull.IsPrimaryKey = false;
				colvarPalFull.IsForeignKey = false;
				colvarPalFull.IsReadOnly = false;
				colvarPalFull.DefaultSetting = @"";
				colvarPalFull.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPalFull);
				
				TableSchema.TableColumn colvarPalFullWt = new TableSchema.TableColumn(schema);
				colvarPalFullWt.ColumnName = "pal_full_wt";
				colvarPalFullWt.DataType = DbType.Double;
				colvarPalFullWt.MaxLength = 0;
				colvarPalFullWt.AutoIncrement = false;
				colvarPalFullWt.IsNullable = true;
				colvarPalFullWt.IsPrimaryKey = false;
				colvarPalFullWt.IsForeignKey = false;
				colvarPalFullWt.IsReadOnly = false;
				colvarPalFullWt.DefaultSetting = @"";
				colvarPalFullWt.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPalFullWt);
				
				TableSchema.TableColumn colvarPalFullCu = new TableSchema.TableColumn(schema);
				colvarPalFullCu.ColumnName = "pal_full_cu";
				colvarPalFullCu.DataType = DbType.Double;
				colvarPalFullCu.MaxLength = 0;
				colvarPalFullCu.AutoIncrement = false;
				colvarPalFullCu.IsNullable = true;
				colvarPalFullCu.IsPrimaryKey = false;
				colvarPalFullCu.IsForeignKey = false;
				colvarPalFullCu.IsReadOnly = false;
				colvarPalFullCu.DefaultSetting = @"";
				colvarPalFullCu.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPalFullCu);
				
				TableSchema.TableColumn colvarPalLayers = new TableSchema.TableColumn(schema);
				colvarPalLayers.ColumnName = "pal_layers";
				colvarPalLayers.DataType = DbType.Double;
				colvarPalLayers.MaxLength = 0;
				colvarPalLayers.AutoIncrement = false;
				colvarPalLayers.IsNullable = true;
				colvarPalLayers.IsPrimaryKey = false;
				colvarPalLayers.IsForeignKey = false;
				colvarPalLayers.IsReadOnly = false;
				colvarPalLayers.DefaultSetting = @"";
				colvarPalLayers.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPalLayers);
				
				TableSchema.TableColumn colvarPalLayerCount = new TableSchema.TableColumn(schema);
				colvarPalLayerCount.ColumnName = "pal_layer_count";
				colvarPalLayerCount.DataType = DbType.Double;
				colvarPalLayerCount.MaxLength = 0;
				colvarPalLayerCount.AutoIncrement = false;
				colvarPalLayerCount.IsNullable = true;
				colvarPalLayerCount.IsPrimaryKey = false;
				colvarPalLayerCount.IsForeignKey = false;
				colvarPalLayerCount.IsReadOnly = false;
				colvarPalLayerCount.DefaultSetting = @"";
				colvarPalLayerCount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPalLayerCount);
				
				TableSchema.TableColumn colvarPalTotalWt = new TableSchema.TableColumn(schema);
				colvarPalTotalWt.ColumnName = "pal_total_wt";
				colvarPalTotalWt.DataType = DbType.Double;
				colvarPalTotalWt.MaxLength = 0;
				colvarPalTotalWt.AutoIncrement = false;
				colvarPalTotalWt.IsNullable = true;
				colvarPalTotalWt.IsPrimaryKey = false;
				colvarPalTotalWt.IsForeignKey = false;
				colvarPalTotalWt.IsReadOnly = false;
				colvarPalTotalWt.DefaultSetting = @"";
				colvarPalTotalWt.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPalTotalWt);
				
				TableSchema.TableColumn colvarPalTotalCu = new TableSchema.TableColumn(schema);
				colvarPalTotalCu.ColumnName = "pal_total_cu";
				colvarPalTotalCu.DataType = DbType.Double;
				colvarPalTotalCu.MaxLength = 0;
				colvarPalTotalCu.AutoIncrement = false;
				colvarPalTotalCu.IsNullable = true;
				colvarPalTotalCu.IsPrimaryKey = false;
				colvarPalTotalCu.IsForeignKey = false;
				colvarPalTotalCu.IsReadOnly = false;
				colvarPalTotalCu.DefaultSetting = @"";
				colvarPalTotalCu.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPalTotalCu);
				
				TableSchema.TableColumn colvarPalRatio = new TableSchema.TableColumn(schema);
				colvarPalRatio.ColumnName = "pal_ratio";
				colvarPalRatio.DataType = DbType.Double;
				colvarPalRatio.MaxLength = 0;
				colvarPalRatio.AutoIncrement = false;
				colvarPalRatio.IsNullable = true;
				colvarPalRatio.IsPrimaryKey = false;
				colvarPalRatio.IsForeignKey = false;
				colvarPalRatio.IsReadOnly = false;
				colvarPalRatio.DefaultSetting = @"";
				colvarPalRatio.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPalRatio);
				
				TableSchema.TableColumn colvarCtnHgt = new TableSchema.TableColumn(schema);
				colvarCtnHgt.ColumnName = "ctn_hgt";
				colvarCtnHgt.DataType = DbType.Double;
				colvarCtnHgt.MaxLength = 0;
				colvarCtnHgt.AutoIncrement = false;
				colvarCtnHgt.IsNullable = true;
				colvarCtnHgt.IsPrimaryKey = false;
				colvarCtnHgt.IsForeignKey = false;
				colvarCtnHgt.IsReadOnly = false;
				colvarCtnHgt.DefaultSetting = @"";
				colvarCtnHgt.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCtnHgt);
				
				TableSchema.TableColumn colvarCtnLen = new TableSchema.TableColumn(schema);
				colvarCtnLen.ColumnName = "ctn_len";
				colvarCtnLen.DataType = DbType.Double;
				colvarCtnLen.MaxLength = 0;
				colvarCtnLen.AutoIncrement = false;
				colvarCtnLen.IsNullable = true;
				colvarCtnLen.IsPrimaryKey = false;
				colvarCtnLen.IsForeignKey = false;
				colvarCtnLen.IsReadOnly = false;
				colvarCtnLen.DefaultSetting = @"";
				colvarCtnLen.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCtnLen);
				
				TableSchema.TableColumn colvarCtnWid = new TableSchema.TableColumn(schema);
				colvarCtnWid.ColumnName = "ctn_wid";
				colvarCtnWid.DataType = DbType.Double;
				colvarCtnWid.MaxLength = 0;
				colvarCtnWid.AutoIncrement = false;
				colvarCtnWid.IsNullable = true;
				colvarCtnWid.IsPrimaryKey = false;
				colvarCtnWid.IsForeignKey = false;
				colvarCtnWid.IsReadOnly = false;
				colvarCtnWid.DefaultSetting = @"";
				colvarCtnWid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCtnWid);
				
				TableSchema.TableColumn colvarCtnWt = new TableSchema.TableColumn(schema);
				colvarCtnWt.ColumnName = "ctn_wt";
				colvarCtnWt.DataType = DbType.Double;
				colvarCtnWt.MaxLength = 0;
				colvarCtnWt.AutoIncrement = false;
				colvarCtnWt.IsNullable = true;
				colvarCtnWt.IsPrimaryKey = false;
				colvarCtnWt.IsForeignKey = false;
				colvarCtnWt.IsReadOnly = false;
				colvarCtnWt.DefaultSetting = @"";
				colvarCtnWt.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCtnWt);
				
				TableSchema.TableColumn colvarParCount = new TableSchema.TableColumn(schema);
				colvarParCount.ColumnName = "par_count";
				colvarParCount.DataType = DbType.Double;
				colvarParCount.MaxLength = 0;
				colvarParCount.AutoIncrement = false;
				colvarParCount.IsNullable = true;
				colvarParCount.IsPrimaryKey = false;
				colvarParCount.IsForeignKey = false;
				colvarParCount.IsReadOnly = false;
				colvarParCount.DefaultSetting = @"";
				colvarParCount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarParCount);
				
				TableSchema.TableColumn colvarCtnRemaining = new TableSchema.TableColumn(schema);
				colvarCtnRemaining.ColumnName = "ctn_remaining";
				colvarCtnRemaining.DataType = DbType.Double;
				colvarCtnRemaining.MaxLength = 0;
				colvarCtnRemaining.AutoIncrement = false;
				colvarCtnRemaining.IsNullable = true;
				colvarCtnRemaining.IsPrimaryKey = false;
				colvarCtnRemaining.IsForeignKey = false;
				colvarCtnRemaining.IsReadOnly = false;
				colvarCtnRemaining.DefaultSetting = @"";
				colvarCtnRemaining.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCtnRemaining);
				
				TableSchema.TableColumn colvarResidueCu = new TableSchema.TableColumn(schema);
				colvarResidueCu.ColumnName = "residue_cu";
				colvarResidueCu.DataType = DbType.Double;
				colvarResidueCu.MaxLength = 0;
				colvarResidueCu.AutoIncrement = false;
				colvarResidueCu.IsNullable = true;
				colvarResidueCu.IsPrimaryKey = false;
				colvarResidueCu.IsForeignKey = false;
				colvarResidueCu.IsReadOnly = false;
				colvarResidueCu.DefaultSetting = @"";
				colvarResidueCu.ForeignKeyTableName = "";
				schema.Columns.Add(colvarResidueCu);
				
				TableSchema.TableColumn colvarResidueWt = new TableSchema.TableColumn(schema);
				colvarResidueWt.ColumnName = "residue_wt";
				colvarResidueWt.DataType = DbType.Double;
				colvarResidueWt.MaxLength = 0;
				colvarResidueWt.AutoIncrement = false;
				colvarResidueWt.IsNullable = true;
				colvarResidueWt.IsPrimaryKey = false;
				colvarResidueWt.IsForeignKey = false;
				colvarResidueWt.IsReadOnly = false;
				colvarResidueWt.DefaultSetting = @"";
				colvarResidueWt.ForeignKeyTableName = "";
				schema.Columns.Add(colvarResidueWt);
				
				TableSchema.TableColumn colvarCtnTotalWt = new TableSchema.TableColumn(schema);
				colvarCtnTotalWt.ColumnName = "ctn_total_wt";
				colvarCtnTotalWt.DataType = DbType.Double;
				colvarCtnTotalWt.MaxLength = 0;
				colvarCtnTotalWt.AutoIncrement = false;
				colvarCtnTotalWt.IsNullable = true;
				colvarCtnTotalWt.IsPrimaryKey = false;
				colvarCtnTotalWt.IsForeignKey = false;
				colvarCtnTotalWt.IsReadOnly = false;
				colvarCtnTotalWt.DefaultSetting = @"";
				colvarCtnTotalWt.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCtnTotalWt);
				
				TableSchema.TableColumn colvarCtnTotalCu = new TableSchema.TableColumn(schema);
				colvarCtnTotalCu.ColumnName = "ctn_total_cu";
				colvarCtnTotalCu.DataType = DbType.Double;
				colvarCtnTotalCu.MaxLength = 0;
				colvarCtnTotalCu.AutoIncrement = false;
				colvarCtnTotalCu.IsNullable = true;
				colvarCtnTotalCu.IsPrimaryKey = false;
				colvarCtnTotalCu.IsForeignKey = false;
				colvarCtnTotalCu.IsReadOnly = false;
				colvarCtnTotalCu.DefaultSetting = @"";
				colvarCtnTotalCu.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCtnTotalCu);
				
				TableSchema.TableColumn colvarCtnRatio = new TableSchema.TableColumn(schema);
				colvarCtnRatio.ColumnName = "ctn_ratio";
				colvarCtnRatio.DataType = DbType.Double;
				colvarCtnRatio.MaxLength = 0;
				colvarCtnRatio.AutoIncrement = false;
				colvarCtnRatio.IsNullable = true;
				colvarCtnRatio.IsPrimaryKey = false;
				colvarCtnRatio.IsForeignKey = false;
				colvarCtnRatio.IsReadOnly = false;
				colvarCtnRatio.DefaultSetting = @"";
				colvarCtnRatio.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCtnRatio);
				
				TableSchema.TableColumn colvarSzTimestamp = new TableSchema.TableColumn(schema);
				colvarSzTimestamp.ColumnName = "sz_timestamp";
				colvarSzTimestamp.DataType = DbType.Binary;
				colvarSzTimestamp.MaxLength = 0;
				colvarSzTimestamp.AutoIncrement = false;
				colvarSzTimestamp.IsNullable = false;
				colvarSzTimestamp.IsPrimaryKey = false;
				colvarSzTimestamp.IsForeignKey = false;
				colvarSzTimestamp.IsReadOnly = true;
				colvarSzTimestamp.DefaultSetting = @"";
				colvarSzTimestamp.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSzTimestamp);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["pricerprov"].AddSchema("shipment_size",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("ShipmentSizeId")]
		[Bindable(true)]
		public int ShipmentSizeId 
		{
			get { return GetColumnValue<int>(Columns.ShipmentSizeId); }
			set { SetColumnValue(Columns.ShipmentSizeId, value); }
		}
		  
		[XmlAttribute("QuoteId")]
		[Bindable(true)]
		public int? QuoteId 
		{
			get { return GetColumnValue<int?>(Columns.QuoteId); }
			set { SetColumnValue(Columns.QuoteId, value); }
		}
		  
		[XmlAttribute("CalcCopiescarton")]
		[Bindable(true)]
		public double? CalcCopiescarton 
		{
			get { return GetColumnValue<double?>(Columns.CalcCopiescarton); }
			set { SetColumnValue(Columns.CalcCopiescarton, value); }
		}
		  
		[XmlAttribute("TotCartons")]
		[Bindable(true)]
		public double? TotCartons 
		{
			get { return GetColumnValue<double?>(Columns.TotCartons); }
			set { SetColumnValue(Columns.TotCartons, value); }
		}
		  
		[XmlAttribute("PalCartons")]
		[Bindable(true)]
		public double? PalCartons 
		{
			get { return GetColumnValue<double?>(Columns.PalCartons); }
			set { SetColumnValue(Columns.PalCartons, value); }
		}
		  
		[XmlAttribute("PalFull")]
		[Bindable(true)]
		public double? PalFull 
		{
			get { return GetColumnValue<double?>(Columns.PalFull); }
			set { SetColumnValue(Columns.PalFull, value); }
		}
		  
		[XmlAttribute("PalFullWt")]
		[Bindable(true)]
		public double? PalFullWt 
		{
			get { return GetColumnValue<double?>(Columns.PalFullWt); }
			set { SetColumnValue(Columns.PalFullWt, value); }
		}
		  
		[XmlAttribute("PalFullCu")]
		[Bindable(true)]
		public double? PalFullCu 
		{
			get { return GetColumnValue<double?>(Columns.PalFullCu); }
			set { SetColumnValue(Columns.PalFullCu, value); }
		}
		  
		[XmlAttribute("PalLayers")]
		[Bindable(true)]
		public double? PalLayers 
		{
			get { return GetColumnValue<double?>(Columns.PalLayers); }
			set { SetColumnValue(Columns.PalLayers, value); }
		}
		  
		[XmlAttribute("PalLayerCount")]
		[Bindable(true)]
		public double? PalLayerCount 
		{
			get { return GetColumnValue<double?>(Columns.PalLayerCount); }
			set { SetColumnValue(Columns.PalLayerCount, value); }
		}
		  
		[XmlAttribute("PalTotalWt")]
		[Bindable(true)]
		public double? PalTotalWt 
		{
			get { return GetColumnValue<double?>(Columns.PalTotalWt); }
			set { SetColumnValue(Columns.PalTotalWt, value); }
		}
		  
		[XmlAttribute("PalTotalCu")]
		[Bindable(true)]
		public double? PalTotalCu 
		{
			get { return GetColumnValue<double?>(Columns.PalTotalCu); }
			set { SetColumnValue(Columns.PalTotalCu, value); }
		}
		  
		[XmlAttribute("PalRatio")]
		[Bindable(true)]
		public double? PalRatio 
		{
			get { return GetColumnValue<double?>(Columns.PalRatio); }
			set { SetColumnValue(Columns.PalRatio, value); }
		}
		  
		[XmlAttribute("CtnHgt")]
		[Bindable(true)]
		public double? CtnHgt 
		{
			get { return GetColumnValue<double?>(Columns.CtnHgt); }
			set { SetColumnValue(Columns.CtnHgt, value); }
		}
		  
		[XmlAttribute("CtnLen")]
		[Bindable(true)]
		public double? CtnLen 
		{
			get { return GetColumnValue<double?>(Columns.CtnLen); }
			set { SetColumnValue(Columns.CtnLen, value); }
		}
		  
		[XmlAttribute("CtnWid")]
		[Bindable(true)]
		public double? CtnWid 
		{
			get { return GetColumnValue<double?>(Columns.CtnWid); }
			set { SetColumnValue(Columns.CtnWid, value); }
		}
		  
		[XmlAttribute("CtnWt")]
		[Bindable(true)]
		public double? CtnWt 
		{
			get { return GetColumnValue<double?>(Columns.CtnWt); }
			set { SetColumnValue(Columns.CtnWt, value); }
		}
		  
		[XmlAttribute("ParCount")]
		[Bindable(true)]
		public double? ParCount 
		{
			get { return GetColumnValue<double?>(Columns.ParCount); }
			set { SetColumnValue(Columns.ParCount, value); }
		}
		  
		[XmlAttribute("CtnRemaining")]
		[Bindable(true)]
		public double? CtnRemaining 
		{
			get { return GetColumnValue<double?>(Columns.CtnRemaining); }
			set { SetColumnValue(Columns.CtnRemaining, value); }
		}
		  
		[XmlAttribute("ResidueCu")]
		[Bindable(true)]
		public double? ResidueCu 
		{
			get { return GetColumnValue<double?>(Columns.ResidueCu); }
			set { SetColumnValue(Columns.ResidueCu, value); }
		}
		  
		[XmlAttribute("ResidueWt")]
		[Bindable(true)]
		public double? ResidueWt 
		{
			get { return GetColumnValue<double?>(Columns.ResidueWt); }
			set { SetColumnValue(Columns.ResidueWt, value); }
		}
		  
		[XmlAttribute("CtnTotalWt")]
		[Bindable(true)]
		public double? CtnTotalWt 
		{
			get { return GetColumnValue<double?>(Columns.CtnTotalWt); }
			set { SetColumnValue(Columns.CtnTotalWt, value); }
		}
		  
		[XmlAttribute("CtnTotalCu")]
		[Bindable(true)]
		public double? CtnTotalCu 
		{
			get { return GetColumnValue<double?>(Columns.CtnTotalCu); }
			set { SetColumnValue(Columns.CtnTotalCu, value); }
		}
		  
		[XmlAttribute("CtnRatio")]
		[Bindable(true)]
		public double? CtnRatio 
		{
			get { return GetColumnValue<double?>(Columns.CtnRatio); }
			set { SetColumnValue(Columns.CtnRatio, value); }
		}
		  
		[XmlAttribute("SzTimestamp")]
		[Bindable(true)]
		public byte[] SzTimestamp 
		{
			get { return GetColumnValue<byte[]>(Columns.SzTimestamp); }
			set { SetColumnValue(Columns.SzTimestamp, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int? varQuoteId,double? varCalcCopiescarton,double? varTotCartons,double? varPalCartons,double? varPalFull,double? varPalFullWt,double? varPalFullCu,double? varPalLayers,double? varPalLayerCount,double? varPalTotalWt,double? varPalTotalCu,double? varPalRatio,double? varCtnHgt,double? varCtnLen,double? varCtnWid,double? varCtnWt,double? varParCount,double? varCtnRemaining,double? varResidueCu,double? varResidueWt,double? varCtnTotalWt,double? varCtnTotalCu,double? varCtnRatio,byte[] varSzTimestamp)
		{
			ShipmentSize item = new ShipmentSize();
			
			item.QuoteId = varQuoteId;
			
			item.CalcCopiescarton = varCalcCopiescarton;
			
			item.TotCartons = varTotCartons;
			
			item.PalCartons = varPalCartons;
			
			item.PalFull = varPalFull;
			
			item.PalFullWt = varPalFullWt;
			
			item.PalFullCu = varPalFullCu;
			
			item.PalLayers = varPalLayers;
			
			item.PalLayerCount = varPalLayerCount;
			
			item.PalTotalWt = varPalTotalWt;
			
			item.PalTotalCu = varPalTotalCu;
			
			item.PalRatio = varPalRatio;
			
			item.CtnHgt = varCtnHgt;
			
			item.CtnLen = varCtnLen;
			
			item.CtnWid = varCtnWid;
			
			item.CtnWt = varCtnWt;
			
			item.ParCount = varParCount;
			
			item.CtnRemaining = varCtnRemaining;
			
			item.ResidueCu = varResidueCu;
			
			item.ResidueWt = varResidueWt;
			
			item.CtnTotalWt = varCtnTotalWt;
			
			item.CtnTotalCu = varCtnTotalCu;
			
			item.CtnRatio = varCtnRatio;
			
			item.SzTimestamp = varSzTimestamp;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varShipmentSizeId,int? varQuoteId,double? varCalcCopiescarton,double? varTotCartons,double? varPalCartons,double? varPalFull,double? varPalFullWt,double? varPalFullCu,double? varPalLayers,double? varPalLayerCount,double? varPalTotalWt,double? varPalTotalCu,double? varPalRatio,double? varCtnHgt,double? varCtnLen,double? varCtnWid,double? varCtnWt,double? varParCount,double? varCtnRemaining,double? varResidueCu,double? varResidueWt,double? varCtnTotalWt,double? varCtnTotalCu,double? varCtnRatio,byte[] varSzTimestamp)
		{
			ShipmentSize item = new ShipmentSize();
			
				item.ShipmentSizeId = varShipmentSizeId;
			
				item.QuoteId = varQuoteId;
			
				item.CalcCopiescarton = varCalcCopiescarton;
			
				item.TotCartons = varTotCartons;
			
				item.PalCartons = varPalCartons;
			
				item.PalFull = varPalFull;
			
				item.PalFullWt = varPalFullWt;
			
				item.PalFullCu = varPalFullCu;
			
				item.PalLayers = varPalLayers;
			
				item.PalLayerCount = varPalLayerCount;
			
				item.PalTotalWt = varPalTotalWt;
			
				item.PalTotalCu = varPalTotalCu;
			
				item.PalRatio = varPalRatio;
			
				item.CtnHgt = varCtnHgt;
			
				item.CtnLen = varCtnLen;
			
				item.CtnWid = varCtnWid;
			
				item.CtnWt = varCtnWt;
			
				item.ParCount = varParCount;
			
				item.CtnRemaining = varCtnRemaining;
			
				item.ResidueCu = varResidueCu;
			
				item.ResidueWt = varResidueWt;
			
				item.CtnTotalWt = varCtnTotalWt;
			
				item.CtnTotalCu = varCtnTotalCu;
			
				item.CtnRatio = varCtnRatio;
			
				item.SzTimestamp = varSzTimestamp;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn ShipmentSizeIdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn QuoteIdColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn CalcCopiescartonColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn TotCartonsColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn PalCartonsColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn PalFullColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn PalFullWtColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn PalFullCuColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn PalLayersColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn PalLayerCountColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn PalTotalWtColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn PalTotalCuColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn PalRatioColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn CtnHgtColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn CtnLenColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn CtnWidColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        public static TableSchema.TableColumn CtnWtColumn
        {
            get { return Schema.Columns[16]; }
        }
        
        
        
        public static TableSchema.TableColumn ParCountColumn
        {
            get { return Schema.Columns[17]; }
        }
        
        
        
        public static TableSchema.TableColumn CtnRemainingColumn
        {
            get { return Schema.Columns[18]; }
        }
        
        
        
        public static TableSchema.TableColumn ResidueCuColumn
        {
            get { return Schema.Columns[19]; }
        }
        
        
        
        public static TableSchema.TableColumn ResidueWtColumn
        {
            get { return Schema.Columns[20]; }
        }
        
        
        
        public static TableSchema.TableColumn CtnTotalWtColumn
        {
            get { return Schema.Columns[21]; }
        }
        
        
        
        public static TableSchema.TableColumn CtnTotalCuColumn
        {
            get { return Schema.Columns[22]; }
        }
        
        
        
        public static TableSchema.TableColumn CtnRatioColumn
        {
            get { return Schema.Columns[23]; }
        }
        
        
        
        public static TableSchema.TableColumn SzTimestampColumn
        {
            get { return Schema.Columns[24]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string ShipmentSizeId = @"shipment_size_Id";
			 public static string QuoteId = @"quote_id";
			 public static string CalcCopiescarton = @"calc_copiescarton";
			 public static string TotCartons = @"tot_cartons";
			 public static string PalCartons = @"pal_cartons";
			 public static string PalFull = @"pal_full";
			 public static string PalFullWt = @"pal_full_wt";
			 public static string PalFullCu = @"pal_full_cu";
			 public static string PalLayers = @"pal_layers";
			 public static string PalLayerCount = @"pal_layer_count";
			 public static string PalTotalWt = @"pal_total_wt";
			 public static string PalTotalCu = @"pal_total_cu";
			 public static string PalRatio = @"pal_ratio";
			 public static string CtnHgt = @"ctn_hgt";
			 public static string CtnLen = @"ctn_len";
			 public static string CtnWid = @"ctn_wid";
			 public static string CtnWt = @"ctn_wt";
			 public static string ParCount = @"par_count";
			 public static string CtnRemaining = @"ctn_remaining";
			 public static string ResidueCu = @"residue_cu";
			 public static string ResidueWt = @"residue_wt";
			 public static string CtnTotalWt = @"ctn_total_wt";
			 public static string CtnTotalCu = @"ctn_total_cu";
			 public static string CtnRatio = @"ctn_ratio";
			 public static string SzTimestamp = @"sz_timestamp";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
