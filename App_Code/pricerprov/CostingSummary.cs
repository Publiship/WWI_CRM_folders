using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DAL.Pricer
{
	/// <summary>
	/// Strongly-typed collection for the CostingSummary class.
	/// </summary>
    [Serializable]
	public partial class CostingSummaryCollection : ActiveList<CostingSummary, CostingSummaryCollection>
	{	   
		public CostingSummaryCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>CostingSummaryCollection</returns>
		public CostingSummaryCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                CostingSummary o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the costing_summary table.
	/// </summary>
	[Serializable]
	public partial class CostingSummary : ActiveRecord<CostingSummary>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public CostingSummary()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public CostingSummary(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public CostingSummary(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public CostingSummary(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("costing_summary", TableType.Table, DataService.GetInstance("pricerprov"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarCostingId = new TableSchema.TableColumn(schema);
				colvarCostingId.ColumnName = "costing_Id";
				colvarCostingId.DataType = DbType.Int32;
				colvarCostingId.MaxLength = 0;
				colvarCostingId.AutoIncrement = true;
				colvarCostingId.IsNullable = false;
				colvarCostingId.IsPrimaryKey = true;
				colvarCostingId.IsForeignKey = false;
				colvarCostingId.IsReadOnly = false;
				colvarCostingId.DefaultSetting = @"";
				colvarCostingId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCostingId);
				
				TableSchema.TableColumn colvarQuoteId = new TableSchema.TableColumn(schema);
				colvarQuoteId.ColumnName = "quote_Id";
				colvarQuoteId.DataType = DbType.Int32;
				colvarQuoteId.MaxLength = 0;
				colvarQuoteId.AutoIncrement = false;
				colvarQuoteId.IsNullable = true;
				colvarQuoteId.IsPrimaryKey = false;
				colvarQuoteId.IsForeignKey = false;
				colvarQuoteId.IsReadOnly = false;
				colvarQuoteId.DefaultSetting = @"";
				colvarQuoteId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarQuoteId);
				
				TableSchema.TableColumn colvarSummaryType = new TableSchema.TableColumn(schema);
				colvarSummaryType.ColumnName = "summary_type";
				colvarSummaryType.DataType = DbType.String;
				colvarSummaryType.MaxLength = 15;
				colvarSummaryType.AutoIncrement = false;
				colvarSummaryType.IsNullable = true;
				colvarSummaryType.IsPrimaryKey = false;
				colvarSummaryType.IsForeignKey = false;
				colvarSummaryType.IsReadOnly = false;
				colvarSummaryType.DefaultSetting = @"";
				colvarSummaryType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSummaryType);
				
				TableSchema.TableColumn colvarPrePart = new TableSchema.TableColumn(schema);
				colvarPrePart.ColumnName = "pre_part";
				colvarPrePart.DataType = DbType.Double;
				colvarPrePart.MaxLength = 0;
				colvarPrePart.AutoIncrement = false;
				colvarPrePart.IsNullable = true;
				colvarPrePart.IsPrimaryKey = false;
				colvarPrePart.IsForeignKey = false;
				colvarPrePart.IsReadOnly = false;
				colvarPrePart.DefaultSetting = @"";
				colvarPrePart.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPrePart);
				
				TableSchema.TableColumn colvarPreFull = new TableSchema.TableColumn(schema);
				colvarPreFull.ColumnName = "pre_full";
				colvarPreFull.DataType = DbType.Double;
				colvarPreFull.MaxLength = 0;
				colvarPreFull.AutoIncrement = false;
				colvarPreFull.IsNullable = true;
				colvarPreFull.IsPrimaryKey = false;
				colvarPreFull.IsForeignKey = false;
				colvarPreFull.IsReadOnly = false;
				colvarPreFull.DefaultSetting = @"";
				colvarPreFull.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPreFull);
				
				TableSchema.TableColumn colvarPreThc20 = new TableSchema.TableColumn(schema);
				colvarPreThc20.ColumnName = "pre_thc20";
				colvarPreThc20.DataType = DbType.Double;
				colvarPreThc20.MaxLength = 0;
				colvarPreThc20.AutoIncrement = false;
				colvarPreThc20.IsNullable = true;
				colvarPreThc20.IsPrimaryKey = false;
				colvarPreThc20.IsForeignKey = false;
				colvarPreThc20.IsReadOnly = false;
				colvarPreThc20.DefaultSetting = @"";
				colvarPreThc20.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPreThc20);
				
				TableSchema.TableColumn colvarPreThc40 = new TableSchema.TableColumn(schema);
				colvarPreThc40.ColumnName = "pre_thc40";
				colvarPreThc40.DataType = DbType.Double;
				colvarPreThc40.MaxLength = 0;
				colvarPreThc40.AutoIncrement = false;
				colvarPreThc40.IsNullable = true;
				colvarPreThc40.IsPrimaryKey = false;
				colvarPreThc40.IsForeignKey = false;
				colvarPreThc40.IsReadOnly = false;
				colvarPreThc40.DefaultSetting = @"";
				colvarPreThc40.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPreThc40);
				
				TableSchema.TableColumn colvarPreThclcl = new TableSchema.TableColumn(schema);
				colvarPreThclcl.ColumnName = "pre_thclcl";
				colvarPreThclcl.DataType = DbType.Double;
				colvarPreThclcl.MaxLength = 0;
				colvarPreThclcl.AutoIncrement = false;
				colvarPreThclcl.IsNullable = true;
				colvarPreThclcl.IsPrimaryKey = false;
				colvarPreThclcl.IsForeignKey = false;
				colvarPreThclcl.IsReadOnly = false;
				colvarPreThclcl.DefaultSetting = @"";
				colvarPreThclcl.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPreThclcl);
				
				TableSchema.TableColumn colvarPreDocs = new TableSchema.TableColumn(schema);
				colvarPreDocs.ColumnName = "pre_docs";
				colvarPreDocs.DataType = DbType.Double;
				colvarPreDocs.MaxLength = 0;
				colvarPreDocs.AutoIncrement = false;
				colvarPreDocs.IsNullable = true;
				colvarPreDocs.IsPrimaryKey = false;
				colvarPreDocs.IsForeignKey = false;
				colvarPreDocs.IsReadOnly = false;
				colvarPreDocs.DefaultSetting = @"";
				colvarPreDocs.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPreDocs);
				
				TableSchema.TableColumn colvarPreOrigin = new TableSchema.TableColumn(schema);
				colvarPreOrigin.ColumnName = "pre_origin";
				colvarPreOrigin.DataType = DbType.Double;
				colvarPreOrigin.MaxLength = 0;
				colvarPreOrigin.AutoIncrement = false;
				colvarPreOrigin.IsNullable = true;
				colvarPreOrigin.IsPrimaryKey = false;
				colvarPreOrigin.IsForeignKey = false;
				colvarPreOrigin.IsReadOnly = false;
				colvarPreOrigin.DefaultSetting = @"";
				colvarPreOrigin.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPreOrigin);
				
				TableSchema.TableColumn colvarPreHaul20 = new TableSchema.TableColumn(schema);
				colvarPreHaul20.ColumnName = "pre_haul20";
				colvarPreHaul20.DataType = DbType.Double;
				colvarPreHaul20.MaxLength = 0;
				colvarPreHaul20.AutoIncrement = false;
				colvarPreHaul20.IsNullable = true;
				colvarPreHaul20.IsPrimaryKey = false;
				colvarPreHaul20.IsForeignKey = false;
				colvarPreHaul20.IsReadOnly = false;
				colvarPreHaul20.DefaultSetting = @"";
				colvarPreHaul20.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPreHaul20);
				
				TableSchema.TableColumn colvarPreHaul40 = new TableSchema.TableColumn(schema);
				colvarPreHaul40.ColumnName = "pre_haul40";
				colvarPreHaul40.DataType = DbType.Double;
				colvarPreHaul40.MaxLength = 0;
				colvarPreHaul40.AutoIncrement = false;
				colvarPreHaul40.IsNullable = true;
				colvarPreHaul40.IsPrimaryKey = false;
				colvarPreHaul40.IsForeignKey = false;
				colvarPreHaul40.IsReadOnly = false;
				colvarPreHaul40.DefaultSetting = @"";
				colvarPreHaul40.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPreHaul40);
				
				TableSchema.TableColumn colvarFreightLcl = new TableSchema.TableColumn(schema);
				colvarFreightLcl.ColumnName = "freight_lcl";
				colvarFreightLcl.DataType = DbType.Double;
				colvarFreightLcl.MaxLength = 0;
				colvarFreightLcl.AutoIncrement = false;
				colvarFreightLcl.IsNullable = true;
				colvarFreightLcl.IsPrimaryKey = false;
				colvarFreightLcl.IsForeignKey = false;
				colvarFreightLcl.IsReadOnly = false;
				colvarFreightLcl.DefaultSetting = @"";
				colvarFreightLcl.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFreightLcl);
				
				TableSchema.TableColumn colvarFreight20 = new TableSchema.TableColumn(schema);
				colvarFreight20.ColumnName = "freight_20";
				colvarFreight20.DataType = DbType.Double;
				colvarFreight20.MaxLength = 0;
				colvarFreight20.AutoIncrement = false;
				colvarFreight20.IsNullable = true;
				colvarFreight20.IsPrimaryKey = false;
				colvarFreight20.IsForeignKey = false;
				colvarFreight20.IsReadOnly = false;
				colvarFreight20.DefaultSetting = @"";
				colvarFreight20.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFreight20);
				
				TableSchema.TableColumn colvarFreight40 = new TableSchema.TableColumn(schema);
				colvarFreight40.ColumnName = "freight_40";
				colvarFreight40.DataType = DbType.Double;
				colvarFreight40.MaxLength = 0;
				colvarFreight40.AutoIncrement = false;
				colvarFreight40.IsNullable = true;
				colvarFreight40.IsPrimaryKey = false;
				colvarFreight40.IsForeignKey = false;
				colvarFreight40.IsReadOnly = false;
				colvarFreight40.DefaultSetting = @"";
				colvarFreight40.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFreight40);
				
				TableSchema.TableColumn colvarFreight40hq = new TableSchema.TableColumn(schema);
				colvarFreight40hq.ColumnName = "freight_40hq";
				colvarFreight40hq.DataType = DbType.Double;
				colvarFreight40hq.MaxLength = 0;
				colvarFreight40hq.AutoIncrement = false;
				colvarFreight40hq.IsNullable = true;
				colvarFreight40hq.IsPrimaryKey = false;
				colvarFreight40hq.IsForeignKey = false;
				colvarFreight40hq.IsReadOnly = false;
				colvarFreight40hq.DefaultSetting = @"";
				colvarFreight40hq.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFreight40hq);
				
				TableSchema.TableColumn colvarOnDestLcl = new TableSchema.TableColumn(schema);
				colvarOnDestLcl.ColumnName = "on_dest_lcl";
				colvarOnDestLcl.DataType = DbType.Double;
				colvarOnDestLcl.MaxLength = 0;
				colvarOnDestLcl.AutoIncrement = false;
				colvarOnDestLcl.IsNullable = true;
				colvarOnDestLcl.IsPrimaryKey = false;
				colvarOnDestLcl.IsForeignKey = false;
				colvarOnDestLcl.IsReadOnly = false;
				colvarOnDestLcl.DefaultSetting = @"";
				colvarOnDestLcl.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOnDestLcl);
				
				TableSchema.TableColumn colvarOnPierEtc = new TableSchema.TableColumn(schema);
				colvarOnPierEtc.ColumnName = "on_pier_etc";
				colvarOnPierEtc.DataType = DbType.Double;
				colvarOnPierEtc.MaxLength = 0;
				colvarOnPierEtc.AutoIncrement = false;
				colvarOnPierEtc.IsNullable = true;
				colvarOnPierEtc.IsPrimaryKey = false;
				colvarOnPierEtc.IsForeignKey = false;
				colvarOnPierEtc.IsReadOnly = false;
				colvarOnPierEtc.DefaultSetting = @"";
				colvarOnPierEtc.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOnPierEtc);
				
				TableSchema.TableColumn colvarOnDest20 = new TableSchema.TableColumn(schema);
				colvarOnDest20.ColumnName = "on_dest_20";
				colvarOnDest20.DataType = DbType.Double;
				colvarOnDest20.MaxLength = 0;
				colvarOnDest20.AutoIncrement = false;
				colvarOnDest20.IsNullable = true;
				colvarOnDest20.IsPrimaryKey = false;
				colvarOnDest20.IsForeignKey = false;
				colvarOnDest20.IsReadOnly = false;
				colvarOnDest20.DefaultSetting = @"";
				colvarOnDest20.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOnDest20);
				
				TableSchema.TableColumn colvarOnDest40 = new TableSchema.TableColumn(schema);
				colvarOnDest40.ColumnName = "on_dest_40";
				colvarOnDest40.DataType = DbType.Double;
				colvarOnDest40.MaxLength = 0;
				colvarOnDest40.AutoIncrement = false;
				colvarOnDest40.IsNullable = true;
				colvarOnDest40.IsPrimaryKey = false;
				colvarOnDest40.IsForeignKey = false;
				colvarOnDest40.IsReadOnly = false;
				colvarOnDest40.DefaultSetting = @"";
				colvarOnDest40.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOnDest40);
				
				TableSchema.TableColumn colvarOnDocs = new TableSchema.TableColumn(schema);
				colvarOnDocs.ColumnName = "on_docs";
				colvarOnDocs.DataType = DbType.Double;
				colvarOnDocs.MaxLength = 0;
				colvarOnDocs.AutoIncrement = false;
				colvarOnDocs.IsNullable = true;
				colvarOnDocs.IsPrimaryKey = false;
				colvarOnDocs.IsForeignKey = false;
				colvarOnDocs.IsReadOnly = false;
				colvarOnDocs.DefaultSetting = @"";
				colvarOnDocs.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOnDocs);
				
				TableSchema.TableColumn colvarOnCustoms = new TableSchema.TableColumn(schema);
				colvarOnCustoms.ColumnName = "on_customs";
				colvarOnCustoms.DataType = DbType.Double;
				colvarOnCustoms.MaxLength = 0;
				colvarOnCustoms.AutoIncrement = false;
				colvarOnCustoms.IsNullable = true;
				colvarOnCustoms.IsPrimaryKey = false;
				colvarOnCustoms.IsForeignKey = false;
				colvarOnCustoms.IsReadOnly = false;
				colvarOnCustoms.DefaultSetting = @"";
				colvarOnCustoms.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOnCustoms);
				
				TableSchema.TableColumn colvarOnPart = new TableSchema.TableColumn(schema);
				colvarOnPart.ColumnName = "on_part";
				colvarOnPart.DataType = DbType.Double;
				colvarOnPart.MaxLength = 0;
				colvarOnPart.AutoIncrement = false;
				colvarOnPart.IsNullable = true;
				colvarOnPart.IsPrimaryKey = false;
				colvarOnPart.IsForeignKey = false;
				colvarOnPart.IsReadOnly = false;
				colvarOnPart.DefaultSetting = @"";
				colvarOnPart.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOnPart);
				
				TableSchema.TableColumn colvarOnFull = new TableSchema.TableColumn(schema);
				colvarOnFull.ColumnName = "on_full";
				colvarOnFull.DataType = DbType.Double;
				colvarOnFull.MaxLength = 0;
				colvarOnFull.AutoIncrement = false;
				colvarOnFull.IsNullable = true;
				colvarOnFull.IsPrimaryKey = false;
				colvarOnFull.IsForeignKey = false;
				colvarOnFull.IsReadOnly = false;
				colvarOnFull.DefaultSetting = @"";
				colvarOnFull.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOnFull);
				
				TableSchema.TableColumn colvarOnHaul20 = new TableSchema.TableColumn(schema);
				colvarOnHaul20.ColumnName = "on_haul20";
				colvarOnHaul20.DataType = DbType.Double;
				colvarOnHaul20.MaxLength = 0;
				colvarOnHaul20.AutoIncrement = false;
				colvarOnHaul20.IsNullable = true;
				colvarOnHaul20.IsPrimaryKey = false;
				colvarOnHaul20.IsForeignKey = false;
				colvarOnHaul20.IsReadOnly = false;
				colvarOnHaul20.DefaultSetting = @"";
				colvarOnHaul20.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOnHaul20);
				
				TableSchema.TableColumn colvarOnHaul40 = new TableSchema.TableColumn(schema);
				colvarOnHaul40.ColumnName = "on_haul40";
				colvarOnHaul40.DataType = DbType.Double;
				colvarOnHaul40.MaxLength = 0;
				colvarOnHaul40.AutoIncrement = false;
				colvarOnHaul40.IsNullable = true;
				colvarOnHaul40.IsPrimaryKey = false;
				colvarOnHaul40.IsForeignKey = false;
				colvarOnHaul40.IsReadOnly = false;
				colvarOnHaul40.DefaultSetting = @"";
				colvarOnHaul40.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOnHaul40);
				
				TableSchema.TableColumn colvarOnShunt20 = new TableSchema.TableColumn(schema);
				colvarOnShunt20.ColumnName = "on_shunt20";
				colvarOnShunt20.DataType = DbType.Double;
				colvarOnShunt20.MaxLength = 0;
				colvarOnShunt20.AutoIncrement = false;
				colvarOnShunt20.IsNullable = true;
				colvarOnShunt20.IsPrimaryKey = false;
				colvarOnShunt20.IsForeignKey = false;
				colvarOnShunt20.IsReadOnly = false;
				colvarOnShunt20.DefaultSetting = @"";
				colvarOnShunt20.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOnShunt20);
				
				TableSchema.TableColumn colvarOnShunt40 = new TableSchema.TableColumn(schema);
				colvarOnShunt40.ColumnName = "on_shunt40";
				colvarOnShunt40.DataType = DbType.Double;
				colvarOnShunt40.MaxLength = 0;
				colvarOnShunt40.AutoIncrement = false;
				colvarOnShunt40.IsNullable = true;
				colvarOnShunt40.IsPrimaryKey = false;
				colvarOnShunt40.IsForeignKey = false;
				colvarOnShunt40.IsReadOnly = false;
				colvarOnShunt40.DefaultSetting = @"";
				colvarOnShunt40.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOnShunt40);
				
				TableSchema.TableColumn colvarOnPallets = new TableSchema.TableColumn(schema);
				colvarOnPallets.ColumnName = "on_pallets";
				colvarOnPallets.DataType = DbType.Double;
				colvarOnPallets.MaxLength = 0;
				colvarOnPallets.AutoIncrement = false;
				colvarOnPallets.IsNullable = true;
				colvarOnPallets.IsPrimaryKey = false;
				colvarOnPallets.IsForeignKey = false;
				colvarOnPallets.IsReadOnly = false;
				colvarOnPallets.DefaultSetting = @"";
				colvarOnPallets.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOnPallets);
				
				TableSchema.TableColumn colvarOnOther = new TableSchema.TableColumn(schema);
				colvarOnOther.ColumnName = "on_other";
				colvarOnOther.DataType = DbType.Double;
				colvarOnOther.MaxLength = 0;
				colvarOnOther.AutoIncrement = false;
				colvarOnOther.IsNullable = true;
				colvarOnOther.IsPrimaryKey = false;
				colvarOnOther.IsForeignKey = false;
				colvarOnOther.IsReadOnly = false;
				colvarOnOther.DefaultSetting = @"";
				colvarOnOther.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOnOther);
				
				TableSchema.TableColumn colvarCsTimestamp = new TableSchema.TableColumn(schema);
				colvarCsTimestamp.ColumnName = "cs_timestamp";
				colvarCsTimestamp.DataType = DbType.Binary;
				colvarCsTimestamp.MaxLength = 0;
				colvarCsTimestamp.AutoIncrement = false;
				colvarCsTimestamp.IsNullable = false;
				colvarCsTimestamp.IsPrimaryKey = false;
				colvarCsTimestamp.IsForeignKey = false;
				colvarCsTimestamp.IsReadOnly = true;
				colvarCsTimestamp.DefaultSetting = @"";
				colvarCsTimestamp.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCsTimestamp);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["pricerprov"].AddSchema("costing_summary",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("CostingId")]
		[Bindable(true)]
		public int CostingId 
		{
			get { return GetColumnValue<int>(Columns.CostingId); }
			set { SetColumnValue(Columns.CostingId, value); }
		}
		  
		[XmlAttribute("QuoteId")]
		[Bindable(true)]
		public int? QuoteId 
		{
			get { return GetColumnValue<int?>(Columns.QuoteId); }
			set { SetColumnValue(Columns.QuoteId, value); }
		}
		  
		[XmlAttribute("SummaryType")]
		[Bindable(true)]
		public string SummaryType 
		{
			get { return GetColumnValue<string>(Columns.SummaryType); }
			set { SetColumnValue(Columns.SummaryType, value); }
		}
		  
		[XmlAttribute("PrePart")]
		[Bindable(true)]
		public double? PrePart 
		{
			get { return GetColumnValue<double?>(Columns.PrePart); }
			set { SetColumnValue(Columns.PrePart, value); }
		}
		  
		[XmlAttribute("PreFull")]
		[Bindable(true)]
		public double? PreFull 
		{
			get { return GetColumnValue<double?>(Columns.PreFull); }
			set { SetColumnValue(Columns.PreFull, value); }
		}
		  
		[XmlAttribute("PreThc20")]
		[Bindable(true)]
		public double? PreThc20 
		{
			get { return GetColumnValue<double?>(Columns.PreThc20); }
			set { SetColumnValue(Columns.PreThc20, value); }
		}
		  
		[XmlAttribute("PreThc40")]
		[Bindable(true)]
		public double? PreThc40 
		{
			get { return GetColumnValue<double?>(Columns.PreThc40); }
			set { SetColumnValue(Columns.PreThc40, value); }
		}
		  
		[XmlAttribute("PreThclcl")]
		[Bindable(true)]
		public double? PreThclcl 
		{
			get { return GetColumnValue<double?>(Columns.PreThclcl); }
			set { SetColumnValue(Columns.PreThclcl, value); }
		}
		  
		[XmlAttribute("PreDocs")]
		[Bindable(true)]
		public double? PreDocs 
		{
			get { return GetColumnValue<double?>(Columns.PreDocs); }
			set { SetColumnValue(Columns.PreDocs, value); }
		}
		  
		[XmlAttribute("PreOrigin")]
		[Bindable(true)]
		public double? PreOrigin 
		{
			get { return GetColumnValue<double?>(Columns.PreOrigin); }
			set { SetColumnValue(Columns.PreOrigin, value); }
		}
		  
		[XmlAttribute("PreHaul20")]
		[Bindable(true)]
		public double? PreHaul20 
		{
			get { return GetColumnValue<double?>(Columns.PreHaul20); }
			set { SetColumnValue(Columns.PreHaul20, value); }
		}
		  
		[XmlAttribute("PreHaul40")]
		[Bindable(true)]
		public double? PreHaul40 
		{
			get { return GetColumnValue<double?>(Columns.PreHaul40); }
			set { SetColumnValue(Columns.PreHaul40, value); }
		}
		  
		[XmlAttribute("FreightLcl")]
		[Bindable(true)]
		public double? FreightLcl 
		{
			get { return GetColumnValue<double?>(Columns.FreightLcl); }
			set { SetColumnValue(Columns.FreightLcl, value); }
		}
		  
		[XmlAttribute("Freight20")]
		[Bindable(true)]
		public double? Freight20 
		{
			get { return GetColumnValue<double?>(Columns.Freight20); }
			set { SetColumnValue(Columns.Freight20, value); }
		}
		  
		[XmlAttribute("Freight40")]
		[Bindable(true)]
		public double? Freight40 
		{
			get { return GetColumnValue<double?>(Columns.Freight40); }
			set { SetColumnValue(Columns.Freight40, value); }
		}
		  
		[XmlAttribute("Freight40hq")]
		[Bindable(true)]
		public double? Freight40hq 
		{
			get { return GetColumnValue<double?>(Columns.Freight40hq); }
			set { SetColumnValue(Columns.Freight40hq, value); }
		}
		  
		[XmlAttribute("OnDestLcl")]
		[Bindable(true)]
		public double? OnDestLcl 
		{
			get { return GetColumnValue<double?>(Columns.OnDestLcl); }
			set { SetColumnValue(Columns.OnDestLcl, value); }
		}
		  
		[XmlAttribute("OnPierEtc")]
		[Bindable(true)]
		public double? OnPierEtc 
		{
			get { return GetColumnValue<double?>(Columns.OnPierEtc); }
			set { SetColumnValue(Columns.OnPierEtc, value); }
		}
		  
		[XmlAttribute("OnDest20")]
		[Bindable(true)]
		public double? OnDest20 
		{
			get { return GetColumnValue<double?>(Columns.OnDest20); }
			set { SetColumnValue(Columns.OnDest20, value); }
		}
		  
		[XmlAttribute("OnDest40")]
		[Bindable(true)]
		public double? OnDest40 
		{
			get { return GetColumnValue<double?>(Columns.OnDest40); }
			set { SetColumnValue(Columns.OnDest40, value); }
		}
		  
		[XmlAttribute("OnDocs")]
		[Bindable(true)]
		public double? OnDocs 
		{
			get { return GetColumnValue<double?>(Columns.OnDocs); }
			set { SetColumnValue(Columns.OnDocs, value); }
		}
		  
		[XmlAttribute("OnCustoms")]
		[Bindable(true)]
		public double? OnCustoms 
		{
			get { return GetColumnValue<double?>(Columns.OnCustoms); }
			set { SetColumnValue(Columns.OnCustoms, value); }
		}
		  
		[XmlAttribute("OnPart")]
		[Bindable(true)]
		public double? OnPart 
		{
			get { return GetColumnValue<double?>(Columns.OnPart); }
			set { SetColumnValue(Columns.OnPart, value); }
		}
		  
		[XmlAttribute("OnFull")]
		[Bindable(true)]
		public double? OnFull 
		{
			get { return GetColumnValue<double?>(Columns.OnFull); }
			set { SetColumnValue(Columns.OnFull, value); }
		}
		  
		[XmlAttribute("OnHaul20")]
		[Bindable(true)]
		public double? OnHaul20 
		{
			get { return GetColumnValue<double?>(Columns.OnHaul20); }
			set { SetColumnValue(Columns.OnHaul20, value); }
		}
		  
		[XmlAttribute("OnHaul40")]
		[Bindable(true)]
		public double? OnHaul40 
		{
			get { return GetColumnValue<double?>(Columns.OnHaul40); }
			set { SetColumnValue(Columns.OnHaul40, value); }
		}
		  
		[XmlAttribute("OnShunt20")]
		[Bindable(true)]
		public double? OnShunt20 
		{
			get { return GetColumnValue<double?>(Columns.OnShunt20); }
			set { SetColumnValue(Columns.OnShunt20, value); }
		}
		  
		[XmlAttribute("OnShunt40")]
		[Bindable(true)]
		public double? OnShunt40 
		{
			get { return GetColumnValue<double?>(Columns.OnShunt40); }
			set { SetColumnValue(Columns.OnShunt40, value); }
		}
		  
		[XmlAttribute("OnPallets")]
		[Bindable(true)]
		public double? OnPallets 
		{
			get { return GetColumnValue<double?>(Columns.OnPallets); }
			set { SetColumnValue(Columns.OnPallets, value); }
		}
		  
		[XmlAttribute("OnOther")]
		[Bindable(true)]
		public double? OnOther 
		{
			get { return GetColumnValue<double?>(Columns.OnOther); }
			set { SetColumnValue(Columns.OnOther, value); }
		}
		  
		[XmlAttribute("CsTimestamp")]
		[Bindable(true)]
		public byte[] CsTimestamp 
		{
			get { return GetColumnValue<byte[]>(Columns.CsTimestamp); }
			set { SetColumnValue(Columns.CsTimestamp, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int? varQuoteId,string varSummaryType,double? varPrePart,double? varPreFull,double? varPreThc20,double? varPreThc40,double? varPreThclcl,double? varPreDocs,double? varPreOrigin,double? varPreHaul20,double? varPreHaul40,double? varFreightLcl,double? varFreight20,double? varFreight40,double? varFreight40hq,double? varOnDestLcl,double? varOnPierEtc,double? varOnDest20,double? varOnDest40,double? varOnDocs,double? varOnCustoms,double? varOnPart,double? varOnFull,double? varOnHaul20,double? varOnHaul40,double? varOnShunt20,double? varOnShunt40,double? varOnPallets,double? varOnOther,byte[] varCsTimestamp)
		{
			CostingSummary item = new CostingSummary();
			
			item.QuoteId = varQuoteId;
			
			item.SummaryType = varSummaryType;
			
			item.PrePart = varPrePart;
			
			item.PreFull = varPreFull;
			
			item.PreThc20 = varPreThc20;
			
			item.PreThc40 = varPreThc40;
			
			item.PreThclcl = varPreThclcl;
			
			item.PreDocs = varPreDocs;
			
			item.PreOrigin = varPreOrigin;
			
			item.PreHaul20 = varPreHaul20;
			
			item.PreHaul40 = varPreHaul40;
			
			item.FreightLcl = varFreightLcl;
			
			item.Freight20 = varFreight20;
			
			item.Freight40 = varFreight40;
			
			item.Freight40hq = varFreight40hq;
			
			item.OnDestLcl = varOnDestLcl;
			
			item.OnPierEtc = varOnPierEtc;
			
			item.OnDest20 = varOnDest20;
			
			item.OnDest40 = varOnDest40;
			
			item.OnDocs = varOnDocs;
			
			item.OnCustoms = varOnCustoms;
			
			item.OnPart = varOnPart;
			
			item.OnFull = varOnFull;
			
			item.OnHaul20 = varOnHaul20;
			
			item.OnHaul40 = varOnHaul40;
			
			item.OnShunt20 = varOnShunt20;
			
			item.OnShunt40 = varOnShunt40;
			
			item.OnPallets = varOnPallets;
			
			item.OnOther = varOnOther;
			
			item.CsTimestamp = varCsTimestamp;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varCostingId,int? varQuoteId,string varSummaryType,double? varPrePart,double? varPreFull,double? varPreThc20,double? varPreThc40,double? varPreThclcl,double? varPreDocs,double? varPreOrigin,double? varPreHaul20,double? varPreHaul40,double? varFreightLcl,double? varFreight20,double? varFreight40,double? varFreight40hq,double? varOnDestLcl,double? varOnPierEtc,double? varOnDest20,double? varOnDest40,double? varOnDocs,double? varOnCustoms,double? varOnPart,double? varOnFull,double? varOnHaul20,double? varOnHaul40,double? varOnShunt20,double? varOnShunt40,double? varOnPallets,double? varOnOther,byte[] varCsTimestamp)
		{
			CostingSummary item = new CostingSummary();
			
				item.CostingId = varCostingId;
			
				item.QuoteId = varQuoteId;
			
				item.SummaryType = varSummaryType;
			
				item.PrePart = varPrePart;
			
				item.PreFull = varPreFull;
			
				item.PreThc20 = varPreThc20;
			
				item.PreThc40 = varPreThc40;
			
				item.PreThclcl = varPreThclcl;
			
				item.PreDocs = varPreDocs;
			
				item.PreOrigin = varPreOrigin;
			
				item.PreHaul20 = varPreHaul20;
			
				item.PreHaul40 = varPreHaul40;
			
				item.FreightLcl = varFreightLcl;
			
				item.Freight20 = varFreight20;
			
				item.Freight40 = varFreight40;
			
				item.Freight40hq = varFreight40hq;
			
				item.OnDestLcl = varOnDestLcl;
			
				item.OnPierEtc = varOnPierEtc;
			
				item.OnDest20 = varOnDest20;
			
				item.OnDest40 = varOnDest40;
			
				item.OnDocs = varOnDocs;
			
				item.OnCustoms = varOnCustoms;
			
				item.OnPart = varOnPart;
			
				item.OnFull = varOnFull;
			
				item.OnHaul20 = varOnHaul20;
			
				item.OnHaul40 = varOnHaul40;
			
				item.OnShunt20 = varOnShunt20;
			
				item.OnShunt40 = varOnShunt40;
			
				item.OnPallets = varOnPallets;
			
				item.OnOther = varOnOther;
			
				item.CsTimestamp = varCsTimestamp;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn CostingIdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn QuoteIdColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn SummaryTypeColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn PrePartColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn PreFullColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn PreThc20Column
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn PreThc40Column
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn PreThclclColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn PreDocsColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn PreOriginColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn PreHaul20Column
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn PreHaul40Column
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn FreightLclColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn Freight20Column
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn Freight40Column
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn Freight40hqColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        public static TableSchema.TableColumn OnDestLclColumn
        {
            get { return Schema.Columns[16]; }
        }
        
        
        
        public static TableSchema.TableColumn OnPierEtcColumn
        {
            get { return Schema.Columns[17]; }
        }
        
        
        
        public static TableSchema.TableColumn OnDest20Column
        {
            get { return Schema.Columns[18]; }
        }
        
        
        
        public static TableSchema.TableColumn OnDest40Column
        {
            get { return Schema.Columns[19]; }
        }
        
        
        
        public static TableSchema.TableColumn OnDocsColumn
        {
            get { return Schema.Columns[20]; }
        }
        
        
        
        public static TableSchema.TableColumn OnCustomsColumn
        {
            get { return Schema.Columns[21]; }
        }
        
        
        
        public static TableSchema.TableColumn OnPartColumn
        {
            get { return Schema.Columns[22]; }
        }
        
        
        
        public static TableSchema.TableColumn OnFullColumn
        {
            get { return Schema.Columns[23]; }
        }
        
        
        
        public static TableSchema.TableColumn OnHaul20Column
        {
            get { return Schema.Columns[24]; }
        }
        
        
        
        public static TableSchema.TableColumn OnHaul40Column
        {
            get { return Schema.Columns[25]; }
        }
        
        
        
        public static TableSchema.TableColumn OnShunt20Column
        {
            get { return Schema.Columns[26]; }
        }
        
        
        
        public static TableSchema.TableColumn OnShunt40Column
        {
            get { return Schema.Columns[27]; }
        }
        
        
        
        public static TableSchema.TableColumn OnPalletsColumn
        {
            get { return Schema.Columns[28]; }
        }
        
        
        
        public static TableSchema.TableColumn OnOtherColumn
        {
            get { return Schema.Columns[29]; }
        }
        
        
        
        public static TableSchema.TableColumn CsTimestampColumn
        {
            get { return Schema.Columns[30]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string CostingId = @"costing_Id";
			 public static string QuoteId = @"quote_Id";
			 public static string SummaryType = @"summary_type";
			 public static string PrePart = @"pre_part";
			 public static string PreFull = @"pre_full";
			 public static string PreThc20 = @"pre_thc20";
			 public static string PreThc40 = @"pre_thc40";
			 public static string PreThclcl = @"pre_thclcl";
			 public static string PreDocs = @"pre_docs";
			 public static string PreOrigin = @"pre_origin";
			 public static string PreHaul20 = @"pre_haul20";
			 public static string PreHaul40 = @"pre_haul40";
			 public static string FreightLcl = @"freight_lcl";
			 public static string Freight20 = @"freight_20";
			 public static string Freight40 = @"freight_40";
			 public static string Freight40hq = @"freight_40hq";
			 public static string OnDestLcl = @"on_dest_lcl";
			 public static string OnPierEtc = @"on_pier_etc";
			 public static string OnDest20 = @"on_dest_20";
			 public static string OnDest40 = @"on_dest_40";
			 public static string OnDocs = @"on_docs";
			 public static string OnCustoms = @"on_customs";
			 public static string OnPart = @"on_part";
			 public static string OnFull = @"on_full";
			 public static string OnHaul20 = @"on_haul20";
			 public static string OnHaul40 = @"on_haul40";
			 public static string OnShunt20 = @"on_shunt20";
			 public static string OnShunt40 = @"on_shunt40";
			 public static string OnPallets = @"on_pallets";
			 public static string OnOther = @"on_other";
			 public static string CsTimestamp = @"cs_timestamp";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
