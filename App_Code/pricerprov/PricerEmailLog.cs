using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DAL.Pricer
{
	/// <summary>
	/// Strongly-typed collection for the PricerEmailLog class.
	/// </summary>
    [Serializable]
	public partial class PricerEmailLogCollection : ActiveList<PricerEmailLog, PricerEmailLogCollection>
	{	   
		public PricerEmailLogCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>PricerEmailLogCollection</returns>
		public PricerEmailLogCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                PricerEmailLog o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the pricer_email_log table.
	/// </summary>
	[Serializable]
	public partial class PricerEmailLog : ActiveRecord<PricerEmailLog>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public PricerEmailLog()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public PricerEmailLog(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public PricerEmailLog(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public PricerEmailLog(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("pricer_email_log", TableType.Table, DataService.GetInstance("pricerprov"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarEmailLogId = new TableSchema.TableColumn(schema);
				colvarEmailLogId.ColumnName = "email_log_ID";
				colvarEmailLogId.DataType = DbType.Int32;
				colvarEmailLogId.MaxLength = 0;
				colvarEmailLogId.AutoIncrement = true;
				colvarEmailLogId.IsNullable = false;
				colvarEmailLogId.IsPrimaryKey = true;
				colvarEmailLogId.IsForeignKey = false;
				colvarEmailLogId.IsReadOnly = false;
				colvarEmailLogId.DefaultSetting = @"";
				colvarEmailLogId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEmailLogId);
				
				TableSchema.TableColumn colvarQuoteId = new TableSchema.TableColumn(schema);
				colvarQuoteId.ColumnName = "quote_id";
				colvarQuoteId.DataType = DbType.Int32;
				colvarQuoteId.MaxLength = 0;
				colvarQuoteId.AutoIncrement = false;
				colvarQuoteId.IsNullable = true;
				colvarQuoteId.IsPrimaryKey = false;
				colvarQuoteId.IsForeignKey = false;
				colvarQuoteId.IsReadOnly = false;
				
						colvarQuoteId.DefaultSetting = @"((0))";
				colvarQuoteId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarQuoteId);
				
				TableSchema.TableColumn colvarPoNumber = new TableSchema.TableColumn(schema);
				colvarPoNumber.ColumnName = "po_number";
				colvarPoNumber.DataType = DbType.String;
				colvarPoNumber.MaxLength = 50;
				colvarPoNumber.AutoIncrement = false;
				colvarPoNumber.IsNullable = true;
				colvarPoNumber.IsPrimaryKey = false;
				colvarPoNumber.IsForeignKey = false;
				colvarPoNumber.IsReadOnly = false;
				colvarPoNumber.DefaultSetting = @"";
				colvarPoNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPoNumber);
				
				TableSchema.TableColumn colvarIsbn = new TableSchema.TableColumn(schema);
				colvarIsbn.ColumnName = "ISBN";
				colvarIsbn.DataType = DbType.String;
				colvarIsbn.MaxLength = 50;
				colvarIsbn.AutoIncrement = false;
				colvarIsbn.IsNullable = true;
				colvarIsbn.IsPrimaryKey = false;
				colvarIsbn.IsForeignKey = false;
				colvarIsbn.IsReadOnly = false;
				colvarIsbn.DefaultSetting = @"";
				colvarIsbn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsbn);
				
				TableSchema.TableColumn colvarPrinter = new TableSchema.TableColumn(schema);
				colvarPrinter.ColumnName = "printer";
				colvarPrinter.DataType = DbType.String;
				colvarPrinter.MaxLength = 50;
				colvarPrinter.AutoIncrement = false;
				colvarPrinter.IsNullable = true;
				colvarPrinter.IsPrimaryKey = false;
				colvarPrinter.IsForeignKey = false;
				colvarPrinter.IsReadOnly = false;
				colvarPrinter.DefaultSetting = @"";
				colvarPrinter.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPrinter);
				
				TableSchema.TableColumn colvarExworksDate = new TableSchema.TableColumn(schema);
				colvarExworksDate.ColumnName = "exworks_date";
				colvarExworksDate.DataType = DbType.DateTime;
				colvarExworksDate.MaxLength = 0;
				colvarExworksDate.AutoIncrement = false;
				colvarExworksDate.IsNullable = true;
				colvarExworksDate.IsPrimaryKey = false;
				colvarExworksDate.IsForeignKey = false;
				colvarExworksDate.IsReadOnly = false;
				colvarExworksDate.DefaultSetting = @"";
				colvarExworksDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarExworksDate);
				
				TableSchema.TableColumn colvarDueDate = new TableSchema.TableColumn(schema);
				colvarDueDate.ColumnName = "due_date";
				colvarDueDate.DataType = DbType.DateTime;
				colvarDueDate.MaxLength = 0;
				colvarDueDate.AutoIncrement = false;
				colvarDueDate.IsNullable = true;
				colvarDueDate.IsPrimaryKey = false;
				colvarDueDate.IsForeignKey = false;
				colvarDueDate.IsReadOnly = false;
				colvarDueDate.DefaultSetting = @"";
				colvarDueDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDueDate);
				
				TableSchema.TableColumn colvarComments = new TableSchema.TableColumn(schema);
				colvarComments.ColumnName = "comments";
				colvarComments.DataType = DbType.AnsiString;
				colvarComments.MaxLength = 2147483647;
				colvarComments.AutoIncrement = false;
				colvarComments.IsNullable = true;
				colvarComments.IsPrimaryKey = false;
				colvarComments.IsForeignKey = false;
				colvarComments.IsReadOnly = false;
				colvarComments.DefaultSetting = @"";
				colvarComments.ForeignKeyTableName = "";
				schema.Columns.Add(colvarComments);
				
				TableSchema.TableColumn colvarSentBy = new TableSchema.TableColumn(schema);
				colvarSentBy.ColumnName = "sent_by";
				colvarSentBy.DataType = DbType.String;
				colvarSentBy.MaxLength = 75;
				colvarSentBy.AutoIncrement = false;
				colvarSentBy.IsNullable = true;
				colvarSentBy.IsPrimaryKey = false;
				colvarSentBy.IsForeignKey = false;
				colvarSentBy.IsReadOnly = false;
				colvarSentBy.DefaultSetting = @"";
				colvarSentBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSentBy);
				
				TableSchema.TableColumn colvarCompany = new TableSchema.TableColumn(schema);
				colvarCompany.ColumnName = "company";
				colvarCompany.DataType = DbType.String;
				colvarCompany.MaxLength = 75;
				colvarCompany.AutoIncrement = false;
				colvarCompany.IsNullable = true;
				colvarCompany.IsPrimaryKey = false;
				colvarCompany.IsForeignKey = false;
				colvarCompany.IsReadOnly = false;
				colvarCompany.DefaultSetting = @"";
				colvarCompany.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCompany);
				
				TableSchema.TableColumn colvarContactTel = new TableSchema.TableColumn(schema);
				colvarContactTel.ColumnName = "contact_tel";
				colvarContactTel.DataType = DbType.String;
				colvarContactTel.MaxLength = 50;
				colvarContactTel.AutoIncrement = false;
				colvarContactTel.IsNullable = true;
				colvarContactTel.IsPrimaryKey = false;
				colvarContactTel.IsForeignKey = false;
				colvarContactTel.IsReadOnly = false;
				colvarContactTel.DefaultSetting = @"";
				colvarContactTel.ForeignKeyTableName = "";
				schema.Columns.Add(colvarContactTel);
				
				TableSchema.TableColumn colvarContactEmail = new TableSchema.TableColumn(schema);
				colvarContactEmail.ColumnName = "contact_email";
				colvarContactEmail.DataType = DbType.String;
				colvarContactEmail.MaxLength = 75;
				colvarContactEmail.AutoIncrement = false;
				colvarContactEmail.IsNullable = true;
				colvarContactEmail.IsPrimaryKey = false;
				colvarContactEmail.IsForeignKey = false;
				colvarContactEmail.IsReadOnly = false;
				colvarContactEmail.DefaultSetting = @"";
				colvarContactEmail.ForeignKeyTableName = "";
				schema.Columns.Add(colvarContactEmail);
				
				TableSchema.TableColumn colvarPublishipContact = new TableSchema.TableColumn(schema);
				colvarPublishipContact.ColumnName = "publiship_contact";
				colvarPublishipContact.DataType = DbType.String;
				colvarPublishipContact.MaxLength = 50;
				colvarPublishipContact.AutoIncrement = false;
				colvarPublishipContact.IsNullable = true;
				colvarPublishipContact.IsPrimaryKey = false;
				colvarPublishipContact.IsForeignKey = false;
				colvarPublishipContact.IsReadOnly = false;
				colvarPublishipContact.DefaultSetting = @"";
				colvarPublishipContact.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPublishipContact);
				
				TableSchema.TableColumn colvarEmTimestamp = new TableSchema.TableColumn(schema);
				colvarEmTimestamp.ColumnName = "em_timestamp";
				colvarEmTimestamp.DataType = DbType.Binary;
				colvarEmTimestamp.MaxLength = 0;
				colvarEmTimestamp.AutoIncrement = false;
				colvarEmTimestamp.IsNullable = true;
				colvarEmTimestamp.IsPrimaryKey = false;
				colvarEmTimestamp.IsForeignKey = false;
				colvarEmTimestamp.IsReadOnly = true;
				colvarEmTimestamp.DefaultSetting = @"";
				colvarEmTimestamp.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEmTimestamp);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["pricerprov"].AddSchema("pricer_email_log",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("EmailLogId")]
		[Bindable(true)]
		public int EmailLogId 
		{
			get { return GetColumnValue<int>(Columns.EmailLogId); }
			set { SetColumnValue(Columns.EmailLogId, value); }
		}
		  
		[XmlAttribute("QuoteId")]
		[Bindable(true)]
		public int? QuoteId 
		{
			get { return GetColumnValue<int?>(Columns.QuoteId); }
			set { SetColumnValue(Columns.QuoteId, value); }
		}
		  
		[XmlAttribute("PoNumber")]
		[Bindable(true)]
		public string PoNumber 
		{
			get { return GetColumnValue<string>(Columns.PoNumber); }
			set { SetColumnValue(Columns.PoNumber, value); }
		}
		  
		[XmlAttribute("Isbn")]
		[Bindable(true)]
		public string Isbn 
		{
			get { return GetColumnValue<string>(Columns.Isbn); }
			set { SetColumnValue(Columns.Isbn, value); }
		}
		  
		[XmlAttribute("Printer")]
		[Bindable(true)]
		public string Printer 
		{
			get { return GetColumnValue<string>(Columns.Printer); }
			set { SetColumnValue(Columns.Printer, value); }
		}
		  
		[XmlAttribute("ExworksDate")]
		[Bindable(true)]
		public DateTime? ExworksDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.ExworksDate); }
			set { SetColumnValue(Columns.ExworksDate, value); }
		}
		  
		[XmlAttribute("DueDate")]
		[Bindable(true)]
		public DateTime? DueDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.DueDate); }
			set { SetColumnValue(Columns.DueDate, value); }
		}
		  
		[XmlAttribute("Comments")]
		[Bindable(true)]
		public string Comments 
		{
			get { return GetColumnValue<string>(Columns.Comments); }
			set { SetColumnValue(Columns.Comments, value); }
		}
		  
		[XmlAttribute("SentBy")]
		[Bindable(true)]
		public string SentBy 
		{
			get { return GetColumnValue<string>(Columns.SentBy); }
			set { SetColumnValue(Columns.SentBy, value); }
		}
		  
		[XmlAttribute("Company")]
		[Bindable(true)]
		public string Company 
		{
			get { return GetColumnValue<string>(Columns.Company); }
			set { SetColumnValue(Columns.Company, value); }
		}
		  
		[XmlAttribute("ContactTel")]
		[Bindable(true)]
		public string ContactTel 
		{
			get { return GetColumnValue<string>(Columns.ContactTel); }
			set { SetColumnValue(Columns.ContactTel, value); }
		}
		  
		[XmlAttribute("ContactEmail")]
		[Bindable(true)]
		public string ContactEmail 
		{
			get { return GetColumnValue<string>(Columns.ContactEmail); }
			set { SetColumnValue(Columns.ContactEmail, value); }
		}
		  
		[XmlAttribute("PublishipContact")]
		[Bindable(true)]
		public string PublishipContact 
		{
			get { return GetColumnValue<string>(Columns.PublishipContact); }
			set { SetColumnValue(Columns.PublishipContact, value); }
		}
		  
		[XmlAttribute("EmTimestamp")]
		[Bindable(true)]
		public byte[] EmTimestamp 
		{
			get { return GetColumnValue<byte[]>(Columns.EmTimestamp); }
			set { SetColumnValue(Columns.EmTimestamp, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int? varQuoteId,string varPoNumber,string varIsbn,string varPrinter,DateTime? varExworksDate,DateTime? varDueDate,string varComments,string varSentBy,string varCompany,string varContactTel,string varContactEmail,string varPublishipContact,byte[] varEmTimestamp)
		{
			PricerEmailLog item = new PricerEmailLog();
			
			item.QuoteId = varQuoteId;
			
			item.PoNumber = varPoNumber;
			
			item.Isbn = varIsbn;
			
			item.Printer = varPrinter;
			
			item.ExworksDate = varExworksDate;
			
			item.DueDate = varDueDate;
			
			item.Comments = varComments;
			
			item.SentBy = varSentBy;
			
			item.Company = varCompany;
			
			item.ContactTel = varContactTel;
			
			item.ContactEmail = varContactEmail;
			
			item.PublishipContact = varPublishipContact;
			
			item.EmTimestamp = varEmTimestamp;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varEmailLogId,int? varQuoteId,string varPoNumber,string varIsbn,string varPrinter,DateTime? varExworksDate,DateTime? varDueDate,string varComments,string varSentBy,string varCompany,string varContactTel,string varContactEmail,string varPublishipContact,byte[] varEmTimestamp)
		{
			PricerEmailLog item = new PricerEmailLog();
			
				item.EmailLogId = varEmailLogId;
			
				item.QuoteId = varQuoteId;
			
				item.PoNumber = varPoNumber;
			
				item.Isbn = varIsbn;
			
				item.Printer = varPrinter;
			
				item.ExworksDate = varExworksDate;
			
				item.DueDate = varDueDate;
			
				item.Comments = varComments;
			
				item.SentBy = varSentBy;
			
				item.Company = varCompany;
			
				item.ContactTel = varContactTel;
			
				item.ContactEmail = varContactEmail;
			
				item.PublishipContact = varPublishipContact;
			
				item.EmTimestamp = varEmTimestamp;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn EmailLogIdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn QuoteIdColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn PoNumberColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn IsbnColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn PrinterColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn ExworksDateColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn DueDateColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn CommentsColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn SentByColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn CompanyColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn ContactTelColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn ContactEmailColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn PublishipContactColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn EmTimestampColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string EmailLogId = @"email_log_ID";
			 public static string QuoteId = @"quote_id";
			 public static string PoNumber = @"po_number";
			 public static string Isbn = @"ISBN";
			 public static string Printer = @"printer";
			 public static string ExworksDate = @"exworks_date";
			 public static string DueDate = @"due_date";
			 public static string Comments = @"comments";
			 public static string SentBy = @"sent_by";
			 public static string Company = @"company";
			 public static string ContactTel = @"contact_tel";
			 public static string ContactEmail = @"contact_email";
			 public static string PublishipContact = @"publiship_contact";
			 public static string EmTimestamp = @"em_timestamp";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
