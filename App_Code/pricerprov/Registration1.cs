using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DAL.Pricer
{
	/// <summary>
	/// Strongly-typed collection for the Registration1 class.
	/// </summary>
    [Serializable]
	public partial class Registration1Collection : ActiveList<Registration1, Registration1Collection>
	{	   
		public Registration1Collection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>Registration1Collection</returns>
		public Registration1Collection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                Registration1 o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the registration_1 table.
	/// </summary>
	[Serializable]
	public partial class Registration1 : ActiveRecord<Registration1>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public Registration1()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public Registration1(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public Registration1(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public Registration1(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("registration_1", TableType.Table, DataService.GetInstance("pricerprov"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarRegId = new TableSchema.TableColumn(schema);
				colvarRegId.ColumnName = "reg_ID";
				colvarRegId.DataType = DbType.Int32;
				colvarRegId.MaxLength = 0;
				colvarRegId.AutoIncrement = true;
				colvarRegId.IsNullable = false;
				colvarRegId.IsPrimaryKey = true;
				colvarRegId.IsForeignKey = false;
				colvarRegId.IsReadOnly = false;
				colvarRegId.DefaultSetting = @"";
				colvarRegId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRegId);
				
				TableSchema.TableColumn colvarRegDate = new TableSchema.TableColumn(schema);
				colvarRegDate.ColumnName = "reg_date";
				colvarRegDate.DataType = DbType.DateTime;
				colvarRegDate.MaxLength = 0;
				colvarRegDate.AutoIncrement = false;
				colvarRegDate.IsNullable = false;
				colvarRegDate.IsPrimaryKey = false;
				colvarRegDate.IsForeignKey = false;
				colvarRegDate.IsReadOnly = false;
				colvarRegDate.DefaultSetting = @"";
				colvarRegDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRegDate);
				
				TableSchema.TableColumn colvarRegName1 = new TableSchema.TableColumn(schema);
				colvarRegName1.ColumnName = "reg_name_1";
				colvarRegName1.DataType = DbType.String;
				colvarRegName1.MaxLength = 50;
				colvarRegName1.AutoIncrement = false;
				colvarRegName1.IsNullable = true;
				colvarRegName1.IsPrimaryKey = false;
				colvarRegName1.IsForeignKey = false;
				colvarRegName1.IsReadOnly = false;
				colvarRegName1.DefaultSetting = @"";
				colvarRegName1.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRegName1);
				
				TableSchema.TableColumn colvarRegName2 = new TableSchema.TableColumn(schema);
				colvarRegName2.ColumnName = "reg_name_2";
				colvarRegName2.DataType = DbType.String;
				colvarRegName2.MaxLength = 50;
				colvarRegName2.AutoIncrement = false;
				colvarRegName2.IsNullable = true;
				colvarRegName2.IsPrimaryKey = false;
				colvarRegName2.IsForeignKey = false;
				colvarRegName2.IsReadOnly = false;
				colvarRegName2.DefaultSetting = @"";
				colvarRegName2.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRegName2);
				
				TableSchema.TableColumn colvarRegCompany = new TableSchema.TableColumn(schema);
				colvarRegCompany.ColumnName = "reg_company";
				colvarRegCompany.DataType = DbType.String;
				colvarRegCompany.MaxLength = 50;
				colvarRegCompany.AutoIncrement = false;
				colvarRegCompany.IsNullable = true;
				colvarRegCompany.IsPrimaryKey = false;
				colvarRegCompany.IsForeignKey = false;
				colvarRegCompany.IsReadOnly = false;
				colvarRegCompany.DefaultSetting = @"";
				colvarRegCompany.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRegCompany);
				
				TableSchema.TableColumn colvarRegAddr = new TableSchema.TableColumn(schema);
				colvarRegAddr.ColumnName = "reg_addr";
				colvarRegAddr.DataType = DbType.String;
				colvarRegAddr.MaxLength = 100;
				colvarRegAddr.AutoIncrement = false;
				colvarRegAddr.IsNullable = true;
				colvarRegAddr.IsPrimaryKey = false;
				colvarRegAddr.IsForeignKey = false;
				colvarRegAddr.IsReadOnly = false;
				colvarRegAddr.DefaultSetting = @"";
				colvarRegAddr.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRegAddr);
				
				TableSchema.TableColumn colvarRegTel = new TableSchema.TableColumn(schema);
				colvarRegTel.ColumnName = "reg_tel";
				colvarRegTel.DataType = DbType.String;
				colvarRegTel.MaxLength = 35;
				colvarRegTel.AutoIncrement = false;
				colvarRegTel.IsNullable = true;
				colvarRegTel.IsPrimaryKey = false;
				colvarRegTel.IsForeignKey = false;
				colvarRegTel.IsReadOnly = false;
				colvarRegTel.DefaultSetting = @"";
				colvarRegTel.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRegTel);
				
				TableSchema.TableColumn colvarRegEmail = new TableSchema.TableColumn(schema);
				colvarRegEmail.ColumnName = "reg_email";
				colvarRegEmail.DataType = DbType.String;
				colvarRegEmail.MaxLength = 75;
				colvarRegEmail.AutoIncrement = false;
				colvarRegEmail.IsNullable = true;
				colvarRegEmail.IsPrimaryKey = false;
				colvarRegEmail.IsForeignKey = false;
				colvarRegEmail.IsReadOnly = false;
				colvarRegEmail.DefaultSetting = @"";
				colvarRegEmail.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRegEmail);
				
				TableSchema.TableColumn colvarRegMailing = new TableSchema.TableColumn(schema);
				colvarRegMailing.ColumnName = "reg_mailing";
				colvarRegMailing.DataType = DbType.Boolean;
				colvarRegMailing.MaxLength = 0;
				colvarRegMailing.AutoIncrement = false;
				colvarRegMailing.IsNullable = true;
				colvarRegMailing.IsPrimaryKey = false;
				colvarRegMailing.IsForeignKey = false;
				colvarRegMailing.IsReadOnly = false;
				
						colvarRegMailing.DefaultSetting = @"((0))";
				colvarRegMailing.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRegMailing);
				
				TableSchema.TableColumn colvarRegWhere = new TableSchema.TableColumn(schema);
				colvarRegWhere.ColumnName = "reg_where";
				colvarRegWhere.DataType = DbType.String;
				colvarRegWhere.MaxLength = 15;
				colvarRegWhere.AutoIncrement = false;
				colvarRegWhere.IsNullable = true;
				colvarRegWhere.IsPrimaryKey = false;
				colvarRegWhere.IsForeignKey = false;
				colvarRegWhere.IsReadOnly = false;
				colvarRegWhere.DefaultSetting = @"";
				colvarRegWhere.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRegWhere);
				
				TableSchema.TableColumn colvarRegExtra = new TableSchema.TableColumn(schema);
				colvarRegExtra.ColumnName = "reg_extra";
				colvarRegExtra.DataType = DbType.AnsiString;
				colvarRegExtra.MaxLength = 2147483647;
				colvarRegExtra.AutoIncrement = false;
				colvarRegExtra.IsNullable = true;
				colvarRegExtra.IsPrimaryKey = false;
				colvarRegExtra.IsForeignKey = false;
				colvarRegExtra.IsReadOnly = false;
				colvarRegExtra.DefaultSetting = @"";
				colvarRegExtra.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRegExtra);
				
				TableSchema.TableColumn colvarRegIp = new TableSchema.TableColumn(schema);
				colvarRegIp.ColumnName = "reg_ip";
				colvarRegIp.DataType = DbType.String;
				colvarRegIp.MaxLength = 25;
				colvarRegIp.AutoIncrement = false;
				colvarRegIp.IsNullable = true;
				colvarRegIp.IsPrimaryKey = false;
				colvarRegIp.IsForeignKey = false;
				colvarRegIp.IsReadOnly = false;
				colvarRegIp.DefaultSetting = @"";
				colvarRegIp.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRegIp);
				
				TableSchema.TableColumn colvarRegCountry = new TableSchema.TableColumn(schema);
				colvarRegCountry.ColumnName = "reg_country";
				colvarRegCountry.DataType = DbType.String;
				colvarRegCountry.MaxLength = 25;
				colvarRegCountry.AutoIncrement = false;
				colvarRegCountry.IsNullable = true;
				colvarRegCountry.IsPrimaryKey = false;
				colvarRegCountry.IsForeignKey = false;
				colvarRegCountry.IsReadOnly = false;
				colvarRegCountry.DefaultSetting = @"";
				colvarRegCountry.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRegCountry);
				
				TableSchema.TableColumn colvarQbookTitle = new TableSchema.TableColumn(schema);
				colvarQbookTitle.ColumnName = "qbook_title";
				colvarQbookTitle.DataType = DbType.String;
				colvarQbookTitle.MaxLength = 100;
				colvarQbookTitle.AutoIncrement = false;
				colvarQbookTitle.IsNullable = true;
				colvarQbookTitle.IsPrimaryKey = false;
				colvarQbookTitle.IsForeignKey = false;
				colvarQbookTitle.IsReadOnly = false;
				colvarQbookTitle.DefaultSetting = @"";
				colvarQbookTitle.ForeignKeyTableName = "";
				schema.Columns.Add(colvarQbookTitle);
				
				TableSchema.TableColumn colvarQinDimensions = new TableSchema.TableColumn(schema);
				colvarQinDimensions.ColumnName = "qin_dimensions";
				colvarQinDimensions.DataType = DbType.Int32;
				colvarQinDimensions.MaxLength = 0;
				colvarQinDimensions.AutoIncrement = false;
				colvarQinDimensions.IsNullable = true;
				colvarQinDimensions.IsPrimaryKey = false;
				colvarQinDimensions.IsForeignKey = false;
				colvarQinDimensions.IsReadOnly = false;
				
						colvarQinDimensions.DefaultSetting = @"((0))";
				colvarQinDimensions.ForeignKeyTableName = "";
				schema.Columns.Add(colvarQinDimensions);
				
				TableSchema.TableColumn colvarQinCurrency = new TableSchema.TableColumn(schema);
				colvarQinCurrency.ColumnName = "qin_currency";
				colvarQinCurrency.DataType = DbType.String;
				colvarQinCurrency.MaxLength = 50;
				colvarQinCurrency.AutoIncrement = false;
				colvarQinCurrency.IsNullable = true;
				colvarQinCurrency.IsPrimaryKey = false;
				colvarQinCurrency.IsForeignKey = false;
				colvarQinCurrency.IsReadOnly = false;
				colvarQinCurrency.DefaultSetting = @"";
				colvarQinCurrency.ForeignKeyTableName = "";
				schema.Columns.Add(colvarQinCurrency);
				
				TableSchema.TableColumn colvarQinPallet = new TableSchema.TableColumn(schema);
				colvarQinPallet.ColumnName = "qin_pallet";
				colvarQinPallet.DataType = DbType.String;
				colvarQinPallet.MaxLength = 25;
				colvarQinPallet.AutoIncrement = false;
				colvarQinPallet.IsNullable = true;
				colvarQinPallet.IsPrimaryKey = false;
				colvarQinPallet.IsForeignKey = false;
				colvarQinPallet.IsReadOnly = false;
				colvarQinPallet.DefaultSetting = @"";
				colvarQinPallet.ForeignKeyTableName = "";
				schema.Columns.Add(colvarQinPallet);
				
				TableSchema.TableColumn colvarQinLength = new TableSchema.TableColumn(schema);
				colvarQinLength.ColumnName = "qin_length";
				colvarQinLength.DataType = DbType.Double;
				colvarQinLength.MaxLength = 0;
				colvarQinLength.AutoIncrement = false;
				colvarQinLength.IsNullable = true;
				colvarQinLength.IsPrimaryKey = false;
				colvarQinLength.IsForeignKey = false;
				colvarQinLength.IsReadOnly = false;
				
						colvarQinLength.DefaultSetting = @"((0))";
				colvarQinLength.ForeignKeyTableName = "";
				schema.Columns.Add(colvarQinLength);
				
				TableSchema.TableColumn colvarQinWidth = new TableSchema.TableColumn(schema);
				colvarQinWidth.ColumnName = "qin_width";
				colvarQinWidth.DataType = DbType.Double;
				colvarQinWidth.MaxLength = 0;
				colvarQinWidth.AutoIncrement = false;
				colvarQinWidth.IsNullable = true;
				colvarQinWidth.IsPrimaryKey = false;
				colvarQinWidth.IsForeignKey = false;
				colvarQinWidth.IsReadOnly = false;
				
						colvarQinWidth.DefaultSetting = @"((0))";
				colvarQinWidth.ForeignKeyTableName = "";
				schema.Columns.Add(colvarQinWidth);
				
				TableSchema.TableColumn colvarQinDepth = new TableSchema.TableColumn(schema);
				colvarQinDepth.ColumnName = "qin_depth";
				colvarQinDepth.DataType = DbType.Double;
				colvarQinDepth.MaxLength = 0;
				colvarQinDepth.AutoIncrement = false;
				colvarQinDepth.IsNullable = true;
				colvarQinDepth.IsPrimaryKey = false;
				colvarQinDepth.IsForeignKey = false;
				colvarQinDepth.IsReadOnly = false;
				
						colvarQinDepth.DefaultSetting = @"((0))";
				colvarQinDepth.ForeignKeyTableName = "";
				schema.Columns.Add(colvarQinDepth);
				
				TableSchema.TableColumn colvarQinWeight = new TableSchema.TableColumn(schema);
				colvarQinWeight.ColumnName = "qin_weight";
				colvarQinWeight.DataType = DbType.Double;
				colvarQinWeight.MaxLength = 0;
				colvarQinWeight.AutoIncrement = false;
				colvarQinWeight.IsNullable = true;
				colvarQinWeight.IsPrimaryKey = false;
				colvarQinWeight.IsForeignKey = false;
				colvarQinWeight.IsReadOnly = false;
				
						colvarQinWeight.DefaultSetting = @"((0))";
				colvarQinWeight.ForeignKeyTableName = "";
				schema.Columns.Add(colvarQinWeight);
				
				TableSchema.TableColumn colvarQinExtent = new TableSchema.TableColumn(schema);
				colvarQinExtent.ColumnName = "qin_extent";
				colvarQinExtent.DataType = DbType.Double;
				colvarQinExtent.MaxLength = 0;
				colvarQinExtent.AutoIncrement = false;
				colvarQinExtent.IsNullable = true;
				colvarQinExtent.IsPrimaryKey = false;
				colvarQinExtent.IsForeignKey = false;
				colvarQinExtent.IsReadOnly = false;
				
						colvarQinExtent.DefaultSetting = @"((0))";
				colvarQinExtent.ForeignKeyTableName = "";
				schema.Columns.Add(colvarQinExtent);
				
				TableSchema.TableColumn colvarQinPapergsm = new TableSchema.TableColumn(schema);
				colvarQinPapergsm.ColumnName = "qin_papergsm";
				colvarQinPapergsm.DataType = DbType.Double;
				colvarQinPapergsm.MaxLength = 0;
				colvarQinPapergsm.AutoIncrement = false;
				colvarQinPapergsm.IsNullable = true;
				colvarQinPapergsm.IsPrimaryKey = false;
				colvarQinPapergsm.IsForeignKey = false;
				colvarQinPapergsm.IsReadOnly = false;
				
						colvarQinPapergsm.DefaultSetting = @"((0))";
				colvarQinPapergsm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarQinPapergsm);
				
				TableSchema.TableColumn colvarQinHardback = new TableSchema.TableColumn(schema);
				colvarQinHardback.ColumnName = "qin_hardback";
				colvarQinHardback.DataType = DbType.Boolean;
				colvarQinHardback.MaxLength = 0;
				colvarQinHardback.AutoIncrement = false;
				colvarQinHardback.IsNullable = true;
				colvarQinHardback.IsPrimaryKey = false;
				colvarQinHardback.IsForeignKey = false;
				colvarQinHardback.IsReadOnly = false;
				
						colvarQinHardback.DefaultSetting = @"((0))";
				colvarQinHardback.ForeignKeyTableName = "";
				schema.Columns.Add(colvarQinHardback);
				
				TableSchema.TableColumn colvarQcopiesCarton = new TableSchema.TableColumn(schema);
				colvarQcopiesCarton.ColumnName = "qcopies_carton";
				colvarQcopiesCarton.DataType = DbType.Int32;
				colvarQcopiesCarton.MaxLength = 0;
				colvarQcopiesCarton.AutoIncrement = false;
				colvarQcopiesCarton.IsNullable = true;
				colvarQcopiesCarton.IsPrimaryKey = false;
				colvarQcopiesCarton.IsForeignKey = false;
				colvarQcopiesCarton.IsReadOnly = false;
				
						colvarQcopiesCarton.DefaultSetting = @"((0))";
				colvarQcopiesCarton.ForeignKeyTableName = "";
				schema.Columns.Add(colvarQcopiesCarton);
				
				TableSchema.TableColumn colvarQoriginName = new TableSchema.TableColumn(schema);
				colvarQoriginName.ColumnName = "qorigin_name";
				colvarQoriginName.DataType = DbType.String;
				colvarQoriginName.MaxLength = 75;
				colvarQoriginName.AutoIncrement = false;
				colvarQoriginName.IsNullable = true;
				colvarQoriginName.IsPrimaryKey = false;
				colvarQoriginName.IsForeignKey = false;
				colvarQoriginName.IsReadOnly = false;
				colvarQoriginName.DefaultSetting = @"";
				colvarQoriginName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarQoriginName);
				
				TableSchema.TableColumn colvarQfinalName = new TableSchema.TableColumn(schema);
				colvarQfinalName.ColumnName = "qfinal_name";
				colvarQfinalName.DataType = DbType.String;
				colvarQfinalName.MaxLength = 75;
				colvarQfinalName.AutoIncrement = false;
				colvarQfinalName.IsNullable = true;
				colvarQfinalName.IsPrimaryKey = false;
				colvarQfinalName.IsForeignKey = false;
				colvarQfinalName.IsReadOnly = false;
				colvarQfinalName.DefaultSetting = @"";
				colvarQfinalName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarQfinalName);
				
				TableSchema.TableColumn colvarQtotCopies = new TableSchema.TableColumn(schema);
				colvarQtotCopies.ColumnName = "qtot_copies";
				colvarQtotCopies.DataType = DbType.Int32;
				colvarQtotCopies.MaxLength = 0;
				colvarQtotCopies.AutoIncrement = false;
				colvarQtotCopies.IsNullable = true;
				colvarQtotCopies.IsPrimaryKey = false;
				colvarQtotCopies.IsForeignKey = false;
				colvarQtotCopies.IsReadOnly = false;
				
						colvarQtotCopies.DefaultSetting = @"((0))";
				colvarQtotCopies.ForeignKeyTableName = "";
				schema.Columns.Add(colvarQtotCopies);
				
				TableSchema.TableColumn colvarResTs = new TableSchema.TableColumn(schema);
				colvarResTs.ColumnName = "res_ts";
				colvarResTs.DataType = DbType.Binary;
				colvarResTs.MaxLength = 0;
				colvarResTs.AutoIncrement = false;
				colvarResTs.IsNullable = true;
				colvarResTs.IsPrimaryKey = false;
				colvarResTs.IsForeignKey = false;
				colvarResTs.IsReadOnly = true;
				colvarResTs.DefaultSetting = @"";
				colvarResTs.ForeignKeyTableName = "";
				schema.Columns.Add(colvarResTs);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["pricerprov"].AddSchema("registration_1",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("RegId")]
		[Bindable(true)]
		public int RegId 
		{
			get { return GetColumnValue<int>(Columns.RegId); }
			set { SetColumnValue(Columns.RegId, value); }
		}
		  
		[XmlAttribute("RegDate")]
		[Bindable(true)]
		public DateTime RegDate 
		{
			get { return GetColumnValue<DateTime>(Columns.RegDate); }
			set { SetColumnValue(Columns.RegDate, value); }
		}
		  
		[XmlAttribute("RegName1")]
		[Bindable(true)]
		public string RegName1 
		{
			get { return GetColumnValue<string>(Columns.RegName1); }
			set { SetColumnValue(Columns.RegName1, value); }
		}
		  
		[XmlAttribute("RegName2")]
		[Bindable(true)]
		public string RegName2 
		{
			get { return GetColumnValue<string>(Columns.RegName2); }
			set { SetColumnValue(Columns.RegName2, value); }
		}
		  
		[XmlAttribute("RegCompany")]
		[Bindable(true)]
		public string RegCompany 
		{
			get { return GetColumnValue<string>(Columns.RegCompany); }
			set { SetColumnValue(Columns.RegCompany, value); }
		}
		  
		[XmlAttribute("RegAddr")]
		[Bindable(true)]
		public string RegAddr 
		{
			get { return GetColumnValue<string>(Columns.RegAddr); }
			set { SetColumnValue(Columns.RegAddr, value); }
		}
		  
		[XmlAttribute("RegTel")]
		[Bindable(true)]
		public string RegTel 
		{
			get { return GetColumnValue<string>(Columns.RegTel); }
			set { SetColumnValue(Columns.RegTel, value); }
		}
		  
		[XmlAttribute("RegEmail")]
		[Bindable(true)]
		public string RegEmail 
		{
			get { return GetColumnValue<string>(Columns.RegEmail); }
			set { SetColumnValue(Columns.RegEmail, value); }
		}
		  
		[XmlAttribute("RegMailing")]
		[Bindable(true)]
		public bool? RegMailing 
		{
			get { return GetColumnValue<bool?>(Columns.RegMailing); }
			set { SetColumnValue(Columns.RegMailing, value); }
		}
		  
		[XmlAttribute("RegWhere")]
		[Bindable(true)]
		public string RegWhere 
		{
			get { return GetColumnValue<string>(Columns.RegWhere); }
			set { SetColumnValue(Columns.RegWhere, value); }
		}
		  
		[XmlAttribute("RegExtra")]
		[Bindable(true)]
		public string RegExtra 
		{
			get { return GetColumnValue<string>(Columns.RegExtra); }
			set { SetColumnValue(Columns.RegExtra, value); }
		}
		  
		[XmlAttribute("RegIp")]
		[Bindable(true)]
		public string RegIp 
		{
			get { return GetColumnValue<string>(Columns.RegIp); }
			set { SetColumnValue(Columns.RegIp, value); }
		}
		  
		[XmlAttribute("RegCountry")]
		[Bindable(true)]
		public string RegCountry 
		{
			get { return GetColumnValue<string>(Columns.RegCountry); }
			set { SetColumnValue(Columns.RegCountry, value); }
		}
		  
		[XmlAttribute("QbookTitle")]
		[Bindable(true)]
		public string QbookTitle 
		{
			get { return GetColumnValue<string>(Columns.QbookTitle); }
			set { SetColumnValue(Columns.QbookTitle, value); }
		}
		  
		[XmlAttribute("QinDimensions")]
		[Bindable(true)]
		public int? QinDimensions 
		{
			get { return GetColumnValue<int?>(Columns.QinDimensions); }
			set { SetColumnValue(Columns.QinDimensions, value); }
		}
		  
		[XmlAttribute("QinCurrency")]
		[Bindable(true)]
		public string QinCurrency 
		{
			get { return GetColumnValue<string>(Columns.QinCurrency); }
			set { SetColumnValue(Columns.QinCurrency, value); }
		}
		  
		[XmlAttribute("QinPallet")]
		[Bindable(true)]
		public string QinPallet 
		{
			get { return GetColumnValue<string>(Columns.QinPallet); }
			set { SetColumnValue(Columns.QinPallet, value); }
		}
		  
		[XmlAttribute("QinLength")]
		[Bindable(true)]
		public double? QinLength 
		{
			get { return GetColumnValue<double?>(Columns.QinLength); }
			set { SetColumnValue(Columns.QinLength, value); }
		}
		  
		[XmlAttribute("QinWidth")]
		[Bindable(true)]
		public double? QinWidth 
		{
			get { return GetColumnValue<double?>(Columns.QinWidth); }
			set { SetColumnValue(Columns.QinWidth, value); }
		}
		  
		[XmlAttribute("QinDepth")]
		[Bindable(true)]
		public double? QinDepth 
		{
			get { return GetColumnValue<double?>(Columns.QinDepth); }
			set { SetColumnValue(Columns.QinDepth, value); }
		}
		  
		[XmlAttribute("QinWeight")]
		[Bindable(true)]
		public double? QinWeight 
		{
			get { return GetColumnValue<double?>(Columns.QinWeight); }
			set { SetColumnValue(Columns.QinWeight, value); }
		}
		  
		[XmlAttribute("QinExtent")]
		[Bindable(true)]
		public double? QinExtent 
		{
			get { return GetColumnValue<double?>(Columns.QinExtent); }
			set { SetColumnValue(Columns.QinExtent, value); }
		}
		  
		[XmlAttribute("QinPapergsm")]
		[Bindable(true)]
		public double? QinPapergsm 
		{
			get { return GetColumnValue<double?>(Columns.QinPapergsm); }
			set { SetColumnValue(Columns.QinPapergsm, value); }
		}
		  
		[XmlAttribute("QinHardback")]
		[Bindable(true)]
		public bool? QinHardback 
		{
			get { return GetColumnValue<bool?>(Columns.QinHardback); }
			set { SetColumnValue(Columns.QinHardback, value); }
		}
		  
		[XmlAttribute("QcopiesCarton")]
		[Bindable(true)]
		public int? QcopiesCarton 
		{
			get { return GetColumnValue<int?>(Columns.QcopiesCarton); }
			set { SetColumnValue(Columns.QcopiesCarton, value); }
		}
		  
		[XmlAttribute("QoriginName")]
		[Bindable(true)]
		public string QoriginName 
		{
			get { return GetColumnValue<string>(Columns.QoriginName); }
			set { SetColumnValue(Columns.QoriginName, value); }
		}
		  
		[XmlAttribute("QfinalName")]
		[Bindable(true)]
		public string QfinalName 
		{
			get { return GetColumnValue<string>(Columns.QfinalName); }
			set { SetColumnValue(Columns.QfinalName, value); }
		}
		  
		[XmlAttribute("QtotCopies")]
		[Bindable(true)]
		public int? QtotCopies 
		{
			get { return GetColumnValue<int?>(Columns.QtotCopies); }
			set { SetColumnValue(Columns.QtotCopies, value); }
		}
		  
		[XmlAttribute("ResTs")]
		[Bindable(true)]
		public byte[] ResTs 
		{
			get { return GetColumnValue<byte[]>(Columns.ResTs); }
			set { SetColumnValue(Columns.ResTs, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(DateTime varRegDate,string varRegName1,string varRegName2,string varRegCompany,string varRegAddr,string varRegTel,string varRegEmail,bool? varRegMailing,string varRegWhere,string varRegExtra,string varRegIp,string varRegCountry,string varQbookTitle,int? varQinDimensions,string varQinCurrency,string varQinPallet,double? varQinLength,double? varQinWidth,double? varQinDepth,double? varQinWeight,double? varQinExtent,double? varQinPapergsm,bool? varQinHardback,int? varQcopiesCarton,string varQoriginName,string varQfinalName,int? varQtotCopies,byte[] varResTs)
		{
			Registration1 item = new Registration1();
			
			item.RegDate = varRegDate;
			
			item.RegName1 = varRegName1;
			
			item.RegName2 = varRegName2;
			
			item.RegCompany = varRegCompany;
			
			item.RegAddr = varRegAddr;
			
			item.RegTel = varRegTel;
			
			item.RegEmail = varRegEmail;
			
			item.RegMailing = varRegMailing;
			
			item.RegWhere = varRegWhere;
			
			item.RegExtra = varRegExtra;
			
			item.RegIp = varRegIp;
			
			item.RegCountry = varRegCountry;
			
			item.QbookTitle = varQbookTitle;
			
			item.QinDimensions = varQinDimensions;
			
			item.QinCurrency = varQinCurrency;
			
			item.QinPallet = varQinPallet;
			
			item.QinLength = varQinLength;
			
			item.QinWidth = varQinWidth;
			
			item.QinDepth = varQinDepth;
			
			item.QinWeight = varQinWeight;
			
			item.QinExtent = varQinExtent;
			
			item.QinPapergsm = varQinPapergsm;
			
			item.QinHardback = varQinHardback;
			
			item.QcopiesCarton = varQcopiesCarton;
			
			item.QoriginName = varQoriginName;
			
			item.QfinalName = varQfinalName;
			
			item.QtotCopies = varQtotCopies;
			
			item.ResTs = varResTs;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varRegId,DateTime varRegDate,string varRegName1,string varRegName2,string varRegCompany,string varRegAddr,string varRegTel,string varRegEmail,bool? varRegMailing,string varRegWhere,string varRegExtra,string varRegIp,string varRegCountry,string varQbookTitle,int? varQinDimensions,string varQinCurrency,string varQinPallet,double? varQinLength,double? varQinWidth,double? varQinDepth,double? varQinWeight,double? varQinExtent,double? varQinPapergsm,bool? varQinHardback,int? varQcopiesCarton,string varQoriginName,string varQfinalName,int? varQtotCopies,byte[] varResTs)
		{
			Registration1 item = new Registration1();
			
				item.RegId = varRegId;
			
				item.RegDate = varRegDate;
			
				item.RegName1 = varRegName1;
			
				item.RegName2 = varRegName2;
			
				item.RegCompany = varRegCompany;
			
				item.RegAddr = varRegAddr;
			
				item.RegTel = varRegTel;
			
				item.RegEmail = varRegEmail;
			
				item.RegMailing = varRegMailing;
			
				item.RegWhere = varRegWhere;
			
				item.RegExtra = varRegExtra;
			
				item.RegIp = varRegIp;
			
				item.RegCountry = varRegCountry;
			
				item.QbookTitle = varQbookTitle;
			
				item.QinDimensions = varQinDimensions;
			
				item.QinCurrency = varQinCurrency;
			
				item.QinPallet = varQinPallet;
			
				item.QinLength = varQinLength;
			
				item.QinWidth = varQinWidth;
			
				item.QinDepth = varQinDepth;
			
				item.QinWeight = varQinWeight;
			
				item.QinExtent = varQinExtent;
			
				item.QinPapergsm = varQinPapergsm;
			
				item.QinHardback = varQinHardback;
			
				item.QcopiesCarton = varQcopiesCarton;
			
				item.QoriginName = varQoriginName;
			
				item.QfinalName = varQfinalName;
			
				item.QtotCopies = varQtotCopies;
			
				item.ResTs = varResTs;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn RegIdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn RegDateColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn RegName1Column
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn RegName2Column
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn RegCompanyColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn RegAddrColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn RegTelColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn RegEmailColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn RegMailingColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn RegWhereColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn RegExtraColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn RegIpColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn RegCountryColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn QbookTitleColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn QinDimensionsColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn QinCurrencyColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        public static TableSchema.TableColumn QinPalletColumn
        {
            get { return Schema.Columns[16]; }
        }
        
        
        
        public static TableSchema.TableColumn QinLengthColumn
        {
            get { return Schema.Columns[17]; }
        }
        
        
        
        public static TableSchema.TableColumn QinWidthColumn
        {
            get { return Schema.Columns[18]; }
        }
        
        
        
        public static TableSchema.TableColumn QinDepthColumn
        {
            get { return Schema.Columns[19]; }
        }
        
        
        
        public static TableSchema.TableColumn QinWeightColumn
        {
            get { return Schema.Columns[20]; }
        }
        
        
        
        public static TableSchema.TableColumn QinExtentColumn
        {
            get { return Schema.Columns[21]; }
        }
        
        
        
        public static TableSchema.TableColumn QinPapergsmColumn
        {
            get { return Schema.Columns[22]; }
        }
        
        
        
        public static TableSchema.TableColumn QinHardbackColumn
        {
            get { return Schema.Columns[23]; }
        }
        
        
        
        public static TableSchema.TableColumn QcopiesCartonColumn
        {
            get { return Schema.Columns[24]; }
        }
        
        
        
        public static TableSchema.TableColumn QoriginNameColumn
        {
            get { return Schema.Columns[25]; }
        }
        
        
        
        public static TableSchema.TableColumn QfinalNameColumn
        {
            get { return Schema.Columns[26]; }
        }
        
        
        
        public static TableSchema.TableColumn QtotCopiesColumn
        {
            get { return Schema.Columns[27]; }
        }
        
        
        
        public static TableSchema.TableColumn ResTsColumn
        {
            get { return Schema.Columns[28]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string RegId = @"reg_ID";
			 public static string RegDate = @"reg_date";
			 public static string RegName1 = @"reg_name_1";
			 public static string RegName2 = @"reg_name_2";
			 public static string RegCompany = @"reg_company";
			 public static string RegAddr = @"reg_addr";
			 public static string RegTel = @"reg_tel";
			 public static string RegEmail = @"reg_email";
			 public static string RegMailing = @"reg_mailing";
			 public static string RegWhere = @"reg_where";
			 public static string RegExtra = @"reg_extra";
			 public static string RegIp = @"reg_ip";
			 public static string RegCountry = @"reg_country";
			 public static string QbookTitle = @"qbook_title";
			 public static string QinDimensions = @"qin_dimensions";
			 public static string QinCurrency = @"qin_currency";
			 public static string QinPallet = @"qin_pallet";
			 public static string QinLength = @"qin_length";
			 public static string QinWidth = @"qin_width";
			 public static string QinDepth = @"qin_depth";
			 public static string QinWeight = @"qin_weight";
			 public static string QinExtent = @"qin_extent";
			 public static string QinPapergsm = @"qin_papergsm";
			 public static string QinHardback = @"qin_hardback";
			 public static string QcopiesCarton = @"qcopies_carton";
			 public static string QoriginName = @"qorigin_name";
			 public static string QfinalName = @"qfinal_name";
			 public static string QtotCopies = @"qtot_copies";
			 public static string ResTs = @"res_ts";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
