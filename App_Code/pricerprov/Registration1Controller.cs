using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DAL.Pricer
{
    /// <summary>
    /// Controller class for registration_1
    /// </summary>
    [System.ComponentModel.DataObject]
    public partial class Registration1Controller
    {
        // Preload our schema..
        Registration1 thisSchemaLoad = new Registration1();
        private string userName = String.Empty;
        protected string UserName
        {
            get
            {
				if (userName.Length == 0) 
				{
    				if (System.Web.HttpContext.Current != null)
    				{
						userName=System.Web.HttpContext.Current.User.Identity.Name;
					}
					else
					{
						userName=System.Threading.Thread.CurrentPrincipal.Identity.Name;
					}
				}
				return userName;
            }
        }
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public Registration1Collection FetchAll()
        {
            Registration1Collection coll = new Registration1Collection();
            Query qry = new Query(Registration1.Schema);
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public Registration1Collection FetchByID(object RegId)
        {
            Registration1Collection coll = new Registration1Collection().Where("reg_ID", RegId).Load();
            return coll;
        }
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
        public Registration1Collection FetchByQuery(Query qry)
        {
            Registration1Collection coll = new Registration1Collection();
            coll.LoadAndCloseReader(qry.ExecuteReader()); 
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool Delete(object RegId)
        {
            return (Registration1.Delete(RegId) == 1);
        }
        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public bool Destroy(object RegId)
        {
            return (Registration1.Destroy(RegId) == 1);
        }
        
        
    	
	    /// <summary>
	    /// Inserts a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
	    public void Insert(DateTime RegDate,string RegName1,string RegName2,string RegCompany,string RegAddr,string RegTel,string RegEmail,bool? RegMailing,string RegWhere,string RegExtra,string RegIp,string RegCountry,string QbookTitle,int? QinDimensions,string QinCurrency,string QinPallet,double? QinLength,double? QinWidth,double? QinDepth,double? QinWeight,double? QinExtent,double? QinPapergsm,bool? QinHardback,int? QcopiesCarton,string QoriginName,string QfinalName,int? QtotCopies,byte[] ResTs)
	    {
		    Registration1 item = new Registration1();
		    
            item.RegDate = RegDate;
            
            item.RegName1 = RegName1;
            
            item.RegName2 = RegName2;
            
            item.RegCompany = RegCompany;
            
            item.RegAddr = RegAddr;
            
            item.RegTel = RegTel;
            
            item.RegEmail = RegEmail;
            
            item.RegMailing = RegMailing;
            
            item.RegWhere = RegWhere;
            
            item.RegExtra = RegExtra;
            
            item.RegIp = RegIp;
            
            item.RegCountry = RegCountry;
            
            item.QbookTitle = QbookTitle;
            
            item.QinDimensions = QinDimensions;
            
            item.QinCurrency = QinCurrency;
            
            item.QinPallet = QinPallet;
            
            item.QinLength = QinLength;
            
            item.QinWidth = QinWidth;
            
            item.QinDepth = QinDepth;
            
            item.QinWeight = QinWeight;
            
            item.QinExtent = QinExtent;
            
            item.QinPapergsm = QinPapergsm;
            
            item.QinHardback = QinHardback;
            
            item.QcopiesCarton = QcopiesCarton;
            
            item.QoriginName = QoriginName;
            
            item.QfinalName = QfinalName;
            
            item.QtotCopies = QtotCopies;
            
            item.ResTs = ResTs;
            
	    
		    item.Save(UserName);
	    }
    	
	    /// <summary>
	    /// Updates a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
	    public void Update(int RegId,DateTime RegDate,string RegName1,string RegName2,string RegCompany,string RegAddr,string RegTel,string RegEmail,bool? RegMailing,string RegWhere,string RegExtra,string RegIp,string RegCountry,string QbookTitle,int? QinDimensions,string QinCurrency,string QinPallet,double? QinLength,double? QinWidth,double? QinDepth,double? QinWeight,double? QinExtent,double? QinPapergsm,bool? QinHardback,int? QcopiesCarton,string QoriginName,string QfinalName,int? QtotCopies,byte[] ResTs)
	    {
		    Registration1 item = new Registration1();
	        item.MarkOld();
	        item.IsLoaded = true;
		    
			item.RegId = RegId;
				
			item.RegDate = RegDate;
				
			item.RegName1 = RegName1;
				
			item.RegName2 = RegName2;
				
			item.RegCompany = RegCompany;
				
			item.RegAddr = RegAddr;
				
			item.RegTel = RegTel;
				
			item.RegEmail = RegEmail;
				
			item.RegMailing = RegMailing;
				
			item.RegWhere = RegWhere;
				
			item.RegExtra = RegExtra;
				
			item.RegIp = RegIp;
				
			item.RegCountry = RegCountry;
				
			item.QbookTitle = QbookTitle;
				
			item.QinDimensions = QinDimensions;
				
			item.QinCurrency = QinCurrency;
				
			item.QinPallet = QinPallet;
				
			item.QinLength = QinLength;
				
			item.QinWidth = QinWidth;
				
			item.QinDepth = QinDepth;
				
			item.QinWeight = QinWeight;
				
			item.QinExtent = QinExtent;
				
			item.QinPapergsm = QinPapergsm;
				
			item.QinHardback = QinHardback;
				
			item.QcopiesCarton = QcopiesCarton;
				
			item.QoriginName = QoriginName;
				
			item.QfinalName = QfinalName;
				
			item.QtotCopies = QtotCopies;
				
			item.ResTs = ResTs;
				
	        item.Save(UserName);
	    }
    }
}
