using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DAL.Pricer
{
    /// <summary>
    /// Controller class for shipment_size
    /// </summary>
    [System.ComponentModel.DataObject]
    public partial class ShipmentSizeController
    {
        // Preload our schema..
        ShipmentSize thisSchemaLoad = new ShipmentSize();
        private string userName = String.Empty;
        protected string UserName
        {
            get
            {
				if (userName.Length == 0) 
				{
    				if (System.Web.HttpContext.Current != null)
    				{
						userName=System.Web.HttpContext.Current.User.Identity.Name;
					}
					else
					{
						userName=System.Threading.Thread.CurrentPrincipal.Identity.Name;
					}
				}
				return userName;
            }
        }
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public ShipmentSizeCollection FetchAll()
        {
            ShipmentSizeCollection coll = new ShipmentSizeCollection();
            Query qry = new Query(ShipmentSize.Schema);
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public ShipmentSizeCollection FetchByID(object ShipmentSizeId)
        {
            ShipmentSizeCollection coll = new ShipmentSizeCollection().Where("shipment_size_Id", ShipmentSizeId).Load();
            return coll;
        }
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
        public ShipmentSizeCollection FetchByQuery(Query qry)
        {
            ShipmentSizeCollection coll = new ShipmentSizeCollection();
            coll.LoadAndCloseReader(qry.ExecuteReader()); 
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool Delete(object ShipmentSizeId)
        {
            return (ShipmentSize.Delete(ShipmentSizeId) == 1);
        }
        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public bool Destroy(object ShipmentSizeId)
        {
            return (ShipmentSize.Destroy(ShipmentSizeId) == 1);
        }
        
        
    	
	    /// <summary>
	    /// Inserts a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
	    public void Insert(int? QuoteId,double? CalcCopiescarton,double? TotCartons,double? PalCartons,double? PalFull,double? PalFullWt,double? PalFullCu,double? PalLayers,double? PalLayerCount,double? PalTotalWt,double? PalTotalCu,double? PalRatio,double? CtnHgt,double? CtnLen,double? CtnWid,double? CtnWt,double? ParCount,double? CtnRemaining,double? ResidueCu,double? ResidueWt,double? CtnTotalWt,double? CtnTotalCu,double? CtnRatio,byte[] SzTimestamp)
	    {
		    ShipmentSize item = new ShipmentSize();
		    
            item.QuoteId = QuoteId;
            
            item.CalcCopiescarton = CalcCopiescarton;
            
            item.TotCartons = TotCartons;
            
            item.PalCartons = PalCartons;
            
            item.PalFull = PalFull;
            
            item.PalFullWt = PalFullWt;
            
            item.PalFullCu = PalFullCu;
            
            item.PalLayers = PalLayers;
            
            item.PalLayerCount = PalLayerCount;
            
            item.PalTotalWt = PalTotalWt;
            
            item.PalTotalCu = PalTotalCu;
            
            item.PalRatio = PalRatio;
            
            item.CtnHgt = CtnHgt;
            
            item.CtnLen = CtnLen;
            
            item.CtnWid = CtnWid;
            
            item.CtnWt = CtnWt;
            
            item.ParCount = ParCount;
            
            item.CtnRemaining = CtnRemaining;
            
            item.ResidueCu = ResidueCu;
            
            item.ResidueWt = ResidueWt;
            
            item.CtnTotalWt = CtnTotalWt;
            
            item.CtnTotalCu = CtnTotalCu;
            
            item.CtnRatio = CtnRatio;
            
            item.SzTimestamp = SzTimestamp;
            
	    
		    item.Save(UserName);
	    }
    	
	    /// <summary>
	    /// Updates a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
	    public void Update(int ShipmentSizeId,int? QuoteId,double? CalcCopiescarton,double? TotCartons,double? PalCartons,double? PalFull,double? PalFullWt,double? PalFullCu,double? PalLayers,double? PalLayerCount,double? PalTotalWt,double? PalTotalCu,double? PalRatio,double? CtnHgt,double? CtnLen,double? CtnWid,double? CtnWt,double? ParCount,double? CtnRemaining,double? ResidueCu,double? ResidueWt,double? CtnTotalWt,double? CtnTotalCu,double? CtnRatio,byte[] SzTimestamp)
	    {
		    ShipmentSize item = new ShipmentSize();
	        item.MarkOld();
	        item.IsLoaded = true;
		    
			item.ShipmentSizeId = ShipmentSizeId;
				
			item.QuoteId = QuoteId;
				
			item.CalcCopiescarton = CalcCopiescarton;
				
			item.TotCartons = TotCartons;
				
			item.PalCartons = PalCartons;
				
			item.PalFull = PalFull;
				
			item.PalFullWt = PalFullWt;
				
			item.PalFullCu = PalFullCu;
				
			item.PalLayers = PalLayers;
				
			item.PalLayerCount = PalLayerCount;
				
			item.PalTotalWt = PalTotalWt;
				
			item.PalTotalCu = PalTotalCu;
				
			item.PalRatio = PalRatio;
				
			item.CtnHgt = CtnHgt;
				
			item.CtnLen = CtnLen;
				
			item.CtnWid = CtnWid;
				
			item.CtnWt = CtnWt;
				
			item.ParCount = ParCount;
				
			item.CtnRemaining = CtnRemaining;
				
			item.ResidueCu = ResidueCu;
				
			item.ResidueWt = ResidueWt;
				
			item.CtnTotalWt = CtnTotalWt;
				
			item.CtnTotalCu = CtnTotalCu;
				
			item.CtnRatio = CtnRatio;
				
			item.SzTimestamp = SzTimestamp;
				
	        item.Save(UserName);
	    }
    }
}
