using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DAL.Pricer
{
    /// <summary>
    /// Controller class for price_values
    /// </summary>
    [System.ComponentModel.DataObject]
    public partial class PriceValueController
    {
        // Preload our schema..
        PriceValue thisSchemaLoad = new PriceValue();
        private string userName = String.Empty;
        protected string UserName
        {
            get
            {
				if (userName.Length == 0) 
				{
    				if (System.Web.HttpContext.Current != null)
    				{
						userName=System.Web.HttpContext.Current.User.Identity.Name;
					}
					else
					{
						userName=System.Threading.Thread.CurrentPrincipal.Identity.Name;
					}
				}
				return userName;
            }
        }
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public PriceValueCollection FetchAll()
        {
            PriceValueCollection coll = new PriceValueCollection();
            Query qry = new Query(PriceValue.Schema);
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public PriceValueCollection FetchByID(object QuoteId)
        {
            PriceValueCollection coll = new PriceValueCollection().Where("quote_Id", QuoteId).Load();
            return coll;
        }
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
        public PriceValueCollection FetchByQuery(Query qry)
        {
            PriceValueCollection coll = new PriceValueCollection();
            coll.LoadAndCloseReader(qry.ExecuteReader()); 
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool Delete(object QuoteId)
        {
            return (PriceValue.Delete(QuoteId) == 1);
        }
        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public bool Destroy(object QuoteId)
        {
            return (PriceValue.Destroy(QuoteId) == 1);
        }
        
        
    	
	    /// <summary>
	    /// Inserts a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
	    public void Insert(DateTime? RequestDate,int? RequestUserId,int? RequestCompanyId,string RequestIp,string BookTitle,int InDimensions,string InCurrency,string InPallet,double? InLength,double? InWidth,double? InDepth,double? InWeight,double? InExtent,double? InPapergsm,bool? InHardback,int? CopiesCarton,string OriginName,string CountryName,string FinalName,int? TotCopies,double? PriceLoose,double? PricePallet,double? PriceTotal,double? PriceEx,double? PriceLooseGbp,double? PricePalletGbp,double? PriceTotalGbp,double? PriceClient,string ShipVia,string PalletType,string LooseName,string LclName,double? LclV,double? LclV20,double? LclV40,double? LclV40hc,string LclLooseName,double? LclVloose,double? LclVloose20,double? LclVloose40,double? LclVloose40hc,int? PoLogId,bool? ClientVisible,double? OutLength,double? OutWidth,double? OutDepth,double? OutWeight,int? CopyFromId,string SpreadsheetUsed,string InUserRef,byte[] PvTimestamp)
	    {
		    PriceValue item = new PriceValue();
		    
            item.RequestDate = RequestDate;
            
            item.RequestUserId = RequestUserId;
            
            item.RequestCompanyId = RequestCompanyId;
            
            item.RequestIp = RequestIp;
            
            item.BookTitle = BookTitle;
            
            item.InDimensions = InDimensions;
            
            item.InCurrency = InCurrency;
            
            item.InPallet = InPallet;
            
            item.InLength = InLength;
            
            item.InWidth = InWidth;
            
            item.InDepth = InDepth;
            
            item.InWeight = InWeight;
            
            item.InExtent = InExtent;
            
            item.InPapergsm = InPapergsm;
            
            item.InHardback = InHardback;
            
            item.CopiesCarton = CopiesCarton;
            
            item.OriginName = OriginName;
            
            item.CountryName = CountryName;
            
            item.FinalName = FinalName;
            
            item.TotCopies = TotCopies;
            
            item.PriceLoose = PriceLoose;
            
            item.PricePallet = PricePallet;
            
            item.PriceTotal = PriceTotal;
            
            item.PriceEx = PriceEx;
            
            item.PriceLooseGbp = PriceLooseGbp;
            
            item.PricePalletGbp = PricePalletGbp;
            
            item.PriceTotalGbp = PriceTotalGbp;
            
            item.PriceClient = PriceClient;
            
            item.ShipVia = ShipVia;
            
            item.PalletType = PalletType;
            
            item.LooseName = LooseName;
            
            item.LclName = LclName;
            
            item.LclV = LclV;
            
            item.LclV20 = LclV20;
            
            item.LclV40 = LclV40;
            
            item.LclV40hc = LclV40hc;
            
            item.LclLooseName = LclLooseName;
            
            item.LclVloose = LclVloose;
            
            item.LclVloose20 = LclVloose20;
            
            item.LclVloose40 = LclVloose40;
            
            item.LclVloose40hc = LclVloose40hc;
            
            item.PoLogId = PoLogId;
            
            item.ClientVisible = ClientVisible;
            
            item.OutLength = OutLength;
            
            item.OutWidth = OutWidth;
            
            item.OutDepth = OutDepth;
            
            item.OutWeight = OutWeight;
            
            item.CopyFromId = CopyFromId;
            
            item.SpreadsheetUsed = SpreadsheetUsed;
            
            item.InUserRef = InUserRef;
            
            item.PvTimestamp = PvTimestamp;
            
	    
		    item.Save(UserName);
	    }
    	
	    /// <summary>
	    /// Updates a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
	    public void Update(int QuoteId,DateTime? RequestDate,int? RequestUserId,int? RequestCompanyId,string RequestIp,string BookTitle,int InDimensions,string InCurrency,string InPallet,double? InLength,double? InWidth,double? InDepth,double? InWeight,double? InExtent,double? InPapergsm,bool? InHardback,int? CopiesCarton,string OriginName,string CountryName,string FinalName,int? TotCopies,double? PriceLoose,double? PricePallet,double? PriceTotal,double? PriceEx,double? PriceLooseGbp,double? PricePalletGbp,double? PriceTotalGbp,double? PriceClient,string ShipVia,string PalletType,string LooseName,string LclName,double? LclV,double? LclV20,double? LclV40,double? LclV40hc,string LclLooseName,double? LclVloose,double? LclVloose20,double? LclVloose40,double? LclVloose40hc,int? PoLogId,bool? ClientVisible,double? OutLength,double? OutWidth,double? OutDepth,double? OutWeight,int? CopyFromId,string SpreadsheetUsed,string InUserRef,byte[] PvTimestamp)
	    {
		    PriceValue item = new PriceValue();
	        item.MarkOld();
	        item.IsLoaded = true;
		    
			item.QuoteId = QuoteId;
				
			item.RequestDate = RequestDate;
				
			item.RequestUserId = RequestUserId;
				
			item.RequestCompanyId = RequestCompanyId;
				
			item.RequestIp = RequestIp;
				
			item.BookTitle = BookTitle;
				
			item.InDimensions = InDimensions;
				
			item.InCurrency = InCurrency;
				
			item.InPallet = InPallet;
				
			item.InLength = InLength;
				
			item.InWidth = InWidth;
				
			item.InDepth = InDepth;
				
			item.InWeight = InWeight;
				
			item.InExtent = InExtent;
				
			item.InPapergsm = InPapergsm;
				
			item.InHardback = InHardback;
				
			item.CopiesCarton = CopiesCarton;
				
			item.OriginName = OriginName;
				
			item.CountryName = CountryName;
				
			item.FinalName = FinalName;
				
			item.TotCopies = TotCopies;
				
			item.PriceLoose = PriceLoose;
				
			item.PricePallet = PricePallet;
				
			item.PriceTotal = PriceTotal;
				
			item.PriceEx = PriceEx;
				
			item.PriceLooseGbp = PriceLooseGbp;
				
			item.PricePalletGbp = PricePalletGbp;
				
			item.PriceTotalGbp = PriceTotalGbp;
				
			item.PriceClient = PriceClient;
				
			item.ShipVia = ShipVia;
				
			item.PalletType = PalletType;
				
			item.LooseName = LooseName;
				
			item.LclName = LclName;
				
			item.LclV = LclV;
				
			item.LclV20 = LclV20;
				
			item.LclV40 = LclV40;
				
			item.LclV40hc = LclV40hc;
				
			item.LclLooseName = LclLooseName;
				
			item.LclVloose = LclVloose;
				
			item.LclVloose20 = LclVloose20;
				
			item.LclVloose40 = LclVloose40;
				
			item.LclVloose40hc = LclVloose40hc;
				
			item.PoLogId = PoLogId;
				
			item.ClientVisible = ClientVisible;
				
			item.OutLength = OutLength;
				
			item.OutWidth = OutWidth;
				
			item.OutDepth = OutDepth;
				
			item.OutWeight = OutWeight;
				
			item.CopyFromId = CopyFromId;
				
			item.SpreadsheetUsed = SpreadsheetUsed;
				
			item.InUserRef = InUserRef;
				
			item.PvTimestamp = PvTimestamp;
				
	        item.Save(UserName);
	    }
    }
}
