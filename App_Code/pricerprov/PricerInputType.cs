using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DAL.Pricer
{
	/// <summary>
	/// Strongly-typed collection for the PricerInputType class.
	/// </summary>
    [Serializable]
	public partial class PricerInputTypeCollection : ActiveList<PricerInputType, PricerInputTypeCollection>
	{	   
		public PricerInputTypeCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>PricerInputTypeCollection</returns>
		public PricerInputTypeCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                PricerInputType o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the pricer_input_type table.
	/// </summary>
	[Serializable]
	public partial class PricerInputType : ActiveRecord<PricerInputType>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public PricerInputType()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public PricerInputType(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public PricerInputType(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public PricerInputType(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("pricer_input_type", TableType.Table, DataService.GetInstance("pricerprov"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarInTypeId = new TableSchema.TableColumn(schema);
				colvarInTypeId.ColumnName = "in_type_id";
				colvarInTypeId.DataType = DbType.Int32;
				colvarInTypeId.MaxLength = 0;
				colvarInTypeId.AutoIncrement = true;
				colvarInTypeId.IsNullable = false;
				colvarInTypeId.IsPrimaryKey = true;
				colvarInTypeId.IsForeignKey = false;
				colvarInTypeId.IsReadOnly = false;
				colvarInTypeId.DefaultSetting = @"";
				colvarInTypeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInTypeId);
				
				TableSchema.TableColumn colvarInDimensionsId = new TableSchema.TableColumn(schema);
				colvarInDimensionsId.ColumnName = "in_dimensions_id";
				colvarInDimensionsId.DataType = DbType.Int32;
				colvarInDimensionsId.MaxLength = 0;
				colvarInDimensionsId.AutoIncrement = false;
				colvarInDimensionsId.IsNullable = false;
				colvarInDimensionsId.IsPrimaryKey = false;
				colvarInDimensionsId.IsForeignKey = false;
				colvarInDimensionsId.IsReadOnly = false;
				
						colvarInDimensionsId.DefaultSetting = @"((0))";
				colvarInDimensionsId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInDimensionsId);
				
				TableSchema.TableColumn colvarInDescription = new TableSchema.TableColumn(schema);
				colvarInDescription.ColumnName = "in_description";
				colvarInDescription.DataType = DbType.String;
				colvarInDescription.MaxLength = 30;
				colvarInDescription.AutoIncrement = false;
				colvarInDescription.IsNullable = false;
				colvarInDescription.IsPrimaryKey = false;
				colvarInDescription.IsForeignKey = false;
				colvarInDescription.IsReadOnly = false;
				colvarInDescription.DefaultSetting = @"";
				colvarInDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInDescription);
				
				TableSchema.TableColumn colvarInTs = new TableSchema.TableColumn(schema);
				colvarInTs.ColumnName = "in_ts";
				colvarInTs.DataType = DbType.Binary;
				colvarInTs.MaxLength = 0;
				colvarInTs.AutoIncrement = false;
				colvarInTs.IsNullable = true;
				colvarInTs.IsPrimaryKey = false;
				colvarInTs.IsForeignKey = false;
				colvarInTs.IsReadOnly = true;
				colvarInTs.DefaultSetting = @"";
				colvarInTs.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInTs);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["pricerprov"].AddSchema("pricer_input_type",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("InTypeId")]
		[Bindable(true)]
		public int InTypeId 
		{
			get { return GetColumnValue<int>(Columns.InTypeId); }
			set { SetColumnValue(Columns.InTypeId, value); }
		}
		  
		[XmlAttribute("InDimensionsId")]
		[Bindable(true)]
		public int InDimensionsId 
		{
			get { return GetColumnValue<int>(Columns.InDimensionsId); }
			set { SetColumnValue(Columns.InDimensionsId, value); }
		}
		  
		[XmlAttribute("InDescription")]
		[Bindable(true)]
		public string InDescription 
		{
			get { return GetColumnValue<string>(Columns.InDescription); }
			set { SetColumnValue(Columns.InDescription, value); }
		}
		  
		[XmlAttribute("InTs")]
		[Bindable(true)]
		public byte[] InTs 
		{
			get { return GetColumnValue<byte[]>(Columns.InTs); }
			set { SetColumnValue(Columns.InTs, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int varInDimensionsId,string varInDescription,byte[] varInTs)
		{
			PricerInputType item = new PricerInputType();
			
			item.InDimensionsId = varInDimensionsId;
			
			item.InDescription = varInDescription;
			
			item.InTs = varInTs;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varInTypeId,int varInDimensionsId,string varInDescription,byte[] varInTs)
		{
			PricerInputType item = new PricerInputType();
			
				item.InTypeId = varInTypeId;
			
				item.InDimensionsId = varInDimensionsId;
			
				item.InDescription = varInDescription;
			
				item.InTs = varInTs;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn InTypeIdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn InDimensionsIdColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn InDescriptionColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn InTsColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string InTypeId = @"in_type_id";
			 public static string InDimensionsId = @"in_dimensions_id";
			 public static string InDescription = @"in_description";
			 public static string InTs = @"in_ts";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
