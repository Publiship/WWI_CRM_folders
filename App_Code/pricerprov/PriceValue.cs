using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DAL.Pricer
{
	/// <summary>
	/// Strongly-typed collection for the PriceValue class.
	/// </summary>
    [Serializable]
	public partial class PriceValueCollection : ActiveList<PriceValue, PriceValueCollection>
	{	   
		public PriceValueCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>PriceValueCollection</returns>
		public PriceValueCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                PriceValue o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the price_values table.
	/// </summary>
	[Serializable]
	public partial class PriceValue : ActiveRecord<PriceValue>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public PriceValue()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public PriceValue(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public PriceValue(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public PriceValue(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("price_values", TableType.Table, DataService.GetInstance("pricerprov"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarQuoteId = new TableSchema.TableColumn(schema);
				colvarQuoteId.ColumnName = "quote_Id";
				colvarQuoteId.DataType = DbType.Int32;
				colvarQuoteId.MaxLength = 0;
				colvarQuoteId.AutoIncrement = true;
				colvarQuoteId.IsNullable = false;
				colvarQuoteId.IsPrimaryKey = true;
				colvarQuoteId.IsForeignKey = false;
				colvarQuoteId.IsReadOnly = false;
				colvarQuoteId.DefaultSetting = @"";
				colvarQuoteId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarQuoteId);
				
				TableSchema.TableColumn colvarRequestDate = new TableSchema.TableColumn(schema);
				colvarRequestDate.ColumnName = "request_date";
				colvarRequestDate.DataType = DbType.DateTime;
				colvarRequestDate.MaxLength = 0;
				colvarRequestDate.AutoIncrement = false;
				colvarRequestDate.IsNullable = true;
				colvarRequestDate.IsPrimaryKey = false;
				colvarRequestDate.IsForeignKey = false;
				colvarRequestDate.IsReadOnly = false;
				colvarRequestDate.DefaultSetting = @"";
				colvarRequestDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRequestDate);
				
				TableSchema.TableColumn colvarRequestUserId = new TableSchema.TableColumn(schema);
				colvarRequestUserId.ColumnName = "request_user_id";
				colvarRequestUserId.DataType = DbType.Int32;
				colvarRequestUserId.MaxLength = 0;
				colvarRequestUserId.AutoIncrement = false;
				colvarRequestUserId.IsNullable = true;
				colvarRequestUserId.IsPrimaryKey = false;
				colvarRequestUserId.IsForeignKey = false;
				colvarRequestUserId.IsReadOnly = false;
				colvarRequestUserId.DefaultSetting = @"";
				colvarRequestUserId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRequestUserId);
				
				TableSchema.TableColumn colvarRequestCompanyId = new TableSchema.TableColumn(schema);
				colvarRequestCompanyId.ColumnName = "request_company_id";
				colvarRequestCompanyId.DataType = DbType.Int32;
				colvarRequestCompanyId.MaxLength = 0;
				colvarRequestCompanyId.AutoIncrement = false;
				colvarRequestCompanyId.IsNullable = true;
				colvarRequestCompanyId.IsPrimaryKey = false;
				colvarRequestCompanyId.IsForeignKey = false;
				colvarRequestCompanyId.IsReadOnly = false;
				colvarRequestCompanyId.DefaultSetting = @"";
				colvarRequestCompanyId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRequestCompanyId);
				
				TableSchema.TableColumn colvarRequestIp = new TableSchema.TableColumn(schema);
				colvarRequestIp.ColumnName = "request_ip";
				colvarRequestIp.DataType = DbType.String;
				colvarRequestIp.MaxLength = 20;
				colvarRequestIp.AutoIncrement = false;
				colvarRequestIp.IsNullable = true;
				colvarRequestIp.IsPrimaryKey = false;
				colvarRequestIp.IsForeignKey = false;
				colvarRequestIp.IsReadOnly = false;
				colvarRequestIp.DefaultSetting = @"";
				colvarRequestIp.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRequestIp);
				
				TableSchema.TableColumn colvarBookTitle = new TableSchema.TableColumn(schema);
				colvarBookTitle.ColumnName = "book_title";
				colvarBookTitle.DataType = DbType.String;
				colvarBookTitle.MaxLength = 200;
				colvarBookTitle.AutoIncrement = false;
				colvarBookTitle.IsNullable = true;
				colvarBookTitle.IsPrimaryKey = false;
				colvarBookTitle.IsForeignKey = false;
				colvarBookTitle.IsReadOnly = false;
				colvarBookTitle.DefaultSetting = @"";
				colvarBookTitle.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBookTitle);
				
				TableSchema.TableColumn colvarInDimensions = new TableSchema.TableColumn(schema);
				colvarInDimensions.ColumnName = "in_dimensions";
				colvarInDimensions.DataType = DbType.Int32;
				colvarInDimensions.MaxLength = 0;
				colvarInDimensions.AutoIncrement = false;
				colvarInDimensions.IsNullable = false;
				colvarInDimensions.IsPrimaryKey = false;
				colvarInDimensions.IsForeignKey = false;
				colvarInDimensions.IsReadOnly = false;
				colvarInDimensions.DefaultSetting = @"";
				colvarInDimensions.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInDimensions);
				
				TableSchema.TableColumn colvarInCurrency = new TableSchema.TableColumn(schema);
				colvarInCurrency.ColumnName = "in_currency";
				colvarInCurrency.DataType = DbType.String;
				colvarInCurrency.MaxLength = 50;
				colvarInCurrency.AutoIncrement = false;
				colvarInCurrency.IsNullable = true;
				colvarInCurrency.IsPrimaryKey = false;
				colvarInCurrency.IsForeignKey = false;
				colvarInCurrency.IsReadOnly = false;
				colvarInCurrency.DefaultSetting = @"";
				colvarInCurrency.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInCurrency);
				
				TableSchema.TableColumn colvarInPallet = new TableSchema.TableColumn(schema);
				colvarInPallet.ColumnName = "in_pallet";
				colvarInPallet.DataType = DbType.String;
				colvarInPallet.MaxLength = 25;
				colvarInPallet.AutoIncrement = false;
				colvarInPallet.IsNullable = true;
				colvarInPallet.IsPrimaryKey = false;
				colvarInPallet.IsForeignKey = false;
				colvarInPallet.IsReadOnly = false;
				colvarInPallet.DefaultSetting = @"";
				colvarInPallet.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInPallet);
				
				TableSchema.TableColumn colvarInLength = new TableSchema.TableColumn(schema);
				colvarInLength.ColumnName = "in_length";
				colvarInLength.DataType = DbType.Double;
				colvarInLength.MaxLength = 0;
				colvarInLength.AutoIncrement = false;
				colvarInLength.IsNullable = true;
				colvarInLength.IsPrimaryKey = false;
				colvarInLength.IsForeignKey = false;
				colvarInLength.IsReadOnly = false;
				colvarInLength.DefaultSetting = @"";
				colvarInLength.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInLength);
				
				TableSchema.TableColumn colvarInWidth = new TableSchema.TableColumn(schema);
				colvarInWidth.ColumnName = "in_width";
				colvarInWidth.DataType = DbType.Double;
				colvarInWidth.MaxLength = 0;
				colvarInWidth.AutoIncrement = false;
				colvarInWidth.IsNullable = true;
				colvarInWidth.IsPrimaryKey = false;
				colvarInWidth.IsForeignKey = false;
				colvarInWidth.IsReadOnly = false;
				colvarInWidth.DefaultSetting = @"";
				colvarInWidth.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInWidth);
				
				TableSchema.TableColumn colvarInDepth = new TableSchema.TableColumn(schema);
				colvarInDepth.ColumnName = "in_depth";
				colvarInDepth.DataType = DbType.Double;
				colvarInDepth.MaxLength = 0;
				colvarInDepth.AutoIncrement = false;
				colvarInDepth.IsNullable = true;
				colvarInDepth.IsPrimaryKey = false;
				colvarInDepth.IsForeignKey = false;
				colvarInDepth.IsReadOnly = false;
				colvarInDepth.DefaultSetting = @"";
				colvarInDepth.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInDepth);
				
				TableSchema.TableColumn colvarInWeight = new TableSchema.TableColumn(schema);
				colvarInWeight.ColumnName = "in_weight";
				colvarInWeight.DataType = DbType.Double;
				colvarInWeight.MaxLength = 0;
				colvarInWeight.AutoIncrement = false;
				colvarInWeight.IsNullable = true;
				colvarInWeight.IsPrimaryKey = false;
				colvarInWeight.IsForeignKey = false;
				colvarInWeight.IsReadOnly = false;
				colvarInWeight.DefaultSetting = @"";
				colvarInWeight.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInWeight);
				
				TableSchema.TableColumn colvarInExtent = new TableSchema.TableColumn(schema);
				colvarInExtent.ColumnName = "in_extent";
				colvarInExtent.DataType = DbType.Double;
				colvarInExtent.MaxLength = 0;
				colvarInExtent.AutoIncrement = false;
				colvarInExtent.IsNullable = true;
				colvarInExtent.IsPrimaryKey = false;
				colvarInExtent.IsForeignKey = false;
				colvarInExtent.IsReadOnly = false;
				colvarInExtent.DefaultSetting = @"";
				colvarInExtent.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInExtent);
				
				TableSchema.TableColumn colvarInPapergsm = new TableSchema.TableColumn(schema);
				colvarInPapergsm.ColumnName = "in_papergsm";
				colvarInPapergsm.DataType = DbType.Double;
				colvarInPapergsm.MaxLength = 0;
				colvarInPapergsm.AutoIncrement = false;
				colvarInPapergsm.IsNullable = true;
				colvarInPapergsm.IsPrimaryKey = false;
				colvarInPapergsm.IsForeignKey = false;
				colvarInPapergsm.IsReadOnly = false;
				colvarInPapergsm.DefaultSetting = @"";
				colvarInPapergsm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInPapergsm);
				
				TableSchema.TableColumn colvarInHardback = new TableSchema.TableColumn(schema);
				colvarInHardback.ColumnName = "in_hardback";
				colvarInHardback.DataType = DbType.Boolean;
				colvarInHardback.MaxLength = 0;
				colvarInHardback.AutoIncrement = false;
				colvarInHardback.IsNullable = true;
				colvarInHardback.IsPrimaryKey = false;
				colvarInHardback.IsForeignKey = false;
				colvarInHardback.IsReadOnly = false;
				colvarInHardback.DefaultSetting = @"";
				colvarInHardback.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInHardback);
				
				TableSchema.TableColumn colvarCopiesCarton = new TableSchema.TableColumn(schema);
				colvarCopiesCarton.ColumnName = "copies_carton";
				colvarCopiesCarton.DataType = DbType.Int32;
				colvarCopiesCarton.MaxLength = 0;
				colvarCopiesCarton.AutoIncrement = false;
				colvarCopiesCarton.IsNullable = true;
				colvarCopiesCarton.IsPrimaryKey = false;
				colvarCopiesCarton.IsForeignKey = false;
				colvarCopiesCarton.IsReadOnly = false;
				colvarCopiesCarton.DefaultSetting = @"";
				colvarCopiesCarton.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCopiesCarton);
				
				TableSchema.TableColumn colvarOriginName = new TableSchema.TableColumn(schema);
				colvarOriginName.ColumnName = "origin_name";
				colvarOriginName.DataType = DbType.String;
				colvarOriginName.MaxLength = 75;
				colvarOriginName.AutoIncrement = false;
				colvarOriginName.IsNullable = true;
				colvarOriginName.IsPrimaryKey = false;
				colvarOriginName.IsForeignKey = false;
				colvarOriginName.IsReadOnly = false;
				colvarOriginName.DefaultSetting = @"";
				colvarOriginName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOriginName);
				
				TableSchema.TableColumn colvarCountryName = new TableSchema.TableColumn(schema);
				colvarCountryName.ColumnName = "country_name";
				colvarCountryName.DataType = DbType.String;
				colvarCountryName.MaxLength = 75;
				colvarCountryName.AutoIncrement = false;
				colvarCountryName.IsNullable = true;
				colvarCountryName.IsPrimaryKey = false;
				colvarCountryName.IsForeignKey = false;
				colvarCountryName.IsReadOnly = false;
				colvarCountryName.DefaultSetting = @"";
				colvarCountryName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCountryName);
				
				TableSchema.TableColumn colvarFinalName = new TableSchema.TableColumn(schema);
				colvarFinalName.ColumnName = "final_name";
				colvarFinalName.DataType = DbType.String;
				colvarFinalName.MaxLength = 75;
				colvarFinalName.AutoIncrement = false;
				colvarFinalName.IsNullable = true;
				colvarFinalName.IsPrimaryKey = false;
				colvarFinalName.IsForeignKey = false;
				colvarFinalName.IsReadOnly = false;
				colvarFinalName.DefaultSetting = @"";
				colvarFinalName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFinalName);
				
				TableSchema.TableColumn colvarTotCopies = new TableSchema.TableColumn(schema);
				colvarTotCopies.ColumnName = "tot_copies";
				colvarTotCopies.DataType = DbType.Int32;
				colvarTotCopies.MaxLength = 0;
				colvarTotCopies.AutoIncrement = false;
				colvarTotCopies.IsNullable = true;
				colvarTotCopies.IsPrimaryKey = false;
				colvarTotCopies.IsForeignKey = false;
				colvarTotCopies.IsReadOnly = false;
				colvarTotCopies.DefaultSetting = @"";
				colvarTotCopies.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTotCopies);
				
				TableSchema.TableColumn colvarPriceLoose = new TableSchema.TableColumn(schema);
				colvarPriceLoose.ColumnName = "price_loose";
				colvarPriceLoose.DataType = DbType.Double;
				colvarPriceLoose.MaxLength = 0;
				colvarPriceLoose.AutoIncrement = false;
				colvarPriceLoose.IsNullable = true;
				colvarPriceLoose.IsPrimaryKey = false;
				colvarPriceLoose.IsForeignKey = false;
				colvarPriceLoose.IsReadOnly = false;
				
						colvarPriceLoose.DefaultSetting = @"((0))";
				colvarPriceLoose.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPriceLoose);
				
				TableSchema.TableColumn colvarPricePallet = new TableSchema.TableColumn(schema);
				colvarPricePallet.ColumnName = "price_pallet";
				colvarPricePallet.DataType = DbType.Double;
				colvarPricePallet.MaxLength = 0;
				colvarPricePallet.AutoIncrement = false;
				colvarPricePallet.IsNullable = true;
				colvarPricePallet.IsPrimaryKey = false;
				colvarPricePallet.IsForeignKey = false;
				colvarPricePallet.IsReadOnly = false;
				
						colvarPricePallet.DefaultSetting = @"((0))";
				colvarPricePallet.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPricePallet);
				
				TableSchema.TableColumn colvarPriceTotal = new TableSchema.TableColumn(schema);
				colvarPriceTotal.ColumnName = "price_total";
				colvarPriceTotal.DataType = DbType.Double;
				colvarPriceTotal.MaxLength = 0;
				colvarPriceTotal.AutoIncrement = false;
				colvarPriceTotal.IsNullable = true;
				colvarPriceTotal.IsPrimaryKey = false;
				colvarPriceTotal.IsForeignKey = false;
				colvarPriceTotal.IsReadOnly = false;
				
						colvarPriceTotal.DefaultSetting = @"((0))";
				colvarPriceTotal.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPriceTotal);
				
				TableSchema.TableColumn colvarPriceEx = new TableSchema.TableColumn(schema);
				colvarPriceEx.ColumnName = "price_ex";
				colvarPriceEx.DataType = DbType.Double;
				colvarPriceEx.MaxLength = 0;
				colvarPriceEx.AutoIncrement = false;
				colvarPriceEx.IsNullable = true;
				colvarPriceEx.IsPrimaryKey = false;
				colvarPriceEx.IsForeignKey = false;
				colvarPriceEx.IsReadOnly = false;
				
						colvarPriceEx.DefaultSetting = @"((0))";
				colvarPriceEx.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPriceEx);
				
				TableSchema.TableColumn colvarPriceLooseGbp = new TableSchema.TableColumn(schema);
				colvarPriceLooseGbp.ColumnName = "price_loose_gbp";
				colvarPriceLooseGbp.DataType = DbType.Double;
				colvarPriceLooseGbp.MaxLength = 0;
				colvarPriceLooseGbp.AutoIncrement = false;
				colvarPriceLooseGbp.IsNullable = true;
				colvarPriceLooseGbp.IsPrimaryKey = false;
				colvarPriceLooseGbp.IsForeignKey = false;
				colvarPriceLooseGbp.IsReadOnly = false;
				
						colvarPriceLooseGbp.DefaultSetting = @"((0))";
				colvarPriceLooseGbp.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPriceLooseGbp);
				
				TableSchema.TableColumn colvarPricePalletGbp = new TableSchema.TableColumn(schema);
				colvarPricePalletGbp.ColumnName = "price_pallet_gbp";
				colvarPricePalletGbp.DataType = DbType.Double;
				colvarPricePalletGbp.MaxLength = 0;
				colvarPricePalletGbp.AutoIncrement = false;
				colvarPricePalletGbp.IsNullable = true;
				colvarPricePalletGbp.IsPrimaryKey = false;
				colvarPricePalletGbp.IsForeignKey = false;
				colvarPricePalletGbp.IsReadOnly = false;
				
						colvarPricePalletGbp.DefaultSetting = @"((0))";
				colvarPricePalletGbp.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPricePalletGbp);
				
				TableSchema.TableColumn colvarPriceTotalGbp = new TableSchema.TableColumn(schema);
				colvarPriceTotalGbp.ColumnName = "price_total_gbp";
				colvarPriceTotalGbp.DataType = DbType.Double;
				colvarPriceTotalGbp.MaxLength = 0;
				colvarPriceTotalGbp.AutoIncrement = false;
				colvarPriceTotalGbp.IsNullable = true;
				colvarPriceTotalGbp.IsPrimaryKey = false;
				colvarPriceTotalGbp.IsForeignKey = false;
				colvarPriceTotalGbp.IsReadOnly = false;
				
						colvarPriceTotalGbp.DefaultSetting = @"((0))";
				colvarPriceTotalGbp.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPriceTotalGbp);
				
				TableSchema.TableColumn colvarPriceClient = new TableSchema.TableColumn(schema);
				colvarPriceClient.ColumnName = "price_client";
				colvarPriceClient.DataType = DbType.Double;
				colvarPriceClient.MaxLength = 0;
				colvarPriceClient.AutoIncrement = false;
				colvarPriceClient.IsNullable = true;
				colvarPriceClient.IsPrimaryKey = false;
				colvarPriceClient.IsForeignKey = false;
				colvarPriceClient.IsReadOnly = false;
				
						colvarPriceClient.DefaultSetting = @"((0))";
				colvarPriceClient.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPriceClient);
				
				TableSchema.TableColumn colvarShipVia = new TableSchema.TableColumn(schema);
				colvarShipVia.ColumnName = "ship_via";
				colvarShipVia.DataType = DbType.String;
				colvarShipVia.MaxLength = 100;
				colvarShipVia.AutoIncrement = false;
				colvarShipVia.IsNullable = true;
				colvarShipVia.IsPrimaryKey = false;
				colvarShipVia.IsForeignKey = false;
				colvarShipVia.IsReadOnly = false;
				colvarShipVia.DefaultSetting = @"";
				colvarShipVia.ForeignKeyTableName = "";
				schema.Columns.Add(colvarShipVia);
				
				TableSchema.TableColumn colvarPalletType = new TableSchema.TableColumn(schema);
				colvarPalletType.ColumnName = "pallet_type";
				colvarPalletType.DataType = DbType.String;
				colvarPalletType.MaxLength = 50;
				colvarPalletType.AutoIncrement = false;
				colvarPalletType.IsNullable = true;
				colvarPalletType.IsPrimaryKey = false;
				colvarPalletType.IsForeignKey = false;
				colvarPalletType.IsReadOnly = false;
				colvarPalletType.DefaultSetting = @"";
				colvarPalletType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPalletType);
				
				TableSchema.TableColumn colvarLooseName = new TableSchema.TableColumn(schema);
				colvarLooseName.ColumnName = "loose_name";
				colvarLooseName.DataType = DbType.String;
				colvarLooseName.MaxLength = 100;
				colvarLooseName.AutoIncrement = false;
				colvarLooseName.IsNullable = true;
				colvarLooseName.IsPrimaryKey = false;
				colvarLooseName.IsForeignKey = false;
				colvarLooseName.IsReadOnly = false;
				colvarLooseName.DefaultSetting = @"";
				colvarLooseName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLooseName);
				
				TableSchema.TableColumn colvarLclName = new TableSchema.TableColumn(schema);
				colvarLclName.ColumnName = "lcl_name";
				colvarLclName.DataType = DbType.String;
				colvarLclName.MaxLength = 100;
				colvarLclName.AutoIncrement = false;
				colvarLclName.IsNullable = true;
				colvarLclName.IsPrimaryKey = false;
				colvarLclName.IsForeignKey = false;
				colvarLclName.IsReadOnly = false;
				colvarLclName.DefaultSetting = @"";
				colvarLclName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLclName);
				
				TableSchema.TableColumn colvarLclV = new TableSchema.TableColumn(schema);
				colvarLclV.ColumnName = "lcl_v";
				colvarLclV.DataType = DbType.Double;
				colvarLclV.MaxLength = 0;
				colvarLclV.AutoIncrement = false;
				colvarLclV.IsNullable = true;
				colvarLclV.IsPrimaryKey = false;
				colvarLclV.IsForeignKey = false;
				colvarLclV.IsReadOnly = false;
				colvarLclV.DefaultSetting = @"";
				colvarLclV.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLclV);
				
				TableSchema.TableColumn colvarLclV20 = new TableSchema.TableColumn(schema);
				colvarLclV20.ColumnName = "lcl_v20";
				colvarLclV20.DataType = DbType.Double;
				colvarLclV20.MaxLength = 0;
				colvarLclV20.AutoIncrement = false;
				colvarLclV20.IsNullable = true;
				colvarLclV20.IsPrimaryKey = false;
				colvarLclV20.IsForeignKey = false;
				colvarLclV20.IsReadOnly = false;
				colvarLclV20.DefaultSetting = @"";
				colvarLclV20.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLclV20);
				
				TableSchema.TableColumn colvarLclV40 = new TableSchema.TableColumn(schema);
				colvarLclV40.ColumnName = "lcl_v40";
				colvarLclV40.DataType = DbType.Double;
				colvarLclV40.MaxLength = 0;
				colvarLclV40.AutoIncrement = false;
				colvarLclV40.IsNullable = true;
				colvarLclV40.IsPrimaryKey = false;
				colvarLclV40.IsForeignKey = false;
				colvarLclV40.IsReadOnly = false;
				colvarLclV40.DefaultSetting = @"";
				colvarLclV40.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLclV40);
				
				TableSchema.TableColumn colvarLclV40hc = new TableSchema.TableColumn(schema);
				colvarLclV40hc.ColumnName = "lcl_v40hc";
				colvarLclV40hc.DataType = DbType.Double;
				colvarLclV40hc.MaxLength = 0;
				colvarLclV40hc.AutoIncrement = false;
				colvarLclV40hc.IsNullable = true;
				colvarLclV40hc.IsPrimaryKey = false;
				colvarLclV40hc.IsForeignKey = false;
				colvarLclV40hc.IsReadOnly = false;
				colvarLclV40hc.DefaultSetting = @"";
				colvarLclV40hc.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLclV40hc);
				
				TableSchema.TableColumn colvarLclLooseName = new TableSchema.TableColumn(schema);
				colvarLclLooseName.ColumnName = "lcl_loose_name";
				colvarLclLooseName.DataType = DbType.String;
				colvarLclLooseName.MaxLength = 100;
				colvarLclLooseName.AutoIncrement = false;
				colvarLclLooseName.IsNullable = true;
				colvarLclLooseName.IsPrimaryKey = false;
				colvarLclLooseName.IsForeignKey = false;
				colvarLclLooseName.IsReadOnly = false;
				colvarLclLooseName.DefaultSetting = @"";
				colvarLclLooseName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLclLooseName);
				
				TableSchema.TableColumn colvarLclVloose = new TableSchema.TableColumn(schema);
				colvarLclVloose.ColumnName = "lcl_vloose";
				colvarLclVloose.DataType = DbType.Double;
				colvarLclVloose.MaxLength = 0;
				colvarLclVloose.AutoIncrement = false;
				colvarLclVloose.IsNullable = true;
				colvarLclVloose.IsPrimaryKey = false;
				colvarLclVloose.IsForeignKey = false;
				colvarLclVloose.IsReadOnly = false;
				colvarLclVloose.DefaultSetting = @"";
				colvarLclVloose.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLclVloose);
				
				TableSchema.TableColumn colvarLclVloose20 = new TableSchema.TableColumn(schema);
				colvarLclVloose20.ColumnName = "lcl_vloose20";
				colvarLclVloose20.DataType = DbType.Double;
				colvarLclVloose20.MaxLength = 0;
				colvarLclVloose20.AutoIncrement = false;
				colvarLclVloose20.IsNullable = true;
				colvarLclVloose20.IsPrimaryKey = false;
				colvarLclVloose20.IsForeignKey = false;
				colvarLclVloose20.IsReadOnly = false;
				colvarLclVloose20.DefaultSetting = @"";
				colvarLclVloose20.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLclVloose20);
				
				TableSchema.TableColumn colvarLclVloose40 = new TableSchema.TableColumn(schema);
				colvarLclVloose40.ColumnName = "lcl_vloose40";
				colvarLclVloose40.DataType = DbType.Double;
				colvarLclVloose40.MaxLength = 0;
				colvarLclVloose40.AutoIncrement = false;
				colvarLclVloose40.IsNullable = true;
				colvarLclVloose40.IsPrimaryKey = false;
				colvarLclVloose40.IsForeignKey = false;
				colvarLclVloose40.IsReadOnly = false;
				colvarLclVloose40.DefaultSetting = @"";
				colvarLclVloose40.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLclVloose40);
				
				TableSchema.TableColumn colvarLclVloose40hc = new TableSchema.TableColumn(schema);
				colvarLclVloose40hc.ColumnName = "lcl_vloose40hc";
				colvarLclVloose40hc.DataType = DbType.Double;
				colvarLclVloose40hc.MaxLength = 0;
				colvarLclVloose40hc.AutoIncrement = false;
				colvarLclVloose40hc.IsNullable = true;
				colvarLclVloose40hc.IsPrimaryKey = false;
				colvarLclVloose40hc.IsForeignKey = false;
				colvarLclVloose40hc.IsReadOnly = false;
				colvarLclVloose40hc.DefaultSetting = @"";
				colvarLclVloose40hc.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLclVloose40hc);
				
				TableSchema.TableColumn colvarPoLogId = new TableSchema.TableColumn(schema);
				colvarPoLogId.ColumnName = "po_log_id";
				colvarPoLogId.DataType = DbType.Int32;
				colvarPoLogId.MaxLength = 0;
				colvarPoLogId.AutoIncrement = false;
				colvarPoLogId.IsNullable = true;
				colvarPoLogId.IsPrimaryKey = false;
				colvarPoLogId.IsForeignKey = false;
				colvarPoLogId.IsReadOnly = false;
				
						colvarPoLogId.DefaultSetting = @"((0))";
				colvarPoLogId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPoLogId);
				
				TableSchema.TableColumn colvarClientVisible = new TableSchema.TableColumn(schema);
				colvarClientVisible.ColumnName = "client_visible";
				colvarClientVisible.DataType = DbType.Boolean;
				colvarClientVisible.MaxLength = 0;
				colvarClientVisible.AutoIncrement = false;
				colvarClientVisible.IsNullable = true;
				colvarClientVisible.IsPrimaryKey = false;
				colvarClientVisible.IsForeignKey = false;
				colvarClientVisible.IsReadOnly = false;
				
						colvarClientVisible.DefaultSetting = @"((1))";
				colvarClientVisible.ForeignKeyTableName = "";
				schema.Columns.Add(colvarClientVisible);
				
				TableSchema.TableColumn colvarOutLength = new TableSchema.TableColumn(schema);
				colvarOutLength.ColumnName = "out_length";
				colvarOutLength.DataType = DbType.Double;
				colvarOutLength.MaxLength = 0;
				colvarOutLength.AutoIncrement = false;
				colvarOutLength.IsNullable = true;
				colvarOutLength.IsPrimaryKey = false;
				colvarOutLength.IsForeignKey = false;
				colvarOutLength.IsReadOnly = false;
				
						colvarOutLength.DefaultSetting = @"((0))";
				colvarOutLength.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOutLength);
				
				TableSchema.TableColumn colvarOutWidth = new TableSchema.TableColumn(schema);
				colvarOutWidth.ColumnName = "out_width";
				colvarOutWidth.DataType = DbType.Double;
				colvarOutWidth.MaxLength = 0;
				colvarOutWidth.AutoIncrement = false;
				colvarOutWidth.IsNullable = true;
				colvarOutWidth.IsPrimaryKey = false;
				colvarOutWidth.IsForeignKey = false;
				colvarOutWidth.IsReadOnly = false;
				
						colvarOutWidth.DefaultSetting = @"((0))";
				colvarOutWidth.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOutWidth);
				
				TableSchema.TableColumn colvarOutDepth = new TableSchema.TableColumn(schema);
				colvarOutDepth.ColumnName = "out_depth";
				colvarOutDepth.DataType = DbType.Double;
				colvarOutDepth.MaxLength = 0;
				colvarOutDepth.AutoIncrement = false;
				colvarOutDepth.IsNullable = true;
				colvarOutDepth.IsPrimaryKey = false;
				colvarOutDepth.IsForeignKey = false;
				colvarOutDepth.IsReadOnly = false;
				
						colvarOutDepth.DefaultSetting = @"((0))";
				colvarOutDepth.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOutDepth);
				
				TableSchema.TableColumn colvarOutWeight = new TableSchema.TableColumn(schema);
				colvarOutWeight.ColumnName = "out_weight";
				colvarOutWeight.DataType = DbType.Double;
				colvarOutWeight.MaxLength = 0;
				colvarOutWeight.AutoIncrement = false;
				colvarOutWeight.IsNullable = true;
				colvarOutWeight.IsPrimaryKey = false;
				colvarOutWeight.IsForeignKey = false;
				colvarOutWeight.IsReadOnly = false;
				
						colvarOutWeight.DefaultSetting = @"((0))";
				colvarOutWeight.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOutWeight);
				
				TableSchema.TableColumn colvarCopyFromId = new TableSchema.TableColumn(schema);
				colvarCopyFromId.ColumnName = "copy_from_id";
				colvarCopyFromId.DataType = DbType.Int32;
				colvarCopyFromId.MaxLength = 0;
				colvarCopyFromId.AutoIncrement = false;
				colvarCopyFromId.IsNullable = true;
				colvarCopyFromId.IsPrimaryKey = false;
				colvarCopyFromId.IsForeignKey = false;
				colvarCopyFromId.IsReadOnly = false;
				
						colvarCopyFromId.DefaultSetting = @"((0))";
				colvarCopyFromId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCopyFromId);
				
				TableSchema.TableColumn colvarSpreadsheetUsed = new TableSchema.TableColumn(schema);
				colvarSpreadsheetUsed.ColumnName = "spreadsheet_used";
				colvarSpreadsheetUsed.DataType = DbType.String;
				colvarSpreadsheetUsed.MaxLength = 75;
				colvarSpreadsheetUsed.AutoIncrement = false;
				colvarSpreadsheetUsed.IsNullable = true;
				colvarSpreadsheetUsed.IsPrimaryKey = false;
				colvarSpreadsheetUsed.IsForeignKey = false;
				colvarSpreadsheetUsed.IsReadOnly = false;
				colvarSpreadsheetUsed.DefaultSetting = @"";
				colvarSpreadsheetUsed.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSpreadsheetUsed);
				
				TableSchema.TableColumn colvarInUserRef = new TableSchema.TableColumn(schema);
				colvarInUserRef.ColumnName = "in_user_ref";
				colvarInUserRef.DataType = DbType.String;
				colvarInUserRef.MaxLength = 30;
				colvarInUserRef.AutoIncrement = false;
				colvarInUserRef.IsNullable = true;
				colvarInUserRef.IsPrimaryKey = false;
				colvarInUserRef.IsForeignKey = false;
				colvarInUserRef.IsReadOnly = false;
				colvarInUserRef.DefaultSetting = @"";
				colvarInUserRef.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInUserRef);
				
				TableSchema.TableColumn colvarPvTimestamp = new TableSchema.TableColumn(schema);
				colvarPvTimestamp.ColumnName = "pv_timestamp";
				colvarPvTimestamp.DataType = DbType.Binary;
				colvarPvTimestamp.MaxLength = 0;
				colvarPvTimestamp.AutoIncrement = false;
				colvarPvTimestamp.IsNullable = false;
				colvarPvTimestamp.IsPrimaryKey = false;
				colvarPvTimestamp.IsForeignKey = false;
				colvarPvTimestamp.IsReadOnly = true;
				colvarPvTimestamp.DefaultSetting = @"";
				colvarPvTimestamp.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPvTimestamp);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["pricerprov"].AddSchema("price_values",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("QuoteId")]
		[Bindable(true)]
		public int QuoteId 
		{
			get { return GetColumnValue<int>(Columns.QuoteId); }
			set { SetColumnValue(Columns.QuoteId, value); }
		}
		  
		[XmlAttribute("RequestDate")]
		[Bindable(true)]
		public DateTime? RequestDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.RequestDate); }
			set { SetColumnValue(Columns.RequestDate, value); }
		}
		  
		[XmlAttribute("RequestUserId")]
		[Bindable(true)]
		public int? RequestUserId 
		{
			get { return GetColumnValue<int?>(Columns.RequestUserId); }
			set { SetColumnValue(Columns.RequestUserId, value); }
		}
		  
		[XmlAttribute("RequestCompanyId")]
		[Bindable(true)]
		public int? RequestCompanyId 
		{
			get { return GetColumnValue<int?>(Columns.RequestCompanyId); }
			set { SetColumnValue(Columns.RequestCompanyId, value); }
		}
		  
		[XmlAttribute("RequestIp")]
		[Bindable(true)]
		public string RequestIp 
		{
			get { return GetColumnValue<string>(Columns.RequestIp); }
			set { SetColumnValue(Columns.RequestIp, value); }
		}
		  
		[XmlAttribute("BookTitle")]
		[Bindable(true)]
		public string BookTitle 
		{
			get { return GetColumnValue<string>(Columns.BookTitle); }
			set { SetColumnValue(Columns.BookTitle, value); }
		}
		  
		[XmlAttribute("InDimensions")]
		[Bindable(true)]
		public int InDimensions 
		{
			get { return GetColumnValue<int>(Columns.InDimensions); }
			set { SetColumnValue(Columns.InDimensions, value); }
		}
		  
		[XmlAttribute("InCurrency")]
		[Bindable(true)]
		public string InCurrency 
		{
			get { return GetColumnValue<string>(Columns.InCurrency); }
			set { SetColumnValue(Columns.InCurrency, value); }
		}
		  
		[XmlAttribute("InPallet")]
		[Bindable(true)]
		public string InPallet 
		{
			get { return GetColumnValue<string>(Columns.InPallet); }
			set { SetColumnValue(Columns.InPallet, value); }
		}
		  
		[XmlAttribute("InLength")]
		[Bindable(true)]
		public double? InLength 
		{
			get { return GetColumnValue<double?>(Columns.InLength); }
			set { SetColumnValue(Columns.InLength, value); }
		}
		  
		[XmlAttribute("InWidth")]
		[Bindable(true)]
		public double? InWidth 
		{
			get { return GetColumnValue<double?>(Columns.InWidth); }
			set { SetColumnValue(Columns.InWidth, value); }
		}
		  
		[XmlAttribute("InDepth")]
		[Bindable(true)]
		public double? InDepth 
		{
			get { return GetColumnValue<double?>(Columns.InDepth); }
			set { SetColumnValue(Columns.InDepth, value); }
		}
		  
		[XmlAttribute("InWeight")]
		[Bindable(true)]
		public double? InWeight 
		{
			get { return GetColumnValue<double?>(Columns.InWeight); }
			set { SetColumnValue(Columns.InWeight, value); }
		}
		  
		[XmlAttribute("InExtent")]
		[Bindable(true)]
		public double? InExtent 
		{
			get { return GetColumnValue<double?>(Columns.InExtent); }
			set { SetColumnValue(Columns.InExtent, value); }
		}
		  
		[XmlAttribute("InPapergsm")]
		[Bindable(true)]
		public double? InPapergsm 
		{
			get { return GetColumnValue<double?>(Columns.InPapergsm); }
			set { SetColumnValue(Columns.InPapergsm, value); }
		}
		  
		[XmlAttribute("InHardback")]
		[Bindable(true)]
		public bool? InHardback 
		{
			get { return GetColumnValue<bool?>(Columns.InHardback); }
			set { SetColumnValue(Columns.InHardback, value); }
		}
		  
		[XmlAttribute("CopiesCarton")]
		[Bindable(true)]
		public int? CopiesCarton 
		{
			get { return GetColumnValue<int?>(Columns.CopiesCarton); }
			set { SetColumnValue(Columns.CopiesCarton, value); }
		}
		  
		[XmlAttribute("OriginName")]
		[Bindable(true)]
		public string OriginName 
		{
			get { return GetColumnValue<string>(Columns.OriginName); }
			set { SetColumnValue(Columns.OriginName, value); }
		}
		  
		[XmlAttribute("CountryName")]
		[Bindable(true)]
		public string CountryName 
		{
			get { return GetColumnValue<string>(Columns.CountryName); }
			set { SetColumnValue(Columns.CountryName, value); }
		}
		  
		[XmlAttribute("FinalName")]
		[Bindable(true)]
		public string FinalName 
		{
			get { return GetColumnValue<string>(Columns.FinalName); }
			set { SetColumnValue(Columns.FinalName, value); }
		}
		  
		[XmlAttribute("TotCopies")]
		[Bindable(true)]
		public int? TotCopies 
		{
			get { return GetColumnValue<int?>(Columns.TotCopies); }
			set { SetColumnValue(Columns.TotCopies, value); }
		}
		  
		[XmlAttribute("PriceLoose")]
		[Bindable(true)]
		public double? PriceLoose 
		{
			get { return GetColumnValue<double?>(Columns.PriceLoose); }
			set { SetColumnValue(Columns.PriceLoose, value); }
		}
		  
		[XmlAttribute("PricePallet")]
		[Bindable(true)]
		public double? PricePallet 
		{
			get { return GetColumnValue<double?>(Columns.PricePallet); }
			set { SetColumnValue(Columns.PricePallet, value); }
		}
		  
		[XmlAttribute("PriceTotal")]
		[Bindable(true)]
		public double? PriceTotal 
		{
			get { return GetColumnValue<double?>(Columns.PriceTotal); }
			set { SetColumnValue(Columns.PriceTotal, value); }
		}
		  
		[XmlAttribute("PriceEx")]
		[Bindable(true)]
		public double? PriceEx 
		{
			get { return GetColumnValue<double?>(Columns.PriceEx); }
			set { SetColumnValue(Columns.PriceEx, value); }
		}
		  
		[XmlAttribute("PriceLooseGbp")]
		[Bindable(true)]
		public double? PriceLooseGbp 
		{
			get { return GetColumnValue<double?>(Columns.PriceLooseGbp); }
			set { SetColumnValue(Columns.PriceLooseGbp, value); }
		}
		  
		[XmlAttribute("PricePalletGbp")]
		[Bindable(true)]
		public double? PricePalletGbp 
		{
			get { return GetColumnValue<double?>(Columns.PricePalletGbp); }
			set { SetColumnValue(Columns.PricePalletGbp, value); }
		}
		  
		[XmlAttribute("PriceTotalGbp")]
		[Bindable(true)]
		public double? PriceTotalGbp 
		{
			get { return GetColumnValue<double?>(Columns.PriceTotalGbp); }
			set { SetColumnValue(Columns.PriceTotalGbp, value); }
		}
		  
		[XmlAttribute("PriceClient")]
		[Bindable(true)]
		public double? PriceClient 
		{
			get { return GetColumnValue<double?>(Columns.PriceClient); }
			set { SetColumnValue(Columns.PriceClient, value); }
		}
		  
		[XmlAttribute("ShipVia")]
		[Bindable(true)]
		public string ShipVia 
		{
			get { return GetColumnValue<string>(Columns.ShipVia); }
			set { SetColumnValue(Columns.ShipVia, value); }
		}
		  
		[XmlAttribute("PalletType")]
		[Bindable(true)]
		public string PalletType 
		{
			get { return GetColumnValue<string>(Columns.PalletType); }
			set { SetColumnValue(Columns.PalletType, value); }
		}
		  
		[XmlAttribute("LooseName")]
		[Bindable(true)]
		public string LooseName 
		{
			get { return GetColumnValue<string>(Columns.LooseName); }
			set { SetColumnValue(Columns.LooseName, value); }
		}
		  
		[XmlAttribute("LclName")]
		[Bindable(true)]
		public string LclName 
		{
			get { return GetColumnValue<string>(Columns.LclName); }
			set { SetColumnValue(Columns.LclName, value); }
		}
		  
		[XmlAttribute("LclV")]
		[Bindable(true)]
		public double? LclV 
		{
			get { return GetColumnValue<double?>(Columns.LclV); }
			set { SetColumnValue(Columns.LclV, value); }
		}
		  
		[XmlAttribute("LclV20")]
		[Bindable(true)]
		public double? LclV20 
		{
			get { return GetColumnValue<double?>(Columns.LclV20); }
			set { SetColumnValue(Columns.LclV20, value); }
		}
		  
		[XmlAttribute("LclV40")]
		[Bindable(true)]
		public double? LclV40 
		{
			get { return GetColumnValue<double?>(Columns.LclV40); }
			set { SetColumnValue(Columns.LclV40, value); }
		}
		  
		[XmlAttribute("LclV40hc")]
		[Bindable(true)]
		public double? LclV40hc 
		{
			get { return GetColumnValue<double?>(Columns.LclV40hc); }
			set { SetColumnValue(Columns.LclV40hc, value); }
		}
		  
		[XmlAttribute("LclLooseName")]
		[Bindable(true)]
		public string LclLooseName 
		{
			get { return GetColumnValue<string>(Columns.LclLooseName); }
			set { SetColumnValue(Columns.LclLooseName, value); }
		}
		  
		[XmlAttribute("LclVloose")]
		[Bindable(true)]
		public double? LclVloose 
		{
			get { return GetColumnValue<double?>(Columns.LclVloose); }
			set { SetColumnValue(Columns.LclVloose, value); }
		}
		  
		[XmlAttribute("LclVloose20")]
		[Bindable(true)]
		public double? LclVloose20 
		{
			get { return GetColumnValue<double?>(Columns.LclVloose20); }
			set { SetColumnValue(Columns.LclVloose20, value); }
		}
		  
		[XmlAttribute("LclVloose40")]
		[Bindable(true)]
		public double? LclVloose40 
		{
			get { return GetColumnValue<double?>(Columns.LclVloose40); }
			set { SetColumnValue(Columns.LclVloose40, value); }
		}
		  
		[XmlAttribute("LclVloose40hc")]
		[Bindable(true)]
		public double? LclVloose40hc 
		{
			get { return GetColumnValue<double?>(Columns.LclVloose40hc); }
			set { SetColumnValue(Columns.LclVloose40hc, value); }
		}
		  
		[XmlAttribute("PoLogId")]
		[Bindable(true)]
		public int? PoLogId 
		{
			get { return GetColumnValue<int?>(Columns.PoLogId); }
			set { SetColumnValue(Columns.PoLogId, value); }
		}
		  
		[XmlAttribute("ClientVisible")]
		[Bindable(true)]
		public bool? ClientVisible 
		{
			get { return GetColumnValue<bool?>(Columns.ClientVisible); }
			set { SetColumnValue(Columns.ClientVisible, value); }
		}
		  
		[XmlAttribute("OutLength")]
		[Bindable(true)]
		public double? OutLength 
		{
			get { return GetColumnValue<double?>(Columns.OutLength); }
			set { SetColumnValue(Columns.OutLength, value); }
		}
		  
		[XmlAttribute("OutWidth")]
		[Bindable(true)]
		public double? OutWidth 
		{
			get { return GetColumnValue<double?>(Columns.OutWidth); }
			set { SetColumnValue(Columns.OutWidth, value); }
		}
		  
		[XmlAttribute("OutDepth")]
		[Bindable(true)]
		public double? OutDepth 
		{
			get { return GetColumnValue<double?>(Columns.OutDepth); }
			set { SetColumnValue(Columns.OutDepth, value); }
		}
		  
		[XmlAttribute("OutWeight")]
		[Bindable(true)]
		public double? OutWeight 
		{
			get { return GetColumnValue<double?>(Columns.OutWeight); }
			set { SetColumnValue(Columns.OutWeight, value); }
		}
		  
		[XmlAttribute("CopyFromId")]
		[Bindable(true)]
		public int? CopyFromId 
		{
			get { return GetColumnValue<int?>(Columns.CopyFromId); }
			set { SetColumnValue(Columns.CopyFromId, value); }
		}
		  
		[XmlAttribute("SpreadsheetUsed")]
		[Bindable(true)]
		public string SpreadsheetUsed 
		{
			get { return GetColumnValue<string>(Columns.SpreadsheetUsed); }
			set { SetColumnValue(Columns.SpreadsheetUsed, value); }
		}
		  
		[XmlAttribute("InUserRef")]
		[Bindable(true)]
		public string InUserRef 
		{
			get { return GetColumnValue<string>(Columns.InUserRef); }
			set { SetColumnValue(Columns.InUserRef, value); }
		}
		  
		[XmlAttribute("PvTimestamp")]
		[Bindable(true)]
		public byte[] PvTimestamp 
		{
			get { return GetColumnValue<byte[]>(Columns.PvTimestamp); }
			set { SetColumnValue(Columns.PvTimestamp, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(DateTime? varRequestDate,int? varRequestUserId,int? varRequestCompanyId,string varRequestIp,string varBookTitle,int varInDimensions,string varInCurrency,string varInPallet,double? varInLength,double? varInWidth,double? varInDepth,double? varInWeight,double? varInExtent,double? varInPapergsm,bool? varInHardback,int? varCopiesCarton,string varOriginName,string varCountryName,string varFinalName,int? varTotCopies,double? varPriceLoose,double? varPricePallet,double? varPriceTotal,double? varPriceEx,double? varPriceLooseGbp,double? varPricePalletGbp,double? varPriceTotalGbp,double? varPriceClient,string varShipVia,string varPalletType,string varLooseName,string varLclName,double? varLclV,double? varLclV20,double? varLclV40,double? varLclV40hc,string varLclLooseName,double? varLclVloose,double? varLclVloose20,double? varLclVloose40,double? varLclVloose40hc,int? varPoLogId,bool? varClientVisible,double? varOutLength,double? varOutWidth,double? varOutDepth,double? varOutWeight,int? varCopyFromId,string varSpreadsheetUsed,string varInUserRef,byte[] varPvTimestamp)
		{
			PriceValue item = new PriceValue();
			
			item.RequestDate = varRequestDate;
			
			item.RequestUserId = varRequestUserId;
			
			item.RequestCompanyId = varRequestCompanyId;
			
			item.RequestIp = varRequestIp;
			
			item.BookTitle = varBookTitle;
			
			item.InDimensions = varInDimensions;
			
			item.InCurrency = varInCurrency;
			
			item.InPallet = varInPallet;
			
			item.InLength = varInLength;
			
			item.InWidth = varInWidth;
			
			item.InDepth = varInDepth;
			
			item.InWeight = varInWeight;
			
			item.InExtent = varInExtent;
			
			item.InPapergsm = varInPapergsm;
			
			item.InHardback = varInHardback;
			
			item.CopiesCarton = varCopiesCarton;
			
			item.OriginName = varOriginName;
			
			item.CountryName = varCountryName;
			
			item.FinalName = varFinalName;
			
			item.TotCopies = varTotCopies;
			
			item.PriceLoose = varPriceLoose;
			
			item.PricePallet = varPricePallet;
			
			item.PriceTotal = varPriceTotal;
			
			item.PriceEx = varPriceEx;
			
			item.PriceLooseGbp = varPriceLooseGbp;
			
			item.PricePalletGbp = varPricePalletGbp;
			
			item.PriceTotalGbp = varPriceTotalGbp;
			
			item.PriceClient = varPriceClient;
			
			item.ShipVia = varShipVia;
			
			item.PalletType = varPalletType;
			
			item.LooseName = varLooseName;
			
			item.LclName = varLclName;
			
			item.LclV = varLclV;
			
			item.LclV20 = varLclV20;
			
			item.LclV40 = varLclV40;
			
			item.LclV40hc = varLclV40hc;
			
			item.LclLooseName = varLclLooseName;
			
			item.LclVloose = varLclVloose;
			
			item.LclVloose20 = varLclVloose20;
			
			item.LclVloose40 = varLclVloose40;
			
			item.LclVloose40hc = varLclVloose40hc;
			
			item.PoLogId = varPoLogId;
			
			item.ClientVisible = varClientVisible;
			
			item.OutLength = varOutLength;
			
			item.OutWidth = varOutWidth;
			
			item.OutDepth = varOutDepth;
			
			item.OutWeight = varOutWeight;
			
			item.CopyFromId = varCopyFromId;
			
			item.SpreadsheetUsed = varSpreadsheetUsed;
			
			item.InUserRef = varInUserRef;
			
			item.PvTimestamp = varPvTimestamp;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varQuoteId,DateTime? varRequestDate,int? varRequestUserId,int? varRequestCompanyId,string varRequestIp,string varBookTitle,int varInDimensions,string varInCurrency,string varInPallet,double? varInLength,double? varInWidth,double? varInDepth,double? varInWeight,double? varInExtent,double? varInPapergsm,bool? varInHardback,int? varCopiesCarton,string varOriginName,string varCountryName,string varFinalName,int? varTotCopies,double? varPriceLoose,double? varPricePallet,double? varPriceTotal,double? varPriceEx,double? varPriceLooseGbp,double? varPricePalletGbp,double? varPriceTotalGbp,double? varPriceClient,string varShipVia,string varPalletType,string varLooseName,string varLclName,double? varLclV,double? varLclV20,double? varLclV40,double? varLclV40hc,string varLclLooseName,double? varLclVloose,double? varLclVloose20,double? varLclVloose40,double? varLclVloose40hc,int? varPoLogId,bool? varClientVisible,double? varOutLength,double? varOutWidth,double? varOutDepth,double? varOutWeight,int? varCopyFromId,string varSpreadsheetUsed,string varInUserRef,byte[] varPvTimestamp)
		{
			PriceValue item = new PriceValue();
			
				item.QuoteId = varQuoteId;
			
				item.RequestDate = varRequestDate;
			
				item.RequestUserId = varRequestUserId;
			
				item.RequestCompanyId = varRequestCompanyId;
			
				item.RequestIp = varRequestIp;
			
				item.BookTitle = varBookTitle;
			
				item.InDimensions = varInDimensions;
			
				item.InCurrency = varInCurrency;
			
				item.InPallet = varInPallet;
			
				item.InLength = varInLength;
			
				item.InWidth = varInWidth;
			
				item.InDepth = varInDepth;
			
				item.InWeight = varInWeight;
			
				item.InExtent = varInExtent;
			
				item.InPapergsm = varInPapergsm;
			
				item.InHardback = varInHardback;
			
				item.CopiesCarton = varCopiesCarton;
			
				item.OriginName = varOriginName;
			
				item.CountryName = varCountryName;
			
				item.FinalName = varFinalName;
			
				item.TotCopies = varTotCopies;
			
				item.PriceLoose = varPriceLoose;
			
				item.PricePallet = varPricePallet;
			
				item.PriceTotal = varPriceTotal;
			
				item.PriceEx = varPriceEx;
			
				item.PriceLooseGbp = varPriceLooseGbp;
			
				item.PricePalletGbp = varPricePalletGbp;
			
				item.PriceTotalGbp = varPriceTotalGbp;
			
				item.PriceClient = varPriceClient;
			
				item.ShipVia = varShipVia;
			
				item.PalletType = varPalletType;
			
				item.LooseName = varLooseName;
			
				item.LclName = varLclName;
			
				item.LclV = varLclV;
			
				item.LclV20 = varLclV20;
			
				item.LclV40 = varLclV40;
			
				item.LclV40hc = varLclV40hc;
			
				item.LclLooseName = varLclLooseName;
			
				item.LclVloose = varLclVloose;
			
				item.LclVloose20 = varLclVloose20;
			
				item.LclVloose40 = varLclVloose40;
			
				item.LclVloose40hc = varLclVloose40hc;
			
				item.PoLogId = varPoLogId;
			
				item.ClientVisible = varClientVisible;
			
				item.OutLength = varOutLength;
			
				item.OutWidth = varOutWidth;
			
				item.OutDepth = varOutDepth;
			
				item.OutWeight = varOutWeight;
			
				item.CopyFromId = varCopyFromId;
			
				item.SpreadsheetUsed = varSpreadsheetUsed;
			
				item.InUserRef = varInUserRef;
			
				item.PvTimestamp = varPvTimestamp;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn QuoteIdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn RequestDateColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn RequestUserIdColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn RequestCompanyIdColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn RequestIpColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn BookTitleColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn InDimensionsColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn InCurrencyColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn InPalletColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn InLengthColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn InWidthColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn InDepthColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn InWeightColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn InExtentColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn InPapergsmColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn InHardbackColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        public static TableSchema.TableColumn CopiesCartonColumn
        {
            get { return Schema.Columns[16]; }
        }
        
        
        
        public static TableSchema.TableColumn OriginNameColumn
        {
            get { return Schema.Columns[17]; }
        }
        
        
        
        public static TableSchema.TableColumn CountryNameColumn
        {
            get { return Schema.Columns[18]; }
        }
        
        
        
        public static TableSchema.TableColumn FinalNameColumn
        {
            get { return Schema.Columns[19]; }
        }
        
        
        
        public static TableSchema.TableColumn TotCopiesColumn
        {
            get { return Schema.Columns[20]; }
        }
        
        
        
        public static TableSchema.TableColumn PriceLooseColumn
        {
            get { return Schema.Columns[21]; }
        }
        
        
        
        public static TableSchema.TableColumn PricePalletColumn
        {
            get { return Schema.Columns[22]; }
        }
        
        
        
        public static TableSchema.TableColumn PriceTotalColumn
        {
            get { return Schema.Columns[23]; }
        }
        
        
        
        public static TableSchema.TableColumn PriceExColumn
        {
            get { return Schema.Columns[24]; }
        }
        
        
        
        public static TableSchema.TableColumn PriceLooseGbpColumn
        {
            get { return Schema.Columns[25]; }
        }
        
        
        
        public static TableSchema.TableColumn PricePalletGbpColumn
        {
            get { return Schema.Columns[26]; }
        }
        
        
        
        public static TableSchema.TableColumn PriceTotalGbpColumn
        {
            get { return Schema.Columns[27]; }
        }
        
        
        
        public static TableSchema.TableColumn PriceClientColumn
        {
            get { return Schema.Columns[28]; }
        }
        
        
        
        public static TableSchema.TableColumn ShipViaColumn
        {
            get { return Schema.Columns[29]; }
        }
        
        
        
        public static TableSchema.TableColumn PalletTypeColumn
        {
            get { return Schema.Columns[30]; }
        }
        
        
        
        public static TableSchema.TableColumn LooseNameColumn
        {
            get { return Schema.Columns[31]; }
        }
        
        
        
        public static TableSchema.TableColumn LclNameColumn
        {
            get { return Schema.Columns[32]; }
        }
        
        
        
        public static TableSchema.TableColumn LclVColumn
        {
            get { return Schema.Columns[33]; }
        }
        
        
        
        public static TableSchema.TableColumn LclV20Column
        {
            get { return Schema.Columns[34]; }
        }
        
        
        
        public static TableSchema.TableColumn LclV40Column
        {
            get { return Schema.Columns[35]; }
        }
        
        
        
        public static TableSchema.TableColumn LclV40hcColumn
        {
            get { return Schema.Columns[36]; }
        }
        
        
        
        public static TableSchema.TableColumn LclLooseNameColumn
        {
            get { return Schema.Columns[37]; }
        }
        
        
        
        public static TableSchema.TableColumn LclVlooseColumn
        {
            get { return Schema.Columns[38]; }
        }
        
        
        
        public static TableSchema.TableColumn LclVloose20Column
        {
            get { return Schema.Columns[39]; }
        }
        
        
        
        public static TableSchema.TableColumn LclVloose40Column
        {
            get { return Schema.Columns[40]; }
        }
        
        
        
        public static TableSchema.TableColumn LclVloose40hcColumn
        {
            get { return Schema.Columns[41]; }
        }
        
        
        
        public static TableSchema.TableColumn PoLogIdColumn
        {
            get { return Schema.Columns[42]; }
        }
        
        
        
        public static TableSchema.TableColumn ClientVisibleColumn
        {
            get { return Schema.Columns[43]; }
        }
        
        
        
        public static TableSchema.TableColumn OutLengthColumn
        {
            get { return Schema.Columns[44]; }
        }
        
        
        
        public static TableSchema.TableColumn OutWidthColumn
        {
            get { return Schema.Columns[45]; }
        }
        
        
        
        public static TableSchema.TableColumn OutDepthColumn
        {
            get { return Schema.Columns[46]; }
        }
        
        
        
        public static TableSchema.TableColumn OutWeightColumn
        {
            get { return Schema.Columns[47]; }
        }
        
        
        
        public static TableSchema.TableColumn CopyFromIdColumn
        {
            get { return Schema.Columns[48]; }
        }
        
        
        
        public static TableSchema.TableColumn SpreadsheetUsedColumn
        {
            get { return Schema.Columns[49]; }
        }
        
        
        
        public static TableSchema.TableColumn InUserRefColumn
        {
            get { return Schema.Columns[50]; }
        }
        
        
        
        public static TableSchema.TableColumn PvTimestampColumn
        {
            get { return Schema.Columns[51]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string QuoteId = @"quote_Id";
			 public static string RequestDate = @"request_date";
			 public static string RequestUserId = @"request_user_id";
			 public static string RequestCompanyId = @"request_company_id";
			 public static string RequestIp = @"request_ip";
			 public static string BookTitle = @"book_title";
			 public static string InDimensions = @"in_dimensions";
			 public static string InCurrency = @"in_currency";
			 public static string InPallet = @"in_pallet";
			 public static string InLength = @"in_length";
			 public static string InWidth = @"in_width";
			 public static string InDepth = @"in_depth";
			 public static string InWeight = @"in_weight";
			 public static string InExtent = @"in_extent";
			 public static string InPapergsm = @"in_papergsm";
			 public static string InHardback = @"in_hardback";
			 public static string CopiesCarton = @"copies_carton";
			 public static string OriginName = @"origin_name";
			 public static string CountryName = @"country_name";
			 public static string FinalName = @"final_name";
			 public static string TotCopies = @"tot_copies";
			 public static string PriceLoose = @"price_loose";
			 public static string PricePallet = @"price_pallet";
			 public static string PriceTotal = @"price_total";
			 public static string PriceEx = @"price_ex";
			 public static string PriceLooseGbp = @"price_loose_gbp";
			 public static string PricePalletGbp = @"price_pallet_gbp";
			 public static string PriceTotalGbp = @"price_total_gbp";
			 public static string PriceClient = @"price_client";
			 public static string ShipVia = @"ship_via";
			 public static string PalletType = @"pallet_type";
			 public static string LooseName = @"loose_name";
			 public static string LclName = @"lcl_name";
			 public static string LclV = @"lcl_v";
			 public static string LclV20 = @"lcl_v20";
			 public static string LclV40 = @"lcl_v40";
			 public static string LclV40hc = @"lcl_v40hc";
			 public static string LclLooseName = @"lcl_loose_name";
			 public static string LclVloose = @"lcl_vloose";
			 public static string LclVloose20 = @"lcl_vloose20";
			 public static string LclVloose40 = @"lcl_vloose40";
			 public static string LclVloose40hc = @"lcl_vloose40hc";
			 public static string PoLogId = @"po_log_id";
			 public static string ClientVisible = @"client_visible";
			 public static string OutLength = @"out_length";
			 public static string OutWidth = @"out_width";
			 public static string OutDepth = @"out_depth";
			 public static string OutWeight = @"out_weight";
			 public static string CopyFromId = @"copy_from_id";
			 public static string SpreadsheetUsed = @"spreadsheet_used";
			 public static string InUserRef = @"in_user_ref";
			 public static string PvTimestamp = @"pv_timestamp";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
