using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DAL.Pricer
{
	/// <summary>
	/// Strongly-typed collection for the PricerCountryName class.
	/// </summary>
    [Serializable]
	public partial class PricerCountryNameCollection : ActiveList<PricerCountryName, PricerCountryNameCollection>
	{	   
		public PricerCountryNameCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>PricerCountryNameCollection</returns>
		public PricerCountryNameCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                PricerCountryName o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the pricer_country_name table.
	/// </summary>
	[Serializable]
	public partial class PricerCountryName : ActiveRecord<PricerCountryName>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public PricerCountryName()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public PricerCountryName(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public PricerCountryName(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public PricerCountryName(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("pricer_country_name", TableType.Table, DataService.GetInstance("pricerprov"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarCountryId = new TableSchema.TableColumn(schema);
				colvarCountryId.ColumnName = "country_ID";
				colvarCountryId.DataType = DbType.Int32;
				colvarCountryId.MaxLength = 0;
				colvarCountryId.AutoIncrement = true;
				colvarCountryId.IsNullable = false;
				colvarCountryId.IsPrimaryKey = true;
				colvarCountryId.IsForeignKey = false;
				colvarCountryId.IsReadOnly = false;
				colvarCountryId.DefaultSetting = @"";
				colvarCountryId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCountryId);
				
				TableSchema.TableColumn colvarCountryName = new TableSchema.TableColumn(schema);
				colvarCountryName.ColumnName = "country_name";
				colvarCountryName.DataType = DbType.AnsiString;
				colvarCountryName.MaxLength = 50;
				colvarCountryName.AutoIncrement = false;
				colvarCountryName.IsNullable = true;
				colvarCountryName.IsPrimaryKey = false;
				colvarCountryName.IsForeignKey = false;
				colvarCountryName.IsReadOnly = false;
				colvarCountryName.DefaultSetting = @"";
				colvarCountryName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCountryName);
				
				TableSchema.TableColumn colvarCompanyGroup = new TableSchema.TableColumn(schema);
				colvarCompanyGroup.ColumnName = "company_group";
				colvarCompanyGroup.DataType = DbType.Int32;
				colvarCompanyGroup.MaxLength = 0;
				colvarCompanyGroup.AutoIncrement = false;
				colvarCompanyGroup.IsNullable = true;
				colvarCompanyGroup.IsPrimaryKey = false;
				colvarCompanyGroup.IsForeignKey = false;
				colvarCompanyGroup.IsReadOnly = false;
				
						colvarCompanyGroup.DefaultSetting = @"((0))";
				colvarCompanyGroup.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCompanyGroup);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["pricerprov"].AddSchema("pricer_country_name",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("CountryId")]
		[Bindable(true)]
		public int CountryId 
		{
			get { return GetColumnValue<int>(Columns.CountryId); }
			set { SetColumnValue(Columns.CountryId, value); }
		}
		  
		[XmlAttribute("CountryName")]
		[Bindable(true)]
		public string CountryName 
		{
			get { return GetColumnValue<string>(Columns.CountryName); }
			set { SetColumnValue(Columns.CountryName, value); }
		}
		  
		[XmlAttribute("CompanyGroup")]
		[Bindable(true)]
		public int? CompanyGroup 
		{
			get { return GetColumnValue<int?>(Columns.CompanyGroup); }
			set { SetColumnValue(Columns.CompanyGroup, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varCountryName,int? varCompanyGroup)
		{
			PricerCountryName item = new PricerCountryName();
			
			item.CountryName = varCountryName;
			
			item.CompanyGroup = varCompanyGroup;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varCountryId,string varCountryName,int? varCompanyGroup)
		{
			PricerCountryName item = new PricerCountryName();
			
				item.CountryId = varCountryId;
			
				item.CountryName = varCountryName;
			
				item.CompanyGroup = varCompanyGroup;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn CountryIdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn CountryNameColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn CompanyGroupColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string CountryId = @"country_ID";
			 public static string CountryName = @"country_name";
			 public static string CompanyGroup = @"company_group";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
