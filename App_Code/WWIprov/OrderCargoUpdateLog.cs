using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DAL.Logistics
{
	/// <summary>
	/// Strongly-typed collection for the OrderCargoUpdateLog class.
	/// </summary>
    [Serializable]
	public partial class OrderCargoUpdateLogCollection : ActiveList<OrderCargoUpdateLog, OrderCargoUpdateLogCollection>
	{	   
		public OrderCargoUpdateLogCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>OrderCargoUpdateLogCollection</returns>
		public OrderCargoUpdateLogCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                OrderCargoUpdateLog o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the order_cargo_update_log table.
	/// </summary>
	[Serializable]
	public partial class OrderCargoUpdateLog : ActiveRecord<OrderCargoUpdateLog>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public OrderCargoUpdateLog()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public OrderCargoUpdateLog(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public OrderCargoUpdateLog(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public OrderCargoUpdateLog(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("order_cargo_update_log", TableType.Table, DataService.GetInstance("WWIprov"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarCargoupdateid = new TableSchema.TableColumn(schema);
				colvarCargoupdateid.ColumnName = "cargoupdateid";
				colvarCargoupdateid.DataType = DbType.Int32;
				colvarCargoupdateid.MaxLength = 0;
				colvarCargoupdateid.AutoIncrement = true;
				colvarCargoupdateid.IsNullable = false;
				colvarCargoupdateid.IsPrimaryKey = true;
				colvarCargoupdateid.IsForeignKey = false;
				colvarCargoupdateid.IsReadOnly = false;
				colvarCargoupdateid.DefaultSetting = @"";
				colvarCargoupdateid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCargoupdateid);
				
				TableSchema.TableColumn colvarOrderid = new TableSchema.TableColumn(schema);
				colvarOrderid.ColumnName = "orderid";
				colvarOrderid.DataType = DbType.Int32;
				colvarOrderid.MaxLength = 0;
				colvarOrderid.AutoIncrement = false;
				colvarOrderid.IsNullable = true;
				colvarOrderid.IsPrimaryKey = false;
				colvarOrderid.IsForeignKey = false;
				colvarOrderid.IsReadOnly = false;
				
						colvarOrderid.DefaultSetting = @"((0))";
				colvarOrderid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOrderid);
				
				TableSchema.TableColumn colvarPreCargoready = new TableSchema.TableColumn(schema);
				colvarPreCargoready.ColumnName = "pre_cargoready";
				colvarPreCargoready.DataType = DbType.DateTime;
				colvarPreCargoready.MaxLength = 0;
				colvarPreCargoready.AutoIncrement = false;
				colvarPreCargoready.IsNullable = true;
				colvarPreCargoready.IsPrimaryKey = false;
				colvarPreCargoready.IsForeignKey = false;
				colvarPreCargoready.IsReadOnly = false;
				colvarPreCargoready.DefaultSetting = @"";
				colvarPreCargoready.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPreCargoready);
				
				TableSchema.TableColumn colvarPreEstpallets = new TableSchema.TableColumn(schema);
				colvarPreEstpallets.ColumnName = "pre_estpallets";
				colvarPreEstpallets.DataType = DbType.Int32;
				colvarPreEstpallets.MaxLength = 0;
				colvarPreEstpallets.AutoIncrement = false;
				colvarPreEstpallets.IsNullable = true;
				colvarPreEstpallets.IsPrimaryKey = false;
				colvarPreEstpallets.IsForeignKey = false;
				colvarPreEstpallets.IsReadOnly = false;
				
						colvarPreEstpallets.DefaultSetting = @"((0))";
				colvarPreEstpallets.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPreEstpallets);
				
				TableSchema.TableColumn colvarPreEstweight = new TableSchema.TableColumn(schema);
				colvarPreEstweight.ColumnName = "pre_estweight";
				colvarPreEstweight.DataType = DbType.Int32;
				colvarPreEstweight.MaxLength = 0;
				colvarPreEstweight.AutoIncrement = false;
				colvarPreEstweight.IsNullable = true;
				colvarPreEstweight.IsPrimaryKey = false;
				colvarPreEstweight.IsForeignKey = false;
				colvarPreEstweight.IsReadOnly = false;
				
						colvarPreEstweight.DefaultSetting = @"((0))";
				colvarPreEstweight.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPreEstweight);
				
				TableSchema.TableColumn colvarPreEstvolume = new TableSchema.TableColumn(schema);
				colvarPreEstvolume.ColumnName = "pre_estvolume";
				colvarPreEstvolume.DataType = DbType.Single;
				colvarPreEstvolume.MaxLength = 0;
				colvarPreEstvolume.AutoIncrement = false;
				colvarPreEstvolume.IsNullable = true;
				colvarPreEstvolume.IsPrimaryKey = false;
				colvarPreEstvolume.IsForeignKey = false;
				colvarPreEstvolume.IsReadOnly = false;
				
						colvarPreEstvolume.DefaultSetting = @"((0))";
				colvarPreEstvolume.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPreEstvolume);
				
				TableSchema.TableColumn colvarPostCargoready = new TableSchema.TableColumn(schema);
				colvarPostCargoready.ColumnName = "post_cargoready";
				colvarPostCargoready.DataType = DbType.DateTime;
				colvarPostCargoready.MaxLength = 0;
				colvarPostCargoready.AutoIncrement = false;
				colvarPostCargoready.IsNullable = true;
				colvarPostCargoready.IsPrimaryKey = false;
				colvarPostCargoready.IsForeignKey = false;
				colvarPostCargoready.IsReadOnly = false;
				colvarPostCargoready.DefaultSetting = @"";
				colvarPostCargoready.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPostCargoready);
				
				TableSchema.TableColumn colvarPostEstpallets = new TableSchema.TableColumn(schema);
				colvarPostEstpallets.ColumnName = "post_estpallets";
				colvarPostEstpallets.DataType = DbType.Int32;
				colvarPostEstpallets.MaxLength = 0;
				colvarPostEstpallets.AutoIncrement = false;
				colvarPostEstpallets.IsNullable = true;
				colvarPostEstpallets.IsPrimaryKey = false;
				colvarPostEstpallets.IsForeignKey = false;
				colvarPostEstpallets.IsReadOnly = false;
				
						colvarPostEstpallets.DefaultSetting = @"((0))";
				colvarPostEstpallets.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPostEstpallets);
				
				TableSchema.TableColumn colvarPostEstweight = new TableSchema.TableColumn(schema);
				colvarPostEstweight.ColumnName = "post_estweight";
				colvarPostEstweight.DataType = DbType.Int32;
				colvarPostEstweight.MaxLength = 0;
				colvarPostEstweight.AutoIncrement = false;
				colvarPostEstweight.IsNullable = true;
				colvarPostEstweight.IsPrimaryKey = false;
				colvarPostEstweight.IsForeignKey = false;
				colvarPostEstweight.IsReadOnly = false;
				
						colvarPostEstweight.DefaultSetting = @"((0))";
				colvarPostEstweight.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPostEstweight);
				
				TableSchema.TableColumn colvarPostEstvolume = new TableSchema.TableColumn(schema);
				colvarPostEstvolume.ColumnName = "post_estvolume";
				colvarPostEstvolume.DataType = DbType.Single;
				colvarPostEstvolume.MaxLength = 0;
				colvarPostEstvolume.AutoIncrement = false;
				colvarPostEstvolume.IsNullable = true;
				colvarPostEstvolume.IsPrimaryKey = false;
				colvarPostEstvolume.IsForeignKey = false;
				colvarPostEstvolume.IsReadOnly = false;
				
						colvarPostEstvolume.DefaultSetting = @"((0))";
				colvarPostEstvolume.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPostEstvolume);
				
				TableSchema.TableColumn colvarCompanyid = new TableSchema.TableColumn(schema);
				colvarCompanyid.ColumnName = "companyid";
				colvarCompanyid.DataType = DbType.Int32;
				colvarCompanyid.MaxLength = 0;
				colvarCompanyid.AutoIncrement = false;
				colvarCompanyid.IsNullable = true;
				colvarCompanyid.IsPrimaryKey = false;
				colvarCompanyid.IsForeignKey = false;
				colvarCompanyid.IsReadOnly = false;
				
						colvarCompanyid.DefaultSetting = @"((0))";
				colvarCompanyid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCompanyid);
				
				TableSchema.TableColumn colvarUserid = new TableSchema.TableColumn(schema);
				colvarUserid.ColumnName = "userid";
				colvarUserid.DataType = DbType.Int32;
				colvarUserid.MaxLength = 0;
				colvarUserid.AutoIncrement = false;
				colvarUserid.IsNullable = true;
				colvarUserid.IsPrimaryKey = false;
				colvarUserid.IsForeignKey = false;
				colvarUserid.IsReadOnly = false;
				
						colvarUserid.DefaultSetting = @"((0))";
				colvarUserid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUserid);
				
				TableSchema.TableColumn colvarDtupdated = new TableSchema.TableColumn(schema);
				colvarDtupdated.ColumnName = "dtupdated";
				colvarDtupdated.DataType = DbType.DateTime;
				colvarDtupdated.MaxLength = 0;
				colvarDtupdated.AutoIncrement = false;
				colvarDtupdated.IsNullable = true;
				colvarDtupdated.IsPrimaryKey = false;
				colvarDtupdated.IsForeignKey = false;
				colvarDtupdated.IsReadOnly = false;
				colvarDtupdated.DefaultSetting = @"";
				colvarDtupdated.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDtupdated);
				
				TableSchema.TableColumn colvarUpdguid = new TableSchema.TableColumn(schema);
				colvarUpdguid.ColumnName = "updguid";
				colvarUpdguid.DataType = DbType.AnsiString;
				colvarUpdguid.MaxLength = 30;
				colvarUpdguid.AutoIncrement = false;
				colvarUpdguid.IsNullable = true;
				colvarUpdguid.IsPrimaryKey = false;
				colvarUpdguid.IsForeignKey = false;
				colvarUpdguid.IsReadOnly = false;
				colvarUpdguid.DefaultSetting = @"";
				colvarUpdguid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUpdguid);
				
				TableSchema.TableColumn colvarMstimestamp = new TableSchema.TableColumn(schema);
				colvarMstimestamp.ColumnName = "mstimestamp";
				colvarMstimestamp.DataType = DbType.Binary;
				colvarMstimestamp.MaxLength = 0;
				colvarMstimestamp.AutoIncrement = false;
				colvarMstimestamp.IsNullable = true;
				colvarMstimestamp.IsPrimaryKey = false;
				colvarMstimestamp.IsForeignKey = false;
				colvarMstimestamp.IsReadOnly = true;
				colvarMstimestamp.DefaultSetting = @"";
				colvarMstimestamp.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMstimestamp);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["WWIprov"].AddSchema("order_cargo_update_log",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Cargoupdateid")]
		[Bindable(true)]
		public int Cargoupdateid 
		{
			get { return GetColumnValue<int>(Columns.Cargoupdateid); }
			set { SetColumnValue(Columns.Cargoupdateid, value); }
		}
		  
		[XmlAttribute("Orderid")]
		[Bindable(true)]
		public int? Orderid 
		{
			get { return GetColumnValue<int?>(Columns.Orderid); }
			set { SetColumnValue(Columns.Orderid, value); }
		}
		  
		[XmlAttribute("PreCargoready")]
		[Bindable(true)]
		public DateTime? PreCargoready 
		{
			get { return GetColumnValue<DateTime?>(Columns.PreCargoready); }
			set { SetColumnValue(Columns.PreCargoready, value); }
		}
		  
		[XmlAttribute("PreEstpallets")]
		[Bindable(true)]
		public int? PreEstpallets 
		{
			get { return GetColumnValue<int?>(Columns.PreEstpallets); }
			set { SetColumnValue(Columns.PreEstpallets, value); }
		}
		  
		[XmlAttribute("PreEstweight")]
		[Bindable(true)]
		public int? PreEstweight 
		{
			get { return GetColumnValue<int?>(Columns.PreEstweight); }
			set { SetColumnValue(Columns.PreEstweight, value); }
		}
		  
		[XmlAttribute("PreEstvolume")]
		[Bindable(true)]
		public float? PreEstvolume 
		{
			get { return GetColumnValue<float?>(Columns.PreEstvolume); }
			set { SetColumnValue(Columns.PreEstvolume, value); }
		}
		  
		[XmlAttribute("PostCargoready")]
		[Bindable(true)]
		public DateTime? PostCargoready 
		{
			get { return GetColumnValue<DateTime?>(Columns.PostCargoready); }
			set { SetColumnValue(Columns.PostCargoready, value); }
		}
		  
		[XmlAttribute("PostEstpallets")]
		[Bindable(true)]
		public int? PostEstpallets 
		{
			get { return GetColumnValue<int?>(Columns.PostEstpallets); }
			set { SetColumnValue(Columns.PostEstpallets, value); }
		}
		  
		[XmlAttribute("PostEstweight")]
		[Bindable(true)]
		public int? PostEstweight 
		{
			get { return GetColumnValue<int?>(Columns.PostEstweight); }
			set { SetColumnValue(Columns.PostEstweight, value); }
		}
		  
		[XmlAttribute("PostEstvolume")]
		[Bindable(true)]
		public float? PostEstvolume 
		{
			get { return GetColumnValue<float?>(Columns.PostEstvolume); }
			set { SetColumnValue(Columns.PostEstvolume, value); }
		}
		  
		[XmlAttribute("Companyid")]
		[Bindable(true)]
		public int? Companyid 
		{
			get { return GetColumnValue<int?>(Columns.Companyid); }
			set { SetColumnValue(Columns.Companyid, value); }
		}
		  
		[XmlAttribute("Userid")]
		[Bindable(true)]
		public int? Userid 
		{
			get { return GetColumnValue<int?>(Columns.Userid); }
			set { SetColumnValue(Columns.Userid, value); }
		}
		  
		[XmlAttribute("Dtupdated")]
		[Bindable(true)]
		public DateTime? Dtupdated 
		{
			get { return GetColumnValue<DateTime?>(Columns.Dtupdated); }
			set { SetColumnValue(Columns.Dtupdated, value); }
		}
		  
		[XmlAttribute("Updguid")]
		[Bindable(true)]
		public string Updguid 
		{
			get { return GetColumnValue<string>(Columns.Updguid); }
			set { SetColumnValue(Columns.Updguid, value); }
		}
		  
		[XmlAttribute("Mstimestamp")]
		[Bindable(true)]
		public byte[] Mstimestamp 
		{
			get { return GetColumnValue<byte[]>(Columns.Mstimestamp); }
			set { SetColumnValue(Columns.Mstimestamp, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int? varOrderid,DateTime? varPreCargoready,int? varPreEstpallets,int? varPreEstweight,float? varPreEstvolume,DateTime? varPostCargoready,int? varPostEstpallets,int? varPostEstweight,float? varPostEstvolume,int? varCompanyid,int? varUserid,DateTime? varDtupdated,string varUpdguid,byte[] varMstimestamp)
		{
			OrderCargoUpdateLog item = new OrderCargoUpdateLog();
			
			item.Orderid = varOrderid;
			
			item.PreCargoready = varPreCargoready;
			
			item.PreEstpallets = varPreEstpallets;
			
			item.PreEstweight = varPreEstweight;
			
			item.PreEstvolume = varPreEstvolume;
			
			item.PostCargoready = varPostCargoready;
			
			item.PostEstpallets = varPostEstpallets;
			
			item.PostEstweight = varPostEstweight;
			
			item.PostEstvolume = varPostEstvolume;
			
			item.Companyid = varCompanyid;
			
			item.Userid = varUserid;
			
			item.Dtupdated = varDtupdated;
			
			item.Updguid = varUpdguid;
			
			item.Mstimestamp = varMstimestamp;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varCargoupdateid,int? varOrderid,DateTime? varPreCargoready,int? varPreEstpallets,int? varPreEstweight,float? varPreEstvolume,DateTime? varPostCargoready,int? varPostEstpallets,int? varPostEstweight,float? varPostEstvolume,int? varCompanyid,int? varUserid,DateTime? varDtupdated,string varUpdguid,byte[] varMstimestamp)
		{
			OrderCargoUpdateLog item = new OrderCargoUpdateLog();
			
				item.Cargoupdateid = varCargoupdateid;
			
				item.Orderid = varOrderid;
			
				item.PreCargoready = varPreCargoready;
			
				item.PreEstpallets = varPreEstpallets;
			
				item.PreEstweight = varPreEstweight;
			
				item.PreEstvolume = varPreEstvolume;
			
				item.PostCargoready = varPostCargoready;
			
				item.PostEstpallets = varPostEstpallets;
			
				item.PostEstweight = varPostEstweight;
			
				item.PostEstvolume = varPostEstvolume;
			
				item.Companyid = varCompanyid;
			
				item.Userid = varUserid;
			
				item.Dtupdated = varDtupdated;
			
				item.Updguid = varUpdguid;
			
				item.Mstimestamp = varMstimestamp;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn CargoupdateidColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn OrderidColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn PreCargoreadyColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn PreEstpalletsColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn PreEstweightColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn PreEstvolumeColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn PostCargoreadyColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn PostEstpalletsColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn PostEstweightColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn PostEstvolumeColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn CompanyidColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn UseridColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn DtupdatedColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn UpdguidColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn MstimestampColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Cargoupdateid = @"cargoupdateid";
			 public static string Orderid = @"orderid";
			 public static string PreCargoready = @"pre_cargoready";
			 public static string PreEstpallets = @"pre_estpallets";
			 public static string PreEstweight = @"pre_estweight";
			 public static string PreEstvolume = @"pre_estvolume";
			 public static string PostCargoready = @"post_cargoready";
			 public static string PostEstpallets = @"post_estpallets";
			 public static string PostEstweight = @"post_estweight";
			 public static string PostEstvolume = @"post_estvolume";
			 public static string Companyid = @"companyid";
			 public static string Userid = @"userid";
			 public static string Dtupdated = @"dtupdated";
			 public static string Updguid = @"updguid";
			 public static string Mstimestamp = @"mstimestamp";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
