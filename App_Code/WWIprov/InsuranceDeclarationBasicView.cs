using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DAL.Logistics{
    /// <summary>
    /// Strongly-typed collection for the InsuranceDeclarationBasicView class.
    /// </summary>
    [Serializable]
    public partial class InsuranceDeclarationBasicViewCollection : ReadOnlyList<InsuranceDeclarationBasicView, InsuranceDeclarationBasicViewCollection>
    {        
        public InsuranceDeclarationBasicViewCollection() {}
    }
    /// <summary>
    /// This is  Read-only wrapper class for the InsuranceDeclarationBasicView view.
    /// </summary>
    [Serializable]
    public partial class InsuranceDeclarationBasicView : ReadOnlyRecord<InsuranceDeclarationBasicView>, IReadOnlyRecord
    {
    
	    #region Default Settings
	    protected static void SetSQLProps() 
	    {
		    GetTableSchema();
	    }
	    #endregion
        #region Schema Accessor
	    public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                {
                    SetSQLProps();
                }
                return BaseSchema;
            }
        }
    	
        private static void GetTableSchema() 
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("InsuranceDeclarationBasicView", TableType.View, DataService.GetInstance("WWIprov"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns
                
                TableSchema.TableColumn colvarOrderNumber = new TableSchema.TableColumn(schema);
                colvarOrderNumber.ColumnName = "OrderNumber";
                colvarOrderNumber.DataType = DbType.Int32;
                colvarOrderNumber.MaxLength = 0;
                colvarOrderNumber.AutoIncrement = false;
                colvarOrderNumber.IsNullable = true;
                colvarOrderNumber.IsPrimaryKey = false;
                colvarOrderNumber.IsForeignKey = false;
                colvarOrderNumber.IsReadOnly = false;
                
                schema.Columns.Add(colvarOrderNumber);
                
                TableSchema.TableColumn colvarCompanyName = new TableSchema.TableColumn(schema);
                colvarCompanyName.ColumnName = "CompanyName";
                colvarCompanyName.DataType = DbType.String;
                colvarCompanyName.MaxLength = 50;
                colvarCompanyName.AutoIncrement = false;
                colvarCompanyName.IsNullable = true;
                colvarCompanyName.IsPrimaryKey = false;
                colvarCompanyName.IsForeignKey = false;
                colvarCompanyName.IsReadOnly = false;
                
                schema.Columns.Add(colvarCompanyName);
                
                TableSchema.TableColumn colvarPortName = new TableSchema.TableColumn(schema);
                colvarPortName.ColumnName = "PortName";
                colvarPortName.DataType = DbType.String;
                colvarPortName.MaxLength = 30;
                colvarPortName.AutoIncrement = false;
                colvarPortName.IsNullable = true;
                colvarPortName.IsPrimaryKey = false;
                colvarPortName.IsForeignKey = false;
                colvarPortName.IsReadOnly = false;
                
                schema.Columns.Add(colvarPortName);
                
                TableSchema.TableColumn colvarCountryName = new TableSchema.TableColumn(schema);
                colvarCountryName.ColumnName = "CountryName";
                colvarCountryName.DataType = DbType.String;
                colvarCountryName.MaxLength = 50;
                colvarCountryName.AutoIncrement = false;
                colvarCountryName.IsNullable = false;
                colvarCountryName.IsPrimaryKey = false;
                colvarCountryName.IsForeignKey = false;
                colvarCountryName.IsReadOnly = false;
                
                schema.Columns.Add(colvarCountryName);
                
                TableSchema.TableColumn colvarJoined = new TableSchema.TableColumn(schema);
                colvarJoined.ColumnName = "Joined";
                colvarJoined.DataType = DbType.String;
                colvarJoined.MaxLength = 50;
                colvarJoined.AutoIncrement = false;
                colvarJoined.IsNullable = true;
                colvarJoined.IsPrimaryKey = false;
                colvarJoined.IsForeignKey = false;
                colvarJoined.IsReadOnly = false;
                
                schema.Columns.Add(colvarJoined);
                
                TableSchema.TableColumn colvarEts = new TableSchema.TableColumn(schema);
                colvarEts.ColumnName = "ETS";
                colvarEts.DataType = DbType.DateTime;
                colvarEts.MaxLength = 0;
                colvarEts.AutoIncrement = false;
                colvarEts.IsNullable = true;
                colvarEts.IsPrimaryKey = false;
                colvarEts.IsForeignKey = false;
                colvarEts.IsReadOnly = false;
                
                schema.Columns.Add(colvarEts);
                
                TableSchema.TableColumn colvarInsurance = new TableSchema.TableColumn(schema);
                colvarInsurance.ColumnName = "Insurance";
                colvarInsurance.DataType = DbType.Boolean;
                colvarInsurance.MaxLength = 0;
                colvarInsurance.AutoIncrement = false;
                colvarInsurance.IsNullable = true;
                colvarInsurance.IsPrimaryKey = false;
                colvarInsurance.IsForeignKey = false;
                colvarInsurance.IsReadOnly = false;
                
                schema.Columns.Add(colvarInsurance);
                
                TableSchema.TableColumn colvarInsuredValue = new TableSchema.TableColumn(schema);
                colvarInsuredValue.ColumnName = "InsuredValue";
                colvarInsuredValue.DataType = DbType.Currency;
                colvarInsuredValue.MaxLength = 0;
                colvarInsuredValue.AutoIncrement = false;
                colvarInsuredValue.IsNullable = true;
                colvarInsuredValue.IsPrimaryKey = false;
                colvarInsuredValue.IsForeignKey = false;
                colvarInsuredValue.IsReadOnly = false;
                
                schema.Columns.Add(colvarInsuredValue);
                
                TableSchema.TableColumn colvarInvoiceNumber = new TableSchema.TableColumn(schema);
                colvarInvoiceNumber.ColumnName = "InvoiceNumber";
                colvarInvoiceNumber.DataType = DbType.Int32;
                colvarInvoiceNumber.MaxLength = 0;
                colvarInvoiceNumber.AutoIncrement = false;
                colvarInvoiceNumber.IsNullable = true;
                colvarInvoiceNumber.IsPrimaryKey = false;
                colvarInvoiceNumber.IsForeignKey = false;
                colvarInvoiceNumber.IsReadOnly = false;
                
                schema.Columns.Add(colvarInvoiceNumber);
                
                
                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["WWIprov"].AddSchema("InsuranceDeclarationBasicView",schema);
            }
        }
        #endregion
        
        #region Query Accessor
	    public static Query CreateQuery()
	    {
		    return new Query(Schema);
	    }
	    #endregion
	    
	    #region .ctors
	    public InsuranceDeclarationBasicView()
	    {
            SetSQLProps();
            SetDefaults();
            MarkNew();
        }
        public InsuranceDeclarationBasicView(bool useDatabaseDefaults)
	    {
		    SetSQLProps();
		    if(useDatabaseDefaults)
		    {
				ForceDefaults();
			}
			MarkNew();
	    }
	    
	    public InsuranceDeclarationBasicView(object keyID)
	    {
		    SetSQLProps();
		    LoadByKey(keyID);
	    }
    	 
	    public InsuranceDeclarationBasicView(string columnName, object columnValue)
        {
            SetSQLProps();
            LoadByParam(columnName,columnValue);
        }
        
	    #endregion
	    
	    #region Props
	    
          
        [XmlAttribute("OrderNumber")]
        [Bindable(true)]
        public int? OrderNumber 
	    {
		    get
		    {
			    return GetColumnValue<int?>("OrderNumber");
		    }
            set 
		    {
			    SetColumnValue("OrderNumber", value);
            }
        }
	      
        [XmlAttribute("CompanyName")]
        [Bindable(true)]
        public string CompanyName 
	    {
		    get
		    {
			    return GetColumnValue<string>("CompanyName");
		    }
            set 
		    {
			    SetColumnValue("CompanyName", value);
            }
        }
	      
        [XmlAttribute("PortName")]
        [Bindable(true)]
        public string PortName 
	    {
		    get
		    {
			    return GetColumnValue<string>("PortName");
		    }
            set 
		    {
			    SetColumnValue("PortName", value);
            }
        }
	      
        [XmlAttribute("CountryName")]
        [Bindable(true)]
        public string CountryName 
	    {
		    get
		    {
			    return GetColumnValue<string>("CountryName");
		    }
            set 
		    {
			    SetColumnValue("CountryName", value);
            }
        }
	      
        [XmlAttribute("Joined")]
        [Bindable(true)]
        public string Joined 
	    {
		    get
		    {
			    return GetColumnValue<string>("Joined");
		    }
            set 
		    {
			    SetColumnValue("Joined", value);
            }
        }
	      
        [XmlAttribute("Ets")]
        [Bindable(true)]
        public DateTime? Ets 
	    {
		    get
		    {
			    return GetColumnValue<DateTime?>("ETS");
		    }
            set 
		    {
			    SetColumnValue("ETS", value);
            }
        }
	      
        [XmlAttribute("Insurance")]
        [Bindable(true)]
        public bool? Insurance 
	    {
		    get
		    {
			    return GetColumnValue<bool?>("Insurance");
		    }
            set 
		    {
			    SetColumnValue("Insurance", value);
            }
        }
	      
        [XmlAttribute("InsuredValue")]
        [Bindable(true)]
        public decimal? InsuredValue 
	    {
		    get
		    {
			    return GetColumnValue<decimal?>("InsuredValue");
		    }
            set 
		    {
			    SetColumnValue("InsuredValue", value);
            }
        }
	      
        [XmlAttribute("InvoiceNumber")]
        [Bindable(true)]
        public int? InvoiceNumber 
	    {
		    get
		    {
			    return GetColumnValue<int?>("InvoiceNumber");
		    }
            set 
		    {
			    SetColumnValue("InvoiceNumber", value);
            }
        }
	    
	    #endregion
    
	    #region Columns Struct
	    public struct Columns
	    {
		    
		    
            public static string OrderNumber = @"OrderNumber";
            
            public static string CompanyName = @"CompanyName";
            
            public static string PortName = @"PortName";
            
            public static string CountryName = @"CountryName";
            
            public static string Joined = @"Joined";
            
            public static string Ets = @"ETS";
            
            public static string Insurance = @"Insurance";
            
            public static string InsuredValue = @"InsuredValue";
            
            public static string InvoiceNumber = @"InvoiceNumber";
            
	    }
	    #endregion
	    
	    
	    #region IAbstractRecord Members
        public new CT GetColumnValue<CT>(string columnName) {
            return base.GetColumnValue<CT>(columnName);
        }
        public object GetColumnValue(string columnName) {
            return base.GetColumnValue<object>(columnName);
        }
        #endregion
	    
    }
}
