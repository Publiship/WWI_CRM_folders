using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DAL.Logistics{
    /// <summary>
    /// Strongly-typed collection for the VIEW1 class.
    /// </summary>
    [Serializable]
    public partial class VIEW1Collection : ReadOnlyList<VIEW1, VIEW1Collection>
    {        
        public VIEW1Collection() {}
    }
    /// <summary>
    /// This is  Read-only wrapper class for the VIEW1 view.
    /// </summary>
    [Serializable]
    public partial class VIEW1 : ReadOnlyRecord<VIEW1>, IReadOnlyRecord
    {
    
	    #region Default Settings
	    protected static void SetSQLProps() 
	    {
		    GetTableSchema();
	    }
	    #endregion
        #region Schema Accessor
	    public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                {
                    SetSQLProps();
                }
                return BaseSchema;
            }
        }
    	
        private static void GetTableSchema() 
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("VIEW1", TableType.View, DataService.GetInstance("WWIprov"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns
                
                TableSchema.TableColumn colvarEntryNumber = new TableSchema.TableColumn(schema);
                colvarEntryNumber.ColumnName = "EntryNumber";
                colvarEntryNumber.DataType = DbType.Int32;
                colvarEntryNumber.MaxLength = 0;
                colvarEntryNumber.AutoIncrement = false;
                colvarEntryNumber.IsNullable = false;
                colvarEntryNumber.IsPrimaryKey = false;
                colvarEntryNumber.IsForeignKey = false;
                colvarEntryNumber.IsReadOnly = false;
                
                schema.Columns.Add(colvarEntryNumber);
                
                TableSchema.TableColumn colvarInvoiceNumber = new TableSchema.TableColumn(schema);
                colvarInvoiceNumber.ColumnName = "InvoiceNumber";
                colvarInvoiceNumber.DataType = DbType.Int32;
                colvarInvoiceNumber.MaxLength = 0;
                colvarInvoiceNumber.AutoIncrement = false;
                colvarInvoiceNumber.IsNullable = true;
                colvarInvoiceNumber.IsPrimaryKey = false;
                colvarInvoiceNumber.IsForeignKey = false;
                colvarInvoiceNumber.IsReadOnly = false;
                
                schema.Columns.Add(colvarInvoiceNumber);
                
                TableSchema.TableColumn colvarChargeType = new TableSchema.TableColumn(schema);
                colvarChargeType.ColumnName = "ChargeType";
                colvarChargeType.DataType = DbType.Int32;
                colvarChargeType.MaxLength = 0;
                colvarChargeType.AutoIncrement = false;
                colvarChargeType.IsNullable = true;
                colvarChargeType.IsPrimaryKey = false;
                colvarChargeType.IsForeignKey = false;
                colvarChargeType.IsReadOnly = false;
                
                schema.Columns.Add(colvarChargeType);
                
                TableSchema.TableColumn colvarDetail = new TableSchema.TableColumn(schema);
                colvarDetail.ColumnName = "Detail";
                colvarDetail.DataType = DbType.String;
                colvarDetail.MaxLength = 50;
                colvarDetail.AutoIncrement = false;
                colvarDetail.IsNullable = true;
                colvarDetail.IsPrimaryKey = false;
                colvarDetail.IsForeignKey = false;
                colvarDetail.IsReadOnly = false;
                
                schema.Columns.Add(colvarDetail);
                
                TableSchema.TableColumn colvarAmount = new TableSchema.TableColumn(schema);
                colvarAmount.ColumnName = "Amount";
                colvarAmount.DataType = DbType.Single;
                colvarAmount.MaxLength = 0;
                colvarAmount.AutoIncrement = false;
                colvarAmount.IsNullable = true;
                colvarAmount.IsPrimaryKey = false;
                colvarAmount.IsForeignKey = false;
                colvarAmount.IsReadOnly = false;
                
                schema.Columns.Add(colvarAmount);
                
                TableSchema.TableColumn colvarVat = new TableSchema.TableColumn(schema);
                colvarVat.ColumnName = "VAT";
                colvarVat.DataType = DbType.Boolean;
                colvarVat.MaxLength = 0;
                colvarVat.AutoIncrement = false;
                colvarVat.IsNullable = false;
                colvarVat.IsPrimaryKey = false;
                colvarVat.IsForeignKey = false;
                colvarVat.IsReadOnly = false;
                
                schema.Columns.Add(colvarVat);
                
                TableSchema.TableColumn colvarVATAmount = new TableSchema.TableColumn(schema);
                colvarVATAmount.ColumnName = "VATAmount";
                colvarVATAmount.DataType = DbType.Single;
                colvarVATAmount.MaxLength = 0;
                colvarVATAmount.AutoIncrement = false;
                colvarVATAmount.IsNullable = true;
                colvarVATAmount.IsPrimaryKey = false;
                colvarVATAmount.IsForeignKey = false;
                colvarVATAmount.IsReadOnly = false;
                
                schema.Columns.Add(colvarVATAmount);
                
                
                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["WWIprov"].AddSchema("VIEW1",schema);
            }
        }
        #endregion
        
        #region Query Accessor
	    public static Query CreateQuery()
	    {
		    return new Query(Schema);
	    }
	    #endregion
	    
	    #region .ctors
	    public VIEW1()
	    {
            SetSQLProps();
            SetDefaults();
            MarkNew();
        }
        public VIEW1(bool useDatabaseDefaults)
	    {
		    SetSQLProps();
		    if(useDatabaseDefaults)
		    {
				ForceDefaults();
			}
			MarkNew();
	    }
	    
	    public VIEW1(object keyID)
	    {
		    SetSQLProps();
		    LoadByKey(keyID);
	    }
    	 
	    public VIEW1(string columnName, object columnValue)
        {
            SetSQLProps();
            LoadByParam(columnName,columnValue);
        }
        
	    #endregion
	    
	    #region Props
	    
          
        [XmlAttribute("EntryNumber")]
        [Bindable(true)]
        public int EntryNumber 
	    {
		    get
		    {
			    return GetColumnValue<int>("EntryNumber");
		    }
            set 
		    {
			    SetColumnValue("EntryNumber", value);
            }
        }
	      
        [XmlAttribute("InvoiceNumber")]
        [Bindable(true)]
        public int? InvoiceNumber 
	    {
		    get
		    {
			    return GetColumnValue<int?>("InvoiceNumber");
		    }
            set 
		    {
			    SetColumnValue("InvoiceNumber", value);
            }
        }
	      
        [XmlAttribute("ChargeType")]
        [Bindable(true)]
        public int? ChargeType 
	    {
		    get
		    {
			    return GetColumnValue<int?>("ChargeType");
		    }
            set 
		    {
			    SetColumnValue("ChargeType", value);
            }
        }
	      
        [XmlAttribute("Detail")]
        [Bindable(true)]
        public string Detail 
	    {
		    get
		    {
			    return GetColumnValue<string>("Detail");
		    }
            set 
		    {
			    SetColumnValue("Detail", value);
            }
        }
	      
        [XmlAttribute("Amount")]
        [Bindable(true)]
        public float? Amount 
	    {
		    get
		    {
			    return GetColumnValue<float?>("Amount");
		    }
            set 
		    {
			    SetColumnValue("Amount", value);
            }
        }
	      
        [XmlAttribute("Vat")]
        [Bindable(true)]
        public bool Vat 
	    {
		    get
		    {
			    return GetColumnValue<bool>("VAT");
		    }
            set 
		    {
			    SetColumnValue("VAT", value);
            }
        }
	      
        [XmlAttribute("VATAmount")]
        [Bindable(true)]
        public float? VATAmount 
	    {
		    get
		    {
			    return GetColumnValue<float?>("VATAmount");
		    }
            set 
		    {
			    SetColumnValue("VATAmount", value);
            }
        }
	    
	    #endregion
    
	    #region Columns Struct
	    public struct Columns
	    {
		    
		    
            public static string EntryNumber = @"EntryNumber";
            
            public static string InvoiceNumber = @"InvoiceNumber";
            
            public static string ChargeType = @"ChargeType";
            
            public static string Detail = @"Detail";
            
            public static string Amount = @"Amount";
            
            public static string Vat = @"VAT";
            
            public static string VATAmount = @"VATAmount";
            
	    }
	    #endregion
	    
	    
	    #region IAbstractRecord Members
        public new CT GetColumnValue<CT>(string columnName) {
            return base.GetColumnValue<CT>(columnName);
        }
        public object GetColumnValue(string columnName) {
            return base.GetColumnValue<object>(columnName);
        }
        #endregion
	    
    }
}
