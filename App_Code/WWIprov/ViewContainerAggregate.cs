using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DAL.Logistics{
    /// <summary>
    /// Strongly-typed collection for the ViewContainerAggregate class.
    /// </summary>
    [Serializable]
    public partial class ViewContainerAggregateCollection : ReadOnlyList<ViewContainerAggregate, ViewContainerAggregateCollection>
    {        
        public ViewContainerAggregateCollection() {}
    }
    /// <summary>
    /// This is  Read-only wrapper class for the view_container_aggregates view.
    /// </summary>
    [Serializable]
    public partial class ViewContainerAggregate : ReadOnlyRecord<ViewContainerAggregate>, IReadOnlyRecord
    {
    
	    #region Default Settings
	    protected static void SetSQLProps() 
	    {
		    GetTableSchema();
	    }
	    #endregion
        #region Schema Accessor
	    public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                {
                    SetSQLProps();
                }
                return BaseSchema;
            }
        }
    	
        private static void GetTableSchema() 
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("view_container_aggregates", TableType.View, DataService.GetInstance("WWIprov"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns
                
                TableSchema.TableColumn colvarContainerIdx = new TableSchema.TableColumn(schema);
                colvarContainerIdx.ColumnName = "ContainerIdx";
                colvarContainerIdx.DataType = DbType.Int32;
                colvarContainerIdx.MaxLength = 0;
                colvarContainerIdx.AutoIncrement = false;
                colvarContainerIdx.IsNullable = true;
                colvarContainerIdx.IsPrimaryKey = false;
                colvarContainerIdx.IsForeignKey = false;
                colvarContainerIdx.IsReadOnly = false;
                
                schema.Columns.Add(colvarContainerIdx);
                
                TableSchema.TableColumn colvarMinOrderNo = new TableSchema.TableColumn(schema);
                colvarMinOrderNo.ColumnName = "MinOrderNo";
                colvarMinOrderNo.DataType = DbType.Int32;
                colvarMinOrderNo.MaxLength = 0;
                colvarMinOrderNo.AutoIncrement = false;
                colvarMinOrderNo.IsNullable = true;
                colvarMinOrderNo.IsPrimaryKey = false;
                colvarMinOrderNo.IsForeignKey = false;
                colvarMinOrderNo.IsReadOnly = false;
                
                schema.Columns.Add(colvarMinOrderNo);
                
                TableSchema.TableColumn colvarOrderCount = new TableSchema.TableColumn(schema);
                colvarOrderCount.ColumnName = "OrderCount";
                colvarOrderCount.DataType = DbType.Int32;
                colvarOrderCount.MaxLength = 0;
                colvarOrderCount.AutoIncrement = false;
                colvarOrderCount.IsNullable = true;
                colvarOrderCount.IsPrimaryKey = false;
                colvarOrderCount.IsForeignKey = false;
                colvarOrderCount.IsReadOnly = false;
                
                schema.Columns.Add(colvarOrderCount);
                
                TableSchema.TableColumn colvarSumWeight = new TableSchema.TableColumn(schema);
                colvarSumWeight.ColumnName = "SumWeight";
                colvarSumWeight.DataType = DbType.Double;
                colvarSumWeight.MaxLength = 0;
                colvarSumWeight.AutoIncrement = false;
                colvarSumWeight.IsNullable = true;
                colvarSumWeight.IsPrimaryKey = false;
                colvarSumWeight.IsForeignKey = false;
                colvarSumWeight.IsReadOnly = false;
                
                schema.Columns.Add(colvarSumWeight);
                
                TableSchema.TableColumn colvarSumCbm = new TableSchema.TableColumn(schema);
                colvarSumCbm.ColumnName = "SumCbm";
                colvarSumCbm.DataType = DbType.Double;
                colvarSumCbm.MaxLength = 0;
                colvarSumCbm.AutoIncrement = false;
                colvarSumCbm.IsNullable = true;
                colvarSumCbm.IsPrimaryKey = false;
                colvarSumCbm.IsForeignKey = false;
                colvarSumCbm.IsReadOnly = false;
                
                schema.Columns.Add(colvarSumCbm);
                
                TableSchema.TableColumn colvarSumPackages = new TableSchema.TableColumn(schema);
                colvarSumPackages.ColumnName = "SumPackages";
                colvarSumPackages.DataType = DbType.Int32;
                colvarSumPackages.MaxLength = 0;
                colvarSumPackages.AutoIncrement = false;
                colvarSumPackages.IsNullable = true;
                colvarSumPackages.IsPrimaryKey = false;
                colvarSumPackages.IsForeignKey = false;
                colvarSumPackages.IsReadOnly = false;
                
                schema.Columns.Add(colvarSumPackages);
                
                TableSchema.TableColumn colvarContainerNumber = new TableSchema.TableColumn(schema);
                colvarContainerNumber.ColumnName = "ContainerNumber";
                colvarContainerNumber.DataType = DbType.String;
                colvarContainerNumber.MaxLength = 50;
                colvarContainerNumber.AutoIncrement = false;
                colvarContainerNumber.IsNullable = true;
                colvarContainerNumber.IsPrimaryKey = false;
                colvarContainerNumber.IsForeignKey = false;
                colvarContainerNumber.IsReadOnly = false;
                
                schema.Columns.Add(colvarContainerNumber);
                
                
                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["WWIprov"].AddSchema("view_container_aggregates",schema);
            }
        }
        #endregion
        
        #region Query Accessor
	    public static Query CreateQuery()
	    {
		    return new Query(Schema);
	    }
	    #endregion
	    
	    #region .ctors
	    public ViewContainerAggregate()
	    {
            SetSQLProps();
            SetDefaults();
            MarkNew();
        }
        public ViewContainerAggregate(bool useDatabaseDefaults)
	    {
		    SetSQLProps();
		    if(useDatabaseDefaults)
		    {
				ForceDefaults();
			}
			MarkNew();
	    }
	    
	    public ViewContainerAggregate(object keyID)
	    {
		    SetSQLProps();
		    LoadByKey(keyID);
	    }
    	 
	    public ViewContainerAggregate(string columnName, object columnValue)
        {
            SetSQLProps();
            LoadByParam(columnName,columnValue);
        }
        
	    #endregion
	    
	    #region Props
	    
          
        [XmlAttribute("ContainerIdx")]
        [Bindable(true)]
        public int? ContainerIdx 
	    {
		    get
		    {
			    return GetColumnValue<int?>("ContainerIdx");
		    }
            set 
		    {
			    SetColumnValue("ContainerIdx", value);
            }
        }
	      
        [XmlAttribute("MinOrderNo")]
        [Bindable(true)]
        public int? MinOrderNo 
	    {
		    get
		    {
			    return GetColumnValue<int?>("MinOrderNo");
		    }
            set 
		    {
			    SetColumnValue("MinOrderNo", value);
            }
        }
	      
        [XmlAttribute("OrderCount")]
        [Bindable(true)]
        public int? OrderCount 
	    {
		    get
		    {
			    return GetColumnValue<int?>("OrderCount");
		    }
            set 
		    {
			    SetColumnValue("OrderCount", value);
            }
        }
	      
        [XmlAttribute("SumWeight")]
        [Bindable(true)]
        public double? SumWeight 
	    {
		    get
		    {
			    return GetColumnValue<double?>("SumWeight");
		    }
            set 
		    {
			    SetColumnValue("SumWeight", value);
            }
        }
	      
        [XmlAttribute("SumCbm")]
        [Bindable(true)]
        public double? SumCbm 
	    {
		    get
		    {
			    return GetColumnValue<double?>("SumCbm");
		    }
            set 
		    {
			    SetColumnValue("SumCbm", value);
            }
        }
	      
        [XmlAttribute("SumPackages")]
        [Bindable(true)]
        public int? SumPackages 
	    {
		    get
		    {
			    return GetColumnValue<int?>("SumPackages");
		    }
            set 
		    {
			    SetColumnValue("SumPackages", value);
            }
        }
	      
        [XmlAttribute("ContainerNumber")]
        [Bindable(true)]
        public string ContainerNumber 
	    {
		    get
		    {
			    return GetColumnValue<string>("ContainerNumber");
		    }
            set 
		    {
			    SetColumnValue("ContainerNumber", value);
            }
        }
	    
	    #endregion
    
	    #region Columns Struct
	    public struct Columns
	    {
		    
		    
            public static string ContainerIdx = @"ContainerIdx";
            
            public static string MinOrderNo = @"MinOrderNo";
            
            public static string OrderCount = @"OrderCount";
            
            public static string SumWeight = @"SumWeight";
            
            public static string SumCbm = @"SumCbm";
            
            public static string SumPackages = @"SumPackages";
            
            public static string ContainerNumber = @"ContainerNumber";
            
	    }
	    #endregion
	    
	    
	    #region IAbstractRecord Members
        public new CT GetColumnValue<CT>(string columnName) {
            return base.GetColumnValue<CT>(columnName);
        }
        public object GetColumnValue(string columnName) {
            return base.GetColumnValue<object>(columnName);
        }
        #endregion
	    
    }
}
