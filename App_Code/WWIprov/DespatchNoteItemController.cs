using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DAL.Logistics
{
    /// <summary>
    /// Controller class for despatch_note_items
    /// </summary>
    [System.ComponentModel.DataObject]
    public partial class DespatchNoteItemController
    {
        // Preload our schema..
        DespatchNoteItem thisSchemaLoad = new DespatchNoteItem();
        private string userName = String.Empty;
        protected string UserName
        {
            get
            {
				if (userName.Length == 0) 
				{
    				if (System.Web.HttpContext.Current != null)
    				{
						userName=System.Web.HttpContext.Current.User.Identity.Name;
					}
					else
					{
						userName=System.Threading.Thread.CurrentPrincipal.Identity.Name;
					}
				}
				return userName;
            }
        }
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public DespatchNoteItemCollection FetchAll()
        {
            DespatchNoteItemCollection coll = new DespatchNoteItemCollection();
            Query qry = new Query(DespatchNoteItem.Schema);
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public DespatchNoteItemCollection FetchByID(object ItemId)
        {
            DespatchNoteItemCollection coll = new DespatchNoteItemCollection().Where("item_id", ItemId).Load();
            return coll;
        }
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
        public DespatchNoteItemCollection FetchByQuery(Query qry)
        {
            DespatchNoteItemCollection coll = new DespatchNoteItemCollection();
            coll.LoadAndCloseReader(qry.ExecuteReader()); 
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool Delete(object ItemId)
        {
            return (DespatchNoteItem.Delete(ItemId) == 1);
        }
        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public bool Destroy(object ItemId)
        {
            return (DespatchNoteItem.Destroy(ItemId) == 1);
        }
        
        
    	
	    /// <summary>
	    /// Inserts a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
	    public void Insert(int DespatchNoteId,string BuyersOrderNumber,string PrintersJobNumber,string PublishipRef,string Isbn,string Title,string Impression,int? TotalQty,int? FullPallets,int? UnitsFull,int? PartPallets,int? UnitsPart,int? ParcelCount,int? UnitsPerParcel,int? ParcelsPerLayer,int? OddsCount,decimal? Height,decimal? Width,decimal? Depth,decimal? UnitNetWeight,decimal? ParcelHeight,decimal? ParcelWidth,decimal? ParcelDepth,decimal? ParcelUnitgrossweight,byte[] DespatchItemTs)
	    {
		    DespatchNoteItem item = new DespatchNoteItem();
		    
            item.DespatchNoteId = DespatchNoteId;
            
            item.BuyersOrderNumber = BuyersOrderNumber;
            
            item.PrintersJobNumber = PrintersJobNumber;
            
            item.PublishipRef = PublishipRef;
            
            item.Isbn = Isbn;
            
            item.Title = Title;
            
            item.Impression = Impression;
            
            item.TotalQty = TotalQty;
            
            item.FullPallets = FullPallets;
            
            item.UnitsFull = UnitsFull;
            
            item.PartPallets = PartPallets;
            
            item.UnitsPart = UnitsPart;
            
            item.ParcelCount = ParcelCount;
            
            item.UnitsPerParcel = UnitsPerParcel;
            
            item.ParcelsPerLayer = ParcelsPerLayer;
            
            item.OddsCount = OddsCount;
            
            item.Height = Height;
            
            item.Width = Width;
            
            item.Depth = Depth;
            
            item.UnitNetWeight = UnitNetWeight;
            
            item.ParcelHeight = ParcelHeight;
            
            item.ParcelWidth = ParcelWidth;
            
            item.ParcelDepth = ParcelDepth;
            
            item.ParcelUnitgrossweight = ParcelUnitgrossweight;
            
            item.DespatchItemTs = DespatchItemTs;
            
	    
		    item.Save(UserName);
	    }
    	
	    /// <summary>
	    /// Updates a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
	    public void Update(int ItemId,int DespatchNoteId,string BuyersOrderNumber,string PrintersJobNumber,string PublishipRef,string Isbn,string Title,string Impression,int? TotalQty,int? FullPallets,int? UnitsFull,int? PartPallets,int? UnitsPart,int? ParcelCount,int? UnitsPerParcel,int? ParcelsPerLayer,int? OddsCount,decimal? Height,decimal? Width,decimal? Depth,decimal? UnitNetWeight,decimal? ParcelHeight,decimal? ParcelWidth,decimal? ParcelDepth,decimal? ParcelUnitgrossweight,byte[] DespatchItemTs)
	    {
		    DespatchNoteItem item = new DespatchNoteItem();
	        item.MarkOld();
	        item.IsLoaded = true;
		    
			item.ItemId = ItemId;
				
			item.DespatchNoteId = DespatchNoteId;
				
			item.BuyersOrderNumber = BuyersOrderNumber;
				
			item.PrintersJobNumber = PrintersJobNumber;
				
			item.PublishipRef = PublishipRef;
				
			item.Isbn = Isbn;
				
			item.Title = Title;
				
			item.Impression = Impression;
				
			item.TotalQty = TotalQty;
				
			item.FullPallets = FullPallets;
				
			item.UnitsFull = UnitsFull;
				
			item.PartPallets = PartPallets;
				
			item.UnitsPart = UnitsPart;
				
			item.ParcelCount = ParcelCount;
				
			item.UnitsPerParcel = UnitsPerParcel;
				
			item.ParcelsPerLayer = ParcelsPerLayer;
				
			item.OddsCount = OddsCount;
				
			item.Height = Height;
				
			item.Width = Width;
				
			item.Depth = Depth;
				
			item.UnitNetWeight = UnitNetWeight;
				
			item.ParcelHeight = ParcelHeight;
				
			item.ParcelWidth = ParcelWidth;
				
			item.ParcelDepth = ParcelDepth;
				
			item.ParcelUnitgrossweight = ParcelUnitgrossweight;
				
			item.DespatchItemTs = DespatchItemTs;
				
	        item.Save(UserName);
	    }
    }
}
