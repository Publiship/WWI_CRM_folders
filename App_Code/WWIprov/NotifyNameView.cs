using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DAL.Logistics{
    /// <summary>
    /// Strongly-typed collection for the NotifyNameView class.
    /// </summary>
    [Serializable]
    public partial class NotifyNameViewCollection : ReadOnlyList<NotifyNameView, NotifyNameViewCollection>
    {        
        public NotifyNameViewCollection() {}
    }
    /// <summary>
    /// This is  Read-only wrapper class for the NotifyNameView view.
    /// </summary>
    [Serializable]
    public partial class NotifyNameView : ReadOnlyRecord<NotifyNameView>, IReadOnlyRecord
    {
    
	    #region Default Settings
	    protected static void SetSQLProps() 
	    {
		    GetTableSchema();
	    }
	    #endregion
        #region Schema Accessor
	    public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                {
                    SetSQLProps();
                }
                return BaseSchema;
            }
        }
    	
        private static void GetTableSchema() 
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("NotifyNameView", TableType.View, DataService.GetInstance("WWIprov"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns
                
                TableSchema.TableColumn colvarCompanyID = new TableSchema.TableColumn(schema);
                colvarCompanyID.ColumnName = "CompanyID";
                colvarCompanyID.DataType = DbType.Int32;
                colvarCompanyID.MaxLength = 0;
                colvarCompanyID.AutoIncrement = false;
                colvarCompanyID.IsNullable = false;
                colvarCompanyID.IsPrimaryKey = false;
                colvarCompanyID.IsForeignKey = false;
                colvarCompanyID.IsReadOnly = false;
                
                schema.Columns.Add(colvarCompanyID);
                
                TableSchema.TableColumn colvarNotifyName = new TableSchema.TableColumn(schema);
                colvarNotifyName.ColumnName = "NotifyName";
                colvarNotifyName.DataType = DbType.String;
                colvarNotifyName.MaxLength = 50;
                colvarNotifyName.AutoIncrement = false;
                colvarNotifyName.IsNullable = true;
                colvarNotifyName.IsPrimaryKey = false;
                colvarNotifyName.IsForeignKey = false;
                colvarNotifyName.IsReadOnly = false;
                
                schema.Columns.Add(colvarNotifyName);
                
                TableSchema.TableColumn colvarNotifyAdd1 = new TableSchema.TableColumn(schema);
                colvarNotifyAdd1.ColumnName = "NotifyAdd1";
                colvarNotifyAdd1.DataType = DbType.String;
                colvarNotifyAdd1.MaxLength = 40;
                colvarNotifyAdd1.AutoIncrement = false;
                colvarNotifyAdd1.IsNullable = true;
                colvarNotifyAdd1.IsPrimaryKey = false;
                colvarNotifyAdd1.IsForeignKey = false;
                colvarNotifyAdd1.IsReadOnly = false;
                
                schema.Columns.Add(colvarNotifyAdd1);
                
                TableSchema.TableColumn colvarNotifyAdd2 = new TableSchema.TableColumn(schema);
                colvarNotifyAdd2.ColumnName = "NotifyAdd2";
                colvarNotifyAdd2.DataType = DbType.String;
                colvarNotifyAdd2.MaxLength = 40;
                colvarNotifyAdd2.AutoIncrement = false;
                colvarNotifyAdd2.IsNullable = true;
                colvarNotifyAdd2.IsPrimaryKey = false;
                colvarNotifyAdd2.IsForeignKey = false;
                colvarNotifyAdd2.IsReadOnly = false;
                
                schema.Columns.Add(colvarNotifyAdd2);
                
                TableSchema.TableColumn colvarNotifyAdd3 = new TableSchema.TableColumn(schema);
                colvarNotifyAdd3.ColumnName = "NotifyAdd3";
                colvarNotifyAdd3.DataType = DbType.String;
                colvarNotifyAdd3.MaxLength = 40;
                colvarNotifyAdd3.AutoIncrement = false;
                colvarNotifyAdd3.IsNullable = true;
                colvarNotifyAdd3.IsPrimaryKey = false;
                colvarNotifyAdd3.IsForeignKey = false;
                colvarNotifyAdd3.IsReadOnly = false;
                
                schema.Columns.Add(colvarNotifyAdd3);
                
                TableSchema.TableColumn colvarNotifyCountry = new TableSchema.TableColumn(schema);
                colvarNotifyCountry.ColumnName = "NotifyCountry";
                colvarNotifyCountry.DataType = DbType.String;
                colvarNotifyCountry.MaxLength = 50;
                colvarNotifyCountry.AutoIncrement = false;
                colvarNotifyCountry.IsNullable = false;
                colvarNotifyCountry.IsPrimaryKey = false;
                colvarNotifyCountry.IsForeignKey = false;
                colvarNotifyCountry.IsReadOnly = false;
                
                schema.Columns.Add(colvarNotifyCountry);
                
                TableSchema.TableColumn colvarNotifyTel = new TableSchema.TableColumn(schema);
                colvarNotifyTel.ColumnName = "NotifyTel";
                colvarNotifyTel.DataType = DbType.String;
                colvarNotifyTel.MaxLength = 20;
                colvarNotifyTel.AutoIncrement = false;
                colvarNotifyTel.IsNullable = true;
                colvarNotifyTel.IsPrimaryKey = false;
                colvarNotifyTel.IsForeignKey = false;
                colvarNotifyTel.IsReadOnly = false;
                
                schema.Columns.Add(colvarNotifyTel);
                
                TableSchema.TableColumn colvarConsignee = new TableSchema.TableColumn(schema);
                colvarConsignee.ColumnName = "Consignee";
                colvarConsignee.DataType = DbType.Boolean;
                colvarConsignee.MaxLength = 0;
                colvarConsignee.AutoIncrement = false;
                colvarConsignee.IsNullable = true;
                colvarConsignee.IsPrimaryKey = false;
                colvarConsignee.IsForeignKey = false;
                colvarConsignee.IsReadOnly = false;
                
                schema.Columns.Add(colvarConsignee);
                
                
                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["WWIprov"].AddSchema("NotifyNameView",schema);
            }
        }
        #endregion
        
        #region Query Accessor
	    public static Query CreateQuery()
	    {
		    return new Query(Schema);
	    }
	    #endregion
	    
	    #region .ctors
	    public NotifyNameView()
	    {
            SetSQLProps();
            SetDefaults();
            MarkNew();
        }
        public NotifyNameView(bool useDatabaseDefaults)
	    {
		    SetSQLProps();
		    if(useDatabaseDefaults)
		    {
				ForceDefaults();
			}
			MarkNew();
	    }
	    
	    public NotifyNameView(object keyID)
	    {
		    SetSQLProps();
		    LoadByKey(keyID);
	    }
    	 
	    public NotifyNameView(string columnName, object columnValue)
        {
            SetSQLProps();
            LoadByParam(columnName,columnValue);
        }
        
	    #endregion
	    
	    #region Props
	    
          
        [XmlAttribute("CompanyID")]
        [Bindable(true)]
        public int CompanyID 
	    {
		    get
		    {
			    return GetColumnValue<int>("CompanyID");
		    }
            set 
		    {
			    SetColumnValue("CompanyID", value);
            }
        }
	      
        [XmlAttribute("NotifyName")]
        [Bindable(true)]
        public string NotifyName 
	    {
		    get
		    {
			    return GetColumnValue<string>("NotifyName");
		    }
            set 
		    {
			    SetColumnValue("NotifyName", value);
            }
        }
	      
        [XmlAttribute("NotifyAdd1")]
        [Bindable(true)]
        public string NotifyAdd1 
	    {
		    get
		    {
			    return GetColumnValue<string>("NotifyAdd1");
		    }
            set 
		    {
			    SetColumnValue("NotifyAdd1", value);
            }
        }
	      
        [XmlAttribute("NotifyAdd2")]
        [Bindable(true)]
        public string NotifyAdd2 
	    {
		    get
		    {
			    return GetColumnValue<string>("NotifyAdd2");
		    }
            set 
		    {
			    SetColumnValue("NotifyAdd2", value);
            }
        }
	      
        [XmlAttribute("NotifyAdd3")]
        [Bindable(true)]
        public string NotifyAdd3 
	    {
		    get
		    {
			    return GetColumnValue<string>("NotifyAdd3");
		    }
            set 
		    {
			    SetColumnValue("NotifyAdd3", value);
            }
        }
	      
        [XmlAttribute("NotifyCountry")]
        [Bindable(true)]
        public string NotifyCountry 
	    {
		    get
		    {
			    return GetColumnValue<string>("NotifyCountry");
		    }
            set 
		    {
			    SetColumnValue("NotifyCountry", value);
            }
        }
	      
        [XmlAttribute("NotifyTel")]
        [Bindable(true)]
        public string NotifyTel 
	    {
		    get
		    {
			    return GetColumnValue<string>("NotifyTel");
		    }
            set 
		    {
			    SetColumnValue("NotifyTel", value);
            }
        }
	      
        [XmlAttribute("Consignee")]
        [Bindable(true)]
        public bool? Consignee 
	    {
		    get
		    {
			    return GetColumnValue<bool?>("Consignee");
		    }
            set 
		    {
			    SetColumnValue("Consignee", value);
            }
        }
	    
	    #endregion
    
	    #region Columns Struct
	    public struct Columns
	    {
		    
		    
            public static string CompanyID = @"CompanyID";
            
            public static string NotifyName = @"NotifyName";
            
            public static string NotifyAdd1 = @"NotifyAdd1";
            
            public static string NotifyAdd2 = @"NotifyAdd2";
            
            public static string NotifyAdd3 = @"NotifyAdd3";
            
            public static string NotifyCountry = @"NotifyCountry";
            
            public static string NotifyTel = @"NotifyTel";
            
            public static string Consignee = @"Consignee";
            
	    }
	    #endregion
	    
	    
	    #region IAbstractRecord Members
        public new CT GetColumnValue<CT>(string columnName) {
            return base.GetColumnValue<CT>(columnName);
        }
        public object GetColumnValue(string columnName) {
            return base.GetColumnValue<object>(columnName);
        }
        #endregion
	    
    }
}
