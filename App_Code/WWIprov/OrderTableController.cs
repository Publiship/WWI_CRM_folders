using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DAL.Logistics
{
    /// <summary>
    /// Controller class for OrderTable
    /// </summary>
    [System.ComponentModel.DataObject]
    public partial class OrderTableController
    {
        // Preload our schema..
        OrderTable thisSchemaLoad = new OrderTable();
        private string userName = String.Empty;
        protected string UserName
        {
            get
            {
				if (userName.Length == 0) 
				{
    				if (System.Web.HttpContext.Current != null)
    				{
						userName=System.Web.HttpContext.Current.User.Identity.Name;
					}
					else
					{
						userName=System.Threading.Thread.CurrentPrincipal.Identity.Name;
					}
				}
				return userName;
            }
        }
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public OrderTableCollection FetchAll()
        {
            OrderTableCollection coll = new OrderTableCollection();
            Query qry = new Query(OrderTable.Schema);
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public OrderTableCollection FetchByID(object OrderID)
        {
            OrderTableCollection coll = new OrderTableCollection().Where("OrderID", OrderID).Load();
            return coll;
        }
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
        public OrderTableCollection FetchByQuery(Query qry)
        {
            OrderTableCollection coll = new OrderTableCollection();
            coll.LoadAndCloseReader(qry.ExecuteReader()); 
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool Delete(object OrderID)
        {
            return (OrderTable.Delete(OrderID) == 1);
        }
        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public bool Destroy(object OrderID)
        {
            return (OrderTable.Destroy(OrderID) == 1);
        }
        
        
    	
	    /// <summary>
	    /// Inserts a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
	    public void Insert(int? OrderNumber,string OfficeIndicator,bool PublishipOrder,DateTime? DateOrderCreated,bool HotJob,int? CompanyID,int? ConsigneeID,int? NotifyPartyID,int? AgentAtOriginID,int? AgentAtDestinationID,int? PrinterID,int? ClearingAgentID,int? OnCarriageID,int? OrderControllerID,int? OperationsControllerID,int? OriginPortControllerID,int? DestinationPortControllerID,string CustomersRef,int? ContactID,DateTime? ExWorksDate,DateTime? EWDLastUpdated,DateTime? CargoReady,DateTime? WarehouseDate,bool? OnTime,DateTime? BookingReceived,int? OriginPointID,int? PortID,int? DestinationPortID,int? FinalDestinationID,int? CountryID,string OldVesselName,int? DestinationCountryID,int? VesselID,DateTime? VesselLastUpdated,DateTime? Ets,DateTime? Eta,string PearsonDivCode,string PearsonSSRRef,string HouseBLNUmber,bool HouseBLAdded,bool ShippedOnBoard,float? EstCopies,DateTime? CopiesLastUpdated,int? EstCartons,int? EstPallets,int? EstWeight,float? EstVolume,int? Palletise,int? PackageTypeID,int? NumberOfPackages,int? ActualCartons,int? ActualPallets,int? Jackets,int? ActualWeight,DateTime? WeightLastUpdated,float? ActualVolume,DateTime? VolumeLastUpdated,bool? Fcllcl,int? Est20,int? Est40,int? EstLCLWt,float? EstLCLVol,int? No20,int? No40,int? LCLWt,float? LCLVol,string Remarks,string RemarksToCustomer,int? QuoteRef,string Sellingrate,string SellingrateAgent,bool DocsRcdAndApproved,DateTime? DocsApprovedDate,DateTime? JobClosureDate,bool JobClosed,bool ExpressBL,bool FumigationCert,bool GSPCert,bool COfO,bool PackingDeclaration,string OtherDocsRequired,string Incoterms,float? PricePerCopy,string Customs,string Currency,int? InvoiceAddresseeID,int? ConsolNumber,float? UnitPricePerCopy,bool OnHold,string ContainerInfo,DateTime? Cleared,float? HodderPricePerCopy,bool FileCoverPrintedOrigin,bool FileCoverPrintedDest,string ClientsTerms,string OriginTrucking,string OrignTHC,string OriginDocs,string Freight,string DestTHC,string DestPalletisation,string CustomsClearance,string DeliveryCharges,string CoLoaderComments,string Pdcid,string HCCompositeRef,decimal? HCInvoiceAmount,string Impression,decimal? InsuranceValue,int? InvoiceNumber,DateTime? InvoiceDate,DateTime? CancelRequestRcd,bool? OrderCancelled,DateTime? CancelDate,int? CancelledBy,int? InvoiceTo,decimal? HCInvoiceAmount2,bool? OrderAckSent,int? CargoUpdateId,int? QuoteId,int? DocumentFolder,double? InsuranceValues,byte[] Ts)
	    {
		    OrderTable item = new OrderTable();
		    
            item.OrderNumber = OrderNumber;
            
            item.OfficeIndicator = OfficeIndicator;
            
            item.PublishipOrder = PublishipOrder;
            
            item.DateOrderCreated = DateOrderCreated;
            
            item.HotJob = HotJob;
            
            item.CompanyID = CompanyID;
            
            item.ConsigneeID = ConsigneeID;
            
            item.NotifyPartyID = NotifyPartyID;
            
            item.AgentAtOriginID = AgentAtOriginID;
            
            item.AgentAtDestinationID = AgentAtDestinationID;
            
            item.PrinterID = PrinterID;
            
            item.ClearingAgentID = ClearingAgentID;
            
            item.OnCarriageID = OnCarriageID;
            
            item.OrderControllerID = OrderControllerID;
            
            item.OperationsControllerID = OperationsControllerID;
            
            item.OriginPortControllerID = OriginPortControllerID;
            
            item.DestinationPortControllerID = DestinationPortControllerID;
            
            item.CustomersRef = CustomersRef;
            
            item.ContactID = ContactID;
            
            item.ExWorksDate = ExWorksDate;
            
            item.EWDLastUpdated = EWDLastUpdated;
            
            item.CargoReady = CargoReady;
            
            item.WarehouseDate = WarehouseDate;
            
            item.OnTime = OnTime;
            
            item.BookingReceived = BookingReceived;
            
            item.OriginPointID = OriginPointID;
            
            item.PortID = PortID;
            
            item.DestinationPortID = DestinationPortID;
            
            item.FinalDestinationID = FinalDestinationID;
            
            item.CountryID = CountryID;
            
            item.OldVesselName = OldVesselName;
            
            item.DestinationCountryID = DestinationCountryID;
            
            item.VesselID = VesselID;
            
            item.VesselLastUpdated = VesselLastUpdated;
            
            item.Ets = Ets;
            
            item.Eta = Eta;
            
            item.PearsonDivCode = PearsonDivCode;
            
            item.PearsonSSRRef = PearsonSSRRef;
            
            item.HouseBLNUmber = HouseBLNUmber;
            
            item.HouseBLAdded = HouseBLAdded;
            
            item.ShippedOnBoard = ShippedOnBoard;
            
            item.EstCopies = EstCopies;
            
            item.CopiesLastUpdated = CopiesLastUpdated;
            
            item.EstCartons = EstCartons;
            
            item.EstPallets = EstPallets;
            
            item.EstWeight = EstWeight;
            
            item.EstVolume = EstVolume;
            
            item.Palletise = Palletise;
            
            item.PackageTypeID = PackageTypeID;
            
            item.NumberOfPackages = NumberOfPackages;
            
            item.ActualCartons = ActualCartons;
            
            item.ActualPallets = ActualPallets;
            
            item.Jackets = Jackets;
            
            item.ActualWeight = ActualWeight;
            
            item.WeightLastUpdated = WeightLastUpdated;
            
            item.ActualVolume = ActualVolume;
            
            item.VolumeLastUpdated = VolumeLastUpdated;
            
            item.Fcllcl = Fcllcl;
            
            item.Est20 = Est20;
            
            item.Est40 = Est40;
            
            item.EstLCLWt = EstLCLWt;
            
            item.EstLCLVol = EstLCLVol;
            
            item.No20 = No20;
            
            item.No40 = No40;
            
            item.LCLWt = LCLWt;
            
            item.LCLVol = LCLVol;
            
            item.Remarks = Remarks;
            
            item.RemarksToCustomer = RemarksToCustomer;
            
            item.QuoteRef = QuoteRef;
            
            item.Sellingrate = Sellingrate;
            
            item.SellingrateAgent = SellingrateAgent;
            
            item.DocsRcdAndApproved = DocsRcdAndApproved;
            
            item.DocsApprovedDate = DocsApprovedDate;
            
            item.JobClosureDate = JobClosureDate;
            
            item.JobClosed = JobClosed;
            
            item.ExpressBL = ExpressBL;
            
            item.FumigationCert = FumigationCert;
            
            item.GSPCert = GSPCert;
            
            item.COfO = COfO;
            
            item.PackingDeclaration = PackingDeclaration;
            
            item.OtherDocsRequired = OtherDocsRequired;
            
            item.Incoterms = Incoterms;
            
            item.PricePerCopy = PricePerCopy;
            
            item.Customs = Customs;
            
            item.Currency = Currency;
            
            item.InvoiceAddresseeID = InvoiceAddresseeID;
            
            item.ConsolNumber = ConsolNumber;
            
            item.UnitPricePerCopy = UnitPricePerCopy;
            
            item.OnHold = OnHold;
            
            item.ContainerInfo = ContainerInfo;
            
            item.Cleared = Cleared;
            
            item.HodderPricePerCopy = HodderPricePerCopy;
            
            item.FileCoverPrintedOrigin = FileCoverPrintedOrigin;
            
            item.FileCoverPrintedDest = FileCoverPrintedDest;
            
            item.ClientsTerms = ClientsTerms;
            
            item.OriginTrucking = OriginTrucking;
            
            item.OrignTHC = OrignTHC;
            
            item.OriginDocs = OriginDocs;
            
            item.Freight = Freight;
            
            item.DestTHC = DestTHC;
            
            item.DestPalletisation = DestPalletisation;
            
            item.CustomsClearance = CustomsClearance;
            
            item.DeliveryCharges = DeliveryCharges;
            
            item.CoLoaderComments = CoLoaderComments;
            
            item.Pdcid = Pdcid;
            
            item.HCCompositeRef = HCCompositeRef;
            
            item.HCInvoiceAmount = HCInvoiceAmount;
            
            item.Impression = Impression;
            
            item.InsuranceValue = InsuranceValue;
            
            item.InvoiceNumber = InvoiceNumber;
            
            item.InvoiceDate = InvoiceDate;
            
            item.CancelRequestRcd = CancelRequestRcd;
            
            item.OrderCancelled = OrderCancelled;
            
            item.CancelDate = CancelDate;
            
            item.CancelledBy = CancelledBy;
            
            item.InvoiceTo = InvoiceTo;
            
            item.HCInvoiceAmount2 = HCInvoiceAmount2;
            
            item.OrderAckSent = OrderAckSent;
            
            item.CargoUpdateId = CargoUpdateId;
            
            item.QuoteId = QuoteId;
            
            item.DocumentFolder = DocumentFolder;
            
            item.InsuranceValues = InsuranceValues;
            
            item.Ts = Ts;
            
	    
		    item.Save(UserName);
	    }
    	
	    /// <summary>
	    /// Updates a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
	    public void Update(int OrderID,int? OrderNumber,string OfficeIndicator,bool PublishipOrder,DateTime? DateOrderCreated,bool HotJob,int? CompanyID,int? ConsigneeID,int? NotifyPartyID,int? AgentAtOriginID,int? AgentAtDestinationID,int? PrinterID,int? ClearingAgentID,int? OnCarriageID,int? OrderControllerID,int? OperationsControllerID,int? OriginPortControllerID,int? DestinationPortControllerID,string CustomersRef,int? ContactID,DateTime? ExWorksDate,DateTime? EWDLastUpdated,DateTime? CargoReady,DateTime? WarehouseDate,bool? OnTime,DateTime? BookingReceived,int? OriginPointID,int? PortID,int? DestinationPortID,int? FinalDestinationID,int? CountryID,string OldVesselName,int? DestinationCountryID,int? VesselID,DateTime? VesselLastUpdated,DateTime? Ets,DateTime? Eta,string PearsonDivCode,string PearsonSSRRef,string HouseBLNUmber,bool HouseBLAdded,bool ShippedOnBoard,float? EstCopies,DateTime? CopiesLastUpdated,int? EstCartons,int? EstPallets,int? EstWeight,float? EstVolume,int? Palletise,int? PackageTypeID,int? NumberOfPackages,int? ActualCartons,int? ActualPallets,int? Jackets,int? ActualWeight,DateTime? WeightLastUpdated,float? ActualVolume,DateTime? VolumeLastUpdated,bool? Fcllcl,int? Est20,int? Est40,int? EstLCLWt,float? EstLCLVol,int? No20,int? No40,int? LCLWt,float? LCLVol,string Remarks,string RemarksToCustomer,int? QuoteRef,string Sellingrate,string SellingrateAgent,bool DocsRcdAndApproved,DateTime? DocsApprovedDate,DateTime? JobClosureDate,bool JobClosed,bool ExpressBL,bool FumigationCert,bool GSPCert,bool COfO,bool PackingDeclaration,string OtherDocsRequired,string Incoterms,float? PricePerCopy,string Customs,string Currency,int? InvoiceAddresseeID,int? ConsolNumber,float? UnitPricePerCopy,bool OnHold,string ContainerInfo,DateTime? Cleared,float? HodderPricePerCopy,bool FileCoverPrintedOrigin,bool FileCoverPrintedDest,string ClientsTerms,string OriginTrucking,string OrignTHC,string OriginDocs,string Freight,string DestTHC,string DestPalletisation,string CustomsClearance,string DeliveryCharges,string CoLoaderComments,string Pdcid,string HCCompositeRef,decimal? HCInvoiceAmount,string Impression,decimal? InsuranceValue,int? InvoiceNumber,DateTime? InvoiceDate,DateTime? CancelRequestRcd,bool? OrderCancelled,DateTime? CancelDate,int? CancelledBy,int? InvoiceTo,decimal? HCInvoiceAmount2,bool? OrderAckSent,int? CargoUpdateId,int? QuoteId,int? DocumentFolder,double? InsuranceValues,byte[] Ts)
	    {
		    OrderTable item = new OrderTable();
	        item.MarkOld();
	        item.IsLoaded = true;
		    
			item.OrderID = OrderID;
				
			item.OrderNumber = OrderNumber;
				
			item.OfficeIndicator = OfficeIndicator;
				
			item.PublishipOrder = PublishipOrder;
				
			item.DateOrderCreated = DateOrderCreated;
				
			item.HotJob = HotJob;
				
			item.CompanyID = CompanyID;
				
			item.ConsigneeID = ConsigneeID;
				
			item.NotifyPartyID = NotifyPartyID;
				
			item.AgentAtOriginID = AgentAtOriginID;
				
			item.AgentAtDestinationID = AgentAtDestinationID;
				
			item.PrinterID = PrinterID;
				
			item.ClearingAgentID = ClearingAgentID;
				
			item.OnCarriageID = OnCarriageID;
				
			item.OrderControllerID = OrderControllerID;
				
			item.OperationsControllerID = OperationsControllerID;
				
			item.OriginPortControllerID = OriginPortControllerID;
				
			item.DestinationPortControllerID = DestinationPortControllerID;
				
			item.CustomersRef = CustomersRef;
				
			item.ContactID = ContactID;
				
			item.ExWorksDate = ExWorksDate;
				
			item.EWDLastUpdated = EWDLastUpdated;
				
			item.CargoReady = CargoReady;
				
			item.WarehouseDate = WarehouseDate;
				
			item.OnTime = OnTime;
				
			item.BookingReceived = BookingReceived;
				
			item.OriginPointID = OriginPointID;
				
			item.PortID = PortID;
				
			item.DestinationPortID = DestinationPortID;
				
			item.FinalDestinationID = FinalDestinationID;
				
			item.CountryID = CountryID;
				
			item.OldVesselName = OldVesselName;
				
			item.DestinationCountryID = DestinationCountryID;
				
			item.VesselID = VesselID;
				
			item.VesselLastUpdated = VesselLastUpdated;
				
			item.Ets = Ets;
				
			item.Eta = Eta;
				
			item.PearsonDivCode = PearsonDivCode;
				
			item.PearsonSSRRef = PearsonSSRRef;
				
			item.HouseBLNUmber = HouseBLNUmber;
				
			item.HouseBLAdded = HouseBLAdded;
				
			item.ShippedOnBoard = ShippedOnBoard;
				
			item.EstCopies = EstCopies;
				
			item.CopiesLastUpdated = CopiesLastUpdated;
				
			item.EstCartons = EstCartons;
				
			item.EstPallets = EstPallets;
				
			item.EstWeight = EstWeight;
				
			item.EstVolume = EstVolume;
				
			item.Palletise = Palletise;
				
			item.PackageTypeID = PackageTypeID;
				
			item.NumberOfPackages = NumberOfPackages;
				
			item.ActualCartons = ActualCartons;
				
			item.ActualPallets = ActualPallets;
				
			item.Jackets = Jackets;
				
			item.ActualWeight = ActualWeight;
				
			item.WeightLastUpdated = WeightLastUpdated;
				
			item.ActualVolume = ActualVolume;
				
			item.VolumeLastUpdated = VolumeLastUpdated;
				
			item.Fcllcl = Fcllcl;
				
			item.Est20 = Est20;
				
			item.Est40 = Est40;
				
			item.EstLCLWt = EstLCLWt;
				
			item.EstLCLVol = EstLCLVol;
				
			item.No20 = No20;
				
			item.No40 = No40;
				
			item.LCLWt = LCLWt;
				
			item.LCLVol = LCLVol;
				
			item.Remarks = Remarks;
				
			item.RemarksToCustomer = RemarksToCustomer;
				
			item.QuoteRef = QuoteRef;
				
			item.Sellingrate = Sellingrate;
				
			item.SellingrateAgent = SellingrateAgent;
				
			item.DocsRcdAndApproved = DocsRcdAndApproved;
				
			item.DocsApprovedDate = DocsApprovedDate;
				
			item.JobClosureDate = JobClosureDate;
				
			item.JobClosed = JobClosed;
				
			item.ExpressBL = ExpressBL;
				
			item.FumigationCert = FumigationCert;
				
			item.GSPCert = GSPCert;
				
			item.COfO = COfO;
				
			item.PackingDeclaration = PackingDeclaration;
				
			item.OtherDocsRequired = OtherDocsRequired;
				
			item.Incoterms = Incoterms;
				
			item.PricePerCopy = PricePerCopy;
				
			item.Customs = Customs;
				
			item.Currency = Currency;
				
			item.InvoiceAddresseeID = InvoiceAddresseeID;
				
			item.ConsolNumber = ConsolNumber;
				
			item.UnitPricePerCopy = UnitPricePerCopy;
				
			item.OnHold = OnHold;
				
			item.ContainerInfo = ContainerInfo;
				
			item.Cleared = Cleared;
				
			item.HodderPricePerCopy = HodderPricePerCopy;
				
			item.FileCoverPrintedOrigin = FileCoverPrintedOrigin;
				
			item.FileCoverPrintedDest = FileCoverPrintedDest;
				
			item.ClientsTerms = ClientsTerms;
				
			item.OriginTrucking = OriginTrucking;
				
			item.OrignTHC = OrignTHC;
				
			item.OriginDocs = OriginDocs;
				
			item.Freight = Freight;
				
			item.DestTHC = DestTHC;
				
			item.DestPalletisation = DestPalletisation;
				
			item.CustomsClearance = CustomsClearance;
				
			item.DeliveryCharges = DeliveryCharges;
				
			item.CoLoaderComments = CoLoaderComments;
				
			item.Pdcid = Pdcid;
				
			item.HCCompositeRef = HCCompositeRef;
				
			item.HCInvoiceAmount = HCInvoiceAmount;
				
			item.Impression = Impression;
				
			item.InsuranceValue = InsuranceValue;
				
			item.InvoiceNumber = InvoiceNumber;
				
			item.InvoiceDate = InvoiceDate;
				
			item.CancelRequestRcd = CancelRequestRcd;
				
			item.OrderCancelled = OrderCancelled;
				
			item.CancelDate = CancelDate;
				
			item.CancelledBy = CancelledBy;
				
			item.InvoiceTo = InvoiceTo;
				
			item.HCInvoiceAmount2 = HCInvoiceAmount2;
				
			item.OrderAckSent = OrderAckSent;
				
			item.CargoUpdateId = CargoUpdateId;
				
			item.QuoteId = QuoteId;
				
			item.DocumentFolder = DocumentFolder;
				
			item.InsuranceValues = InsuranceValues;
				
			item.Ts = Ts;
				
	        item.Save(UserName);
	    }
    }
}
