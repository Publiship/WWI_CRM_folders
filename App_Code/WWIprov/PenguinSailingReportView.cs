using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DAL.Logistics{
    /// <summary>
    /// Strongly-typed collection for the PenguinSailingReportView class.
    /// </summary>
    [Serializable]
    public partial class PenguinSailingReportViewCollection : ReadOnlyList<PenguinSailingReportView, PenguinSailingReportViewCollection>
    {        
        public PenguinSailingReportViewCollection() {}
    }
    /// <summary>
    /// This is  Read-only wrapper class for the PenguinSailingReportView view.
    /// </summary>
    [Serializable]
    public partial class PenguinSailingReportView : ReadOnlyRecord<PenguinSailingReportView>, IReadOnlyRecord
    {
    
	    #region Default Settings
	    protected static void SetSQLProps() 
	    {
		    GetTableSchema();
	    }
	    #endregion
        #region Schema Accessor
	    public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                {
                    SetSQLProps();
                }
                return BaseSchema;
            }
        }
    	
        private static void GetTableSchema() 
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("PenguinSailingReportView", TableType.View, DataService.GetInstance("WWIprov"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns
                
                TableSchema.TableColumn colvarOrderNumber = new TableSchema.TableColumn(schema);
                colvarOrderNumber.ColumnName = "OrderNumber";
                colvarOrderNumber.DataType = DbType.Int32;
                colvarOrderNumber.MaxLength = 0;
                colvarOrderNumber.AutoIncrement = false;
                colvarOrderNumber.IsNullable = true;
                colvarOrderNumber.IsPrimaryKey = false;
                colvarOrderNumber.IsForeignKey = false;
                colvarOrderNumber.IsReadOnly = false;
                
                schema.Columns.Add(colvarOrderNumber);
                
                TableSchema.TableColumn colvarClient = new TableSchema.TableColumn(schema);
                colvarClient.ColumnName = "Client";
                colvarClient.DataType = DbType.String;
                colvarClient.MaxLength = 50;
                colvarClient.AutoIncrement = false;
                colvarClient.IsNullable = true;
                colvarClient.IsPrimaryKey = false;
                colvarClient.IsForeignKey = false;
                colvarClient.IsReadOnly = false;
                
                schema.Columns.Add(colvarClient);
                
                TableSchema.TableColumn colvarConsignee = new TableSchema.TableColumn(schema);
                colvarConsignee.ColumnName = "Consignee";
                colvarConsignee.DataType = DbType.String;
                colvarConsignee.MaxLength = 50;
                colvarConsignee.AutoIncrement = false;
                colvarConsignee.IsNullable = true;
                colvarConsignee.IsPrimaryKey = false;
                colvarConsignee.IsForeignKey = false;
                colvarConsignee.IsReadOnly = false;
                
                schema.Columns.Add(colvarConsignee);
                
                TableSchema.TableColumn colvarPrinter = new TableSchema.TableColumn(schema);
                colvarPrinter.ColumnName = "Printer";
                colvarPrinter.DataType = DbType.String;
                colvarPrinter.MaxLength = 50;
                colvarPrinter.AutoIncrement = false;
                colvarPrinter.IsNullable = true;
                colvarPrinter.IsPrimaryKey = false;
                colvarPrinter.IsForeignKey = false;
                colvarPrinter.IsReadOnly = false;
                
                schema.Columns.Add(colvarPrinter);
                
                TableSchema.TableColumn colvarExWorksDate = new TableSchema.TableColumn(schema);
                colvarExWorksDate.ColumnName = "ExWorksDate";
                colvarExWorksDate.DataType = DbType.DateTime;
                colvarExWorksDate.MaxLength = 0;
                colvarExWorksDate.AutoIncrement = false;
                colvarExWorksDate.IsNullable = true;
                colvarExWorksDate.IsPrimaryKey = false;
                colvarExWorksDate.IsForeignKey = false;
                colvarExWorksDate.IsReadOnly = false;
                
                schema.Columns.Add(colvarExWorksDate);
                
                TableSchema.TableColumn colvarContactName = new TableSchema.TableColumn(schema);
                colvarContactName.ColumnName = "ContactName";
                colvarContactName.DataType = DbType.String;
                colvarContactName.MaxLength = 50;
                colvarContactName.AutoIncrement = false;
                colvarContactName.IsNullable = true;
                colvarContactName.IsPrimaryKey = false;
                colvarContactName.IsForeignKey = false;
                colvarContactName.IsReadOnly = false;
                
                schema.Columns.Add(colvarContactName);
                
                TableSchema.TableColumn colvarCustomersRef = new TableSchema.TableColumn(schema);
                colvarCustomersRef.ColumnName = "CustomersRef";
                colvarCustomersRef.DataType = DbType.String;
                colvarCustomersRef.MaxLength = 20;
                colvarCustomersRef.AutoIncrement = false;
                colvarCustomersRef.IsNullable = true;
                colvarCustomersRef.IsPrimaryKey = false;
                colvarCustomersRef.IsForeignKey = false;
                colvarCustomersRef.IsReadOnly = false;
                
                schema.Columns.Add(colvarCustomersRef);
                
                TableSchema.TableColumn colvarEts = new TableSchema.TableColumn(schema);
                colvarEts.ColumnName = "ETS";
                colvarEts.DataType = DbType.DateTime;
                colvarEts.MaxLength = 0;
                colvarEts.AutoIncrement = false;
                colvarEts.IsNullable = true;
                colvarEts.IsPrimaryKey = false;
                colvarEts.IsForeignKey = false;
                colvarEts.IsReadOnly = false;
                
                schema.Columns.Add(colvarEts);
                
                TableSchema.TableColumn colvarEta = new TableSchema.TableColumn(schema);
                colvarEta.ColumnName = "ETA";
                colvarEta.DataType = DbType.DateTime;
                colvarEta.MaxLength = 0;
                colvarEta.AutoIncrement = false;
                colvarEta.IsNullable = true;
                colvarEta.IsPrimaryKey = false;
                colvarEta.IsForeignKey = false;
                colvarEta.IsReadOnly = false;
                
                schema.Columns.Add(colvarEta);
                
                TableSchema.TableColumn colvarRemarksToCustomer = new TableSchema.TableColumn(schema);
                colvarRemarksToCustomer.ColumnName = "RemarksToCustomer";
                colvarRemarksToCustomer.DataType = DbType.String;
                colvarRemarksToCustomer.MaxLength = 1073741823;
                colvarRemarksToCustomer.AutoIncrement = false;
                colvarRemarksToCustomer.IsNullable = true;
                colvarRemarksToCustomer.IsPrimaryKey = false;
                colvarRemarksToCustomer.IsForeignKey = false;
                colvarRemarksToCustomer.IsReadOnly = false;
                
                schema.Columns.Add(colvarRemarksToCustomer);
                
                TableSchema.TableColumn colvarDestinationPort = new TableSchema.TableColumn(schema);
                colvarDestinationPort.ColumnName = "DestinationPort";
                colvarDestinationPort.DataType = DbType.String;
                colvarDestinationPort.MaxLength = 30;
                colvarDestinationPort.AutoIncrement = false;
                colvarDestinationPort.IsNullable = true;
                colvarDestinationPort.IsPrimaryKey = false;
                colvarDestinationPort.IsForeignKey = false;
                colvarDestinationPort.IsReadOnly = false;
                
                schema.Columns.Add(colvarDestinationPort);
                
                TableSchema.TableColumn colvarOriginPort = new TableSchema.TableColumn(schema);
                colvarOriginPort.ColumnName = "OriginPort";
                colvarOriginPort.DataType = DbType.String;
                colvarOriginPort.MaxLength = 30;
                colvarOriginPort.AutoIncrement = false;
                colvarOriginPort.IsNullable = true;
                colvarOriginPort.IsPrimaryKey = false;
                colvarOriginPort.IsForeignKey = false;
                colvarOriginPort.IsReadOnly = false;
                
                schema.Columns.Add(colvarOriginPort);
                
                TableSchema.TableColumn colvarFinalDestination = new TableSchema.TableColumn(schema);
                colvarFinalDestination.ColumnName = "FinalDestination";
                colvarFinalDestination.DataType = DbType.String;
                colvarFinalDestination.MaxLength = 30;
                colvarFinalDestination.AutoIncrement = false;
                colvarFinalDestination.IsNullable = true;
                colvarFinalDestination.IsPrimaryKey = false;
                colvarFinalDestination.IsForeignKey = false;
                colvarFinalDestination.IsReadOnly = false;
                
                schema.Columns.Add(colvarFinalDestination);
                
                TableSchema.TableColumn colvarVesselName = new TableSchema.TableColumn(schema);
                colvarVesselName.ColumnName = "VesselName";
                colvarVesselName.DataType = DbType.String;
                colvarVesselName.MaxLength = 50;
                colvarVesselName.AutoIncrement = false;
                colvarVesselName.IsNullable = true;
                colvarVesselName.IsPrimaryKey = false;
                colvarVesselName.IsForeignKey = false;
                colvarVesselName.IsReadOnly = false;
                
                schema.Columns.Add(colvarVesselName);
                
                TableSchema.TableColumn colvarTitle = new TableSchema.TableColumn(schema);
                colvarTitle.ColumnName = "Title";
                colvarTitle.DataType = DbType.String;
                colvarTitle.MaxLength = 100;
                colvarTitle.AutoIncrement = false;
                colvarTitle.IsNullable = true;
                colvarTitle.IsPrimaryKey = false;
                colvarTitle.IsForeignKey = false;
                colvarTitle.IsReadOnly = false;
                
                schema.Columns.Add(colvarTitle);
                
                TableSchema.TableColumn colvarIsbn = new TableSchema.TableColumn(schema);
                colvarIsbn.ColumnName = "ISBN";
                colvarIsbn.DataType = DbType.String;
                colvarIsbn.MaxLength = 50;
                colvarIsbn.AutoIncrement = false;
                colvarIsbn.IsNullable = true;
                colvarIsbn.IsPrimaryKey = false;
                colvarIsbn.IsForeignKey = false;
                colvarIsbn.IsReadOnly = false;
                
                schema.Columns.Add(colvarIsbn);
                
                TableSchema.TableColumn colvarCopies = new TableSchema.TableColumn(schema);
                colvarCopies.ColumnName = "Copies";
                colvarCopies.DataType = DbType.Int32;
                colvarCopies.MaxLength = 0;
                colvarCopies.AutoIncrement = false;
                colvarCopies.IsNullable = true;
                colvarCopies.IsPrimaryKey = false;
                colvarCopies.IsForeignKey = false;
                colvarCopies.IsReadOnly = false;
                
                schema.Columns.Add(colvarCopies);
                
                TableSchema.TableColumn colvarPONumber = new TableSchema.TableColumn(schema);
                colvarPONumber.ColumnName = "PONumber";
                colvarPONumber.DataType = DbType.String;
                colvarPONumber.MaxLength = 50;
                colvarPONumber.AutoIncrement = false;
                colvarPONumber.IsNullable = true;
                colvarPONumber.IsPrimaryKey = false;
                colvarPONumber.IsForeignKey = false;
                colvarPONumber.IsReadOnly = false;
                
                schema.Columns.Add(colvarPONumber);
                
                TableSchema.TableColumn colvarCartonLength = new TableSchema.TableColumn(schema);
                colvarCartonLength.ColumnName = "CartonLength";
                colvarCartonLength.DataType = DbType.Decimal;
                colvarCartonLength.MaxLength = 0;
                colvarCartonLength.AutoIncrement = false;
                colvarCartonLength.IsNullable = true;
                colvarCartonLength.IsPrimaryKey = false;
                colvarCartonLength.IsForeignKey = false;
                colvarCartonLength.IsReadOnly = false;
                
                schema.Columns.Add(colvarCartonLength);
                
                TableSchema.TableColumn colvarCartonDepth = new TableSchema.TableColumn(schema);
                colvarCartonDepth.ColumnName = "CartonDepth";
                colvarCartonDepth.DataType = DbType.Decimal;
                colvarCartonDepth.MaxLength = 0;
                colvarCartonDepth.AutoIncrement = false;
                colvarCartonDepth.IsNullable = true;
                colvarCartonDepth.IsPrimaryKey = false;
                colvarCartonDepth.IsForeignKey = false;
                colvarCartonDepth.IsReadOnly = false;
                
                schema.Columns.Add(colvarCartonDepth);
                
                TableSchema.TableColumn colvarCartonHeight = new TableSchema.TableColumn(schema);
                colvarCartonHeight.ColumnName = "CartonHeight";
                colvarCartonHeight.DataType = DbType.Decimal;
                colvarCartonHeight.MaxLength = 0;
                colvarCartonHeight.AutoIncrement = false;
                colvarCartonHeight.IsNullable = true;
                colvarCartonHeight.IsPrimaryKey = false;
                colvarCartonHeight.IsForeignKey = false;
                colvarCartonHeight.IsReadOnly = false;
                
                schema.Columns.Add(colvarCartonHeight);
                
                TableSchema.TableColumn colvarCopiesPerCarton = new TableSchema.TableColumn(schema);
                colvarCopiesPerCarton.ColumnName = "CopiesPerCarton";
                colvarCopiesPerCarton.DataType = DbType.Int32;
                colvarCopiesPerCarton.MaxLength = 0;
                colvarCopiesPerCarton.AutoIncrement = false;
                colvarCopiesPerCarton.IsNullable = true;
                colvarCopiesPerCarton.IsPrimaryKey = false;
                colvarCopiesPerCarton.IsForeignKey = false;
                colvarCopiesPerCarton.IsReadOnly = false;
                
                schema.Columns.Add(colvarCopiesPerCarton);
                
                TableSchema.TableColumn colvarCartonWeight = new TableSchema.TableColumn(schema);
                colvarCartonWeight.ColumnName = "CartonWeight";
                colvarCartonWeight.DataType = DbType.Single;
                colvarCartonWeight.MaxLength = 0;
                colvarCartonWeight.AutoIncrement = false;
                colvarCartonWeight.IsNullable = true;
                colvarCartonWeight.IsPrimaryKey = false;
                colvarCartonWeight.IsForeignKey = false;
                colvarCartonWeight.IsReadOnly = false;
                
                schema.Columns.Add(colvarCartonWeight);
                
                TableSchema.TableColumn colvarEMail = new TableSchema.TableColumn(schema);
                colvarEMail.ColumnName = "EMail";
                colvarEMail.DataType = DbType.String;
                colvarEMail.MaxLength = 50;
                colvarEMail.AutoIncrement = false;
                colvarEMail.IsNullable = true;
                colvarEMail.IsPrimaryKey = false;
                colvarEMail.IsForeignKey = false;
                colvarEMail.IsReadOnly = false;
                
                schema.Columns.Add(colvarEMail);
                
                
                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["WWIprov"].AddSchema("PenguinSailingReportView",schema);
            }
        }
        #endregion
        
        #region Query Accessor
	    public static Query CreateQuery()
	    {
		    return new Query(Schema);
	    }
	    #endregion
	    
	    #region .ctors
	    public PenguinSailingReportView()
	    {
            SetSQLProps();
            SetDefaults();
            MarkNew();
        }
        public PenguinSailingReportView(bool useDatabaseDefaults)
	    {
		    SetSQLProps();
		    if(useDatabaseDefaults)
		    {
				ForceDefaults();
			}
			MarkNew();
	    }
	    
	    public PenguinSailingReportView(object keyID)
	    {
		    SetSQLProps();
		    LoadByKey(keyID);
	    }
    	 
	    public PenguinSailingReportView(string columnName, object columnValue)
        {
            SetSQLProps();
            LoadByParam(columnName,columnValue);
        }
        
	    #endregion
	    
	    #region Props
	    
          
        [XmlAttribute("OrderNumber")]
        [Bindable(true)]
        public int? OrderNumber 
	    {
		    get
		    {
			    return GetColumnValue<int?>("OrderNumber");
		    }
            set 
		    {
			    SetColumnValue("OrderNumber", value);
            }
        }
	      
        [XmlAttribute("Client")]
        [Bindable(true)]
        public string Client 
	    {
		    get
		    {
			    return GetColumnValue<string>("Client");
		    }
            set 
		    {
			    SetColumnValue("Client", value);
            }
        }
	      
        [XmlAttribute("Consignee")]
        [Bindable(true)]
        public string Consignee 
	    {
		    get
		    {
			    return GetColumnValue<string>("Consignee");
		    }
            set 
		    {
			    SetColumnValue("Consignee", value);
            }
        }
	      
        [XmlAttribute("Printer")]
        [Bindable(true)]
        public string Printer 
	    {
		    get
		    {
			    return GetColumnValue<string>("Printer");
		    }
            set 
		    {
			    SetColumnValue("Printer", value);
            }
        }
	      
        [XmlAttribute("ExWorksDate")]
        [Bindable(true)]
        public DateTime? ExWorksDate 
	    {
		    get
		    {
			    return GetColumnValue<DateTime?>("ExWorksDate");
		    }
            set 
		    {
			    SetColumnValue("ExWorksDate", value);
            }
        }
	      
        [XmlAttribute("ContactName")]
        [Bindable(true)]
        public string ContactName 
	    {
		    get
		    {
			    return GetColumnValue<string>("ContactName");
		    }
            set 
		    {
			    SetColumnValue("ContactName", value);
            }
        }
	      
        [XmlAttribute("CustomersRef")]
        [Bindable(true)]
        public string CustomersRef 
	    {
		    get
		    {
			    return GetColumnValue<string>("CustomersRef");
		    }
            set 
		    {
			    SetColumnValue("CustomersRef", value);
            }
        }
	      
        [XmlAttribute("Ets")]
        [Bindable(true)]
        public DateTime? Ets 
	    {
		    get
		    {
			    return GetColumnValue<DateTime?>("ETS");
		    }
            set 
		    {
			    SetColumnValue("ETS", value);
            }
        }
	      
        [XmlAttribute("Eta")]
        [Bindable(true)]
        public DateTime? Eta 
	    {
		    get
		    {
			    return GetColumnValue<DateTime?>("ETA");
		    }
            set 
		    {
			    SetColumnValue("ETA", value);
            }
        }
	      
        [XmlAttribute("RemarksToCustomer")]
        [Bindable(true)]
        public string RemarksToCustomer 
	    {
		    get
		    {
			    return GetColumnValue<string>("RemarksToCustomer");
		    }
            set 
		    {
			    SetColumnValue("RemarksToCustomer", value);
            }
        }
	      
        [XmlAttribute("DestinationPort")]
        [Bindable(true)]
        public string DestinationPort 
	    {
		    get
		    {
			    return GetColumnValue<string>("DestinationPort");
		    }
            set 
		    {
			    SetColumnValue("DestinationPort", value);
            }
        }
	      
        [XmlAttribute("OriginPort")]
        [Bindable(true)]
        public string OriginPort 
	    {
		    get
		    {
			    return GetColumnValue<string>("OriginPort");
		    }
            set 
		    {
			    SetColumnValue("OriginPort", value);
            }
        }
	      
        [XmlAttribute("FinalDestination")]
        [Bindable(true)]
        public string FinalDestination 
	    {
		    get
		    {
			    return GetColumnValue<string>("FinalDestination");
		    }
            set 
		    {
			    SetColumnValue("FinalDestination", value);
            }
        }
	      
        [XmlAttribute("VesselName")]
        [Bindable(true)]
        public string VesselName 
	    {
		    get
		    {
			    return GetColumnValue<string>("VesselName");
		    }
            set 
		    {
			    SetColumnValue("VesselName", value);
            }
        }
	      
        [XmlAttribute("Title")]
        [Bindable(true)]
        public string Title 
	    {
		    get
		    {
			    return GetColumnValue<string>("Title");
		    }
            set 
		    {
			    SetColumnValue("Title", value);
            }
        }
	      
        [XmlAttribute("Isbn")]
        [Bindable(true)]
        public string Isbn 
	    {
		    get
		    {
			    return GetColumnValue<string>("ISBN");
		    }
            set 
		    {
			    SetColumnValue("ISBN", value);
            }
        }
	      
        [XmlAttribute("Copies")]
        [Bindable(true)]
        public int? Copies 
	    {
		    get
		    {
			    return GetColumnValue<int?>("Copies");
		    }
            set 
		    {
			    SetColumnValue("Copies", value);
            }
        }
	      
        [XmlAttribute("PONumber")]
        [Bindable(true)]
        public string PONumber 
	    {
		    get
		    {
			    return GetColumnValue<string>("PONumber");
		    }
            set 
		    {
			    SetColumnValue("PONumber", value);
            }
        }
	      
        [XmlAttribute("CartonLength")]
        [Bindable(true)]
        public decimal? CartonLength 
	    {
		    get
		    {
			    return GetColumnValue<decimal?>("CartonLength");
		    }
            set 
		    {
			    SetColumnValue("CartonLength", value);
            }
        }
	      
        [XmlAttribute("CartonDepth")]
        [Bindable(true)]
        public decimal? CartonDepth 
	    {
		    get
		    {
			    return GetColumnValue<decimal?>("CartonDepth");
		    }
            set 
		    {
			    SetColumnValue("CartonDepth", value);
            }
        }
	      
        [XmlAttribute("CartonHeight")]
        [Bindable(true)]
        public decimal? CartonHeight 
	    {
		    get
		    {
			    return GetColumnValue<decimal?>("CartonHeight");
		    }
            set 
		    {
			    SetColumnValue("CartonHeight", value);
            }
        }
	      
        [XmlAttribute("CopiesPerCarton")]
        [Bindable(true)]
        public int? CopiesPerCarton 
	    {
		    get
		    {
			    return GetColumnValue<int?>("CopiesPerCarton");
		    }
            set 
		    {
			    SetColumnValue("CopiesPerCarton", value);
            }
        }
	      
        [XmlAttribute("CartonWeight")]
        [Bindable(true)]
        public float? CartonWeight 
	    {
		    get
		    {
			    return GetColumnValue<float?>("CartonWeight");
		    }
            set 
		    {
			    SetColumnValue("CartonWeight", value);
            }
        }
	      
        [XmlAttribute("EMail")]
        [Bindable(true)]
        public string EMail 
	    {
		    get
		    {
			    return GetColumnValue<string>("EMail");
		    }
            set 
		    {
			    SetColumnValue("EMail", value);
            }
        }
	    
	    #endregion
    
	    #region Columns Struct
	    public struct Columns
	    {
		    
		    
            public static string OrderNumber = @"OrderNumber";
            
            public static string Client = @"Client";
            
            public static string Consignee = @"Consignee";
            
            public static string Printer = @"Printer";
            
            public static string ExWorksDate = @"ExWorksDate";
            
            public static string ContactName = @"ContactName";
            
            public static string CustomersRef = @"CustomersRef";
            
            public static string Ets = @"ETS";
            
            public static string Eta = @"ETA";
            
            public static string RemarksToCustomer = @"RemarksToCustomer";
            
            public static string DestinationPort = @"DestinationPort";
            
            public static string OriginPort = @"OriginPort";
            
            public static string FinalDestination = @"FinalDestination";
            
            public static string VesselName = @"VesselName";
            
            public static string Title = @"Title";
            
            public static string Isbn = @"ISBN";
            
            public static string Copies = @"Copies";
            
            public static string PONumber = @"PONumber";
            
            public static string CartonLength = @"CartonLength";
            
            public static string CartonDepth = @"CartonDepth";
            
            public static string CartonHeight = @"CartonHeight";
            
            public static string CopiesPerCarton = @"CopiesPerCarton";
            
            public static string CartonWeight = @"CartonWeight";
            
            public static string EMail = @"EMail";
            
	    }
	    #endregion
	    
	    
	    #region IAbstractRecord Members
        public new CT GetColumnValue<CT>(string columnName) {
            return base.GetColumnValue<CT>(columnName);
        }
        public object GetColumnValue(string columnName) {
            return base.GetColumnValue<object>(columnName);
        }
        #endregion
	    
    }
}
