using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DAL.Logistics
{
	/// <summary>
	/// Strongly-typed collection for the DeliverySubTable class.
	/// </summary>
    [Serializable]
	public partial class DeliverySubTableCollection : ActiveList<DeliverySubTable, DeliverySubTableCollection>
	{	   
		public DeliverySubTableCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>DeliverySubTableCollection</returns>
		public DeliverySubTableCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                DeliverySubTable o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the DeliverySubTable table.
	/// </summary>
	[Serializable]
	public partial class DeliverySubTable : ActiveRecord<DeliverySubTable>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public DeliverySubTable()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public DeliverySubTable(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public DeliverySubTable(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public DeliverySubTable(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("DeliverySubTable", TableType.Table, DataService.GetInstance("WWIprov"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarDeliveryID = new TableSchema.TableColumn(schema);
				colvarDeliveryID.ColumnName = "DeliveryID";
				colvarDeliveryID.DataType = DbType.Int32;
				colvarDeliveryID.MaxLength = 0;
				colvarDeliveryID.AutoIncrement = true;
				colvarDeliveryID.IsNullable = false;
				colvarDeliveryID.IsPrimaryKey = true;
				colvarDeliveryID.IsForeignKey = false;
				colvarDeliveryID.IsReadOnly = false;
				colvarDeliveryID.DefaultSetting = @"";
				colvarDeliveryID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDeliveryID);
				
				TableSchema.TableColumn colvarDeliveryNoteID = new TableSchema.TableColumn(schema);
				colvarDeliveryNoteID.ColumnName = "DeliveryNoteID";
				colvarDeliveryNoteID.DataType = DbType.Int32;
				colvarDeliveryNoteID.MaxLength = 0;
				colvarDeliveryNoteID.AutoIncrement = false;
				colvarDeliveryNoteID.IsNullable = true;
				colvarDeliveryNoteID.IsPrimaryKey = false;
				colvarDeliveryNoteID.IsForeignKey = false;
				colvarDeliveryNoteID.IsReadOnly = false;
				colvarDeliveryNoteID.DefaultSetting = @"";
				colvarDeliveryNoteID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDeliveryNoteID);
				
				TableSchema.TableColumn colvarOrderNumber = new TableSchema.TableColumn(schema);
				colvarOrderNumber.ColumnName = "OrderNumber";
				colvarOrderNumber.DataType = DbType.Int32;
				colvarOrderNumber.MaxLength = 0;
				colvarOrderNumber.AutoIncrement = false;
				colvarOrderNumber.IsNullable = true;
				colvarOrderNumber.IsPrimaryKey = false;
				colvarOrderNumber.IsForeignKey = false;
				colvarOrderNumber.IsReadOnly = false;
				colvarOrderNumber.DefaultSetting = @"";
				colvarOrderNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOrderNumber);
				
				TableSchema.TableColumn colvarStatusDate = new TableSchema.TableColumn(schema);
				colvarStatusDate.ColumnName = "StatusDate";
				colvarStatusDate.DataType = DbType.DateTime;
				colvarStatusDate.MaxLength = 0;
				colvarStatusDate.AutoIncrement = false;
				colvarStatusDate.IsNullable = true;
				colvarStatusDate.IsPrimaryKey = false;
				colvarStatusDate.IsForeignKey = false;
				colvarStatusDate.IsReadOnly = false;
				colvarStatusDate.DefaultSetting = @"";
				colvarStatusDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStatusDate);
				
				TableSchema.TableColumn colvarCurrentStatusID = new TableSchema.TableColumn(schema);
				colvarCurrentStatusID.ColumnName = "CurrentStatusID";
				colvarCurrentStatusID.DataType = DbType.Int32;
				colvarCurrentStatusID.MaxLength = 0;
				colvarCurrentStatusID.AutoIncrement = false;
				colvarCurrentStatusID.IsNullable = true;
				colvarCurrentStatusID.IsPrimaryKey = false;
				colvarCurrentStatusID.IsForeignKey = true;
				colvarCurrentStatusID.IsReadOnly = false;
				colvarCurrentStatusID.DefaultSetting = @"";
				
					colvarCurrentStatusID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCurrentStatusID);
				
				TableSchema.TableColumn colvarCurrentStatusDate = new TableSchema.TableColumn(schema);
				colvarCurrentStatusDate.ColumnName = "CurrentStatusDate";
				colvarCurrentStatusDate.DataType = DbType.DateTime;
				colvarCurrentStatusDate.MaxLength = 0;
				colvarCurrentStatusDate.AutoIncrement = false;
				colvarCurrentStatusDate.IsNullable = true;
				colvarCurrentStatusDate.IsPrimaryKey = false;
				colvarCurrentStatusDate.IsForeignKey = false;
				colvarCurrentStatusDate.IsReadOnly = false;
				colvarCurrentStatusDate.DefaultSetting = @"";
				colvarCurrentStatusDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCurrentStatusDate);
				
				TableSchema.TableColumn colvarDeliveryAddress = new TableSchema.TableColumn(schema);
				colvarDeliveryAddress.ColumnName = "DeliveryAddress";
				colvarDeliveryAddress.DataType = DbType.Int32;
				colvarDeliveryAddress.MaxLength = 0;
				colvarDeliveryAddress.AutoIncrement = false;
				colvarDeliveryAddress.IsNullable = true;
				colvarDeliveryAddress.IsPrimaryKey = false;
				colvarDeliveryAddress.IsForeignKey = false;
				colvarDeliveryAddress.IsReadOnly = false;
				colvarDeliveryAddress.DefaultSetting = @"";
				colvarDeliveryAddress.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDeliveryAddress);
				
				TableSchema.TableColumn colvarDelivered = new TableSchema.TableColumn(schema);
				colvarDelivered.ColumnName = "Delivered";
				colvarDelivered.DataType = DbType.Boolean;
				colvarDelivered.MaxLength = 0;
				colvarDelivered.AutoIncrement = false;
				colvarDelivered.IsNullable = false;
				colvarDelivered.IsPrimaryKey = false;
				colvarDelivered.IsForeignKey = false;
				colvarDelivered.IsReadOnly = false;
				
						colvarDelivered.DefaultSetting = @"((0))";
				colvarDelivered.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDelivered);
				
				TableSchema.TableColumn colvarPODRequired = new TableSchema.TableColumn(schema);
				colvarPODRequired.ColumnName = "PODRequired";
				colvarPODRequired.DataType = DbType.Boolean;
				colvarPODRequired.MaxLength = 0;
				colvarPODRequired.AutoIncrement = false;
				colvarPODRequired.IsNullable = false;
				colvarPODRequired.IsPrimaryKey = false;
				colvarPODRequired.IsForeignKey = false;
				colvarPODRequired.IsReadOnly = false;
				
						colvarPODRequired.DefaultSetting = @"((0))";
				colvarPODRequired.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPODRequired);
				
				TableSchema.TableColumn colvarSpecialInstructions = new TableSchema.TableColumn(schema);
				colvarSpecialInstructions.ColumnName = "SpecialInstructions";
				colvarSpecialInstructions.DataType = DbType.String;
				colvarSpecialInstructions.MaxLength = 1073741823;
				colvarSpecialInstructions.AutoIncrement = false;
				colvarSpecialInstructions.IsNullable = true;
				colvarSpecialInstructions.IsPrimaryKey = false;
				colvarSpecialInstructions.IsForeignKey = false;
				colvarSpecialInstructions.IsReadOnly = false;
				colvarSpecialInstructions.DefaultSetting = @"";
				colvarSpecialInstructions.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSpecialInstructions);
				
				TableSchema.TableColumn colvarPODurl = new TableSchema.TableColumn(schema);
				colvarPODurl.ColumnName = "PODurl";
				colvarPODurl.DataType = DbType.String;
				colvarPODurl.MaxLength = 1073741823;
				colvarPODurl.AutoIncrement = false;
				colvarPODurl.IsNullable = true;
				colvarPODurl.IsPrimaryKey = false;
				colvarPODurl.IsForeignKey = false;
				colvarPODurl.IsReadOnly = false;
				colvarPODurl.DefaultSetting = @"";
				colvarPODurl.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPODurl);
				
				TableSchema.TableColumn colvarAdded = new TableSchema.TableColumn(schema);
				colvarAdded.ColumnName = "Added";
				colvarAdded.DataType = DbType.Boolean;
				colvarAdded.MaxLength = 0;
				colvarAdded.AutoIncrement = false;
				colvarAdded.IsNullable = false;
				colvarAdded.IsPrimaryKey = false;
				colvarAdded.IsForeignKey = false;
				colvarAdded.IsReadOnly = false;
				
						colvarAdded.DefaultSetting = @"((0))";
				colvarAdded.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAdded);
				
				TableSchema.TableColumn colvarTs = new TableSchema.TableColumn(schema);
				colvarTs.ColumnName = "TS";
				colvarTs.DataType = DbType.Binary;
				colvarTs.MaxLength = 0;
				colvarTs.AutoIncrement = false;
				colvarTs.IsNullable = true;
				colvarTs.IsPrimaryKey = false;
				colvarTs.IsForeignKey = false;
				colvarTs.IsReadOnly = true;
				colvarTs.DefaultSetting = @"";
				colvarTs.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTs);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["WWIprov"].AddSchema("DeliverySubTable",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("DeliveryID")]
		[Bindable(true)]
		public int DeliveryID 
		{
			get { return GetColumnValue<int>(Columns.DeliveryID); }
			set { SetColumnValue(Columns.DeliveryID, value); }
		}
		  
		[XmlAttribute("DeliveryNoteID")]
		[Bindable(true)]
		public int? DeliveryNoteID 
		{
			get { return GetColumnValue<int?>(Columns.DeliveryNoteID); }
			set { SetColumnValue(Columns.DeliveryNoteID, value); }
		}
		  
		[XmlAttribute("OrderNumber")]
		[Bindable(true)]
		public int? OrderNumber 
		{
			get { return GetColumnValue<int?>(Columns.OrderNumber); }
			set { SetColumnValue(Columns.OrderNumber, value); }
		}
		  
		[XmlAttribute("StatusDate")]
		[Bindable(true)]
		public DateTime? StatusDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.StatusDate); }
			set { SetColumnValue(Columns.StatusDate, value); }
		}
		  
		[XmlAttribute("CurrentStatusID")]
		[Bindable(true)]
		public int? CurrentStatusID 
		{
			get { return GetColumnValue<int?>(Columns.CurrentStatusID); }
			set { SetColumnValue(Columns.CurrentStatusID, value); }
		}
		  
		[XmlAttribute("CurrentStatusDate")]
		[Bindable(true)]
		public DateTime? CurrentStatusDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.CurrentStatusDate); }
			set { SetColumnValue(Columns.CurrentStatusDate, value); }
		}
		  
		[XmlAttribute("DeliveryAddress")]
		[Bindable(true)]
		public int? DeliveryAddress 
		{
			get { return GetColumnValue<int?>(Columns.DeliveryAddress); }
			set { SetColumnValue(Columns.DeliveryAddress, value); }
		}
		  
		[XmlAttribute("Delivered")]
		[Bindable(true)]
		public bool Delivered 
		{
			get { return GetColumnValue<bool>(Columns.Delivered); }
			set { SetColumnValue(Columns.Delivered, value); }
		}
		  
		[XmlAttribute("PODRequired")]
		[Bindable(true)]
		public bool PODRequired 
		{
			get { return GetColumnValue<bool>(Columns.PODRequired); }
			set { SetColumnValue(Columns.PODRequired, value); }
		}
		  
		[XmlAttribute("SpecialInstructions")]
		[Bindable(true)]
		public string SpecialInstructions 
		{
			get { return GetColumnValue<string>(Columns.SpecialInstructions); }
			set { SetColumnValue(Columns.SpecialInstructions, value); }
		}
		  
		[XmlAttribute("PODurl")]
		[Bindable(true)]
		public string PODurl 
		{
			get { return GetColumnValue<string>(Columns.PODurl); }
			set { SetColumnValue(Columns.PODurl, value); }
		}
		  
		[XmlAttribute("Added")]
		[Bindable(true)]
		public bool Added 
		{
			get { return GetColumnValue<bool>(Columns.Added); }
			set { SetColumnValue(Columns.Added, value); }
		}
		  
		[XmlAttribute("Ts")]
		[Bindable(true)]
		public byte[] Ts 
		{
			get { return GetColumnValue<byte[]>(Columns.Ts); }
			set { SetColumnValue(Columns.Ts, value); }
		}
		
		#endregion
		
		
		#region PrimaryKey Methods		
		
        protected override void SetPrimaryKey(object oValue)
        {
            base.SetPrimaryKey(oValue);
            
            SetPKValues();
        }
        
		
		public DAL.Logistics.DeliverySubSubTableCollection DeliverySubSubTableRecords()
		{
			return new DAL.Logistics.DeliverySubSubTableCollection().Where(DeliverySubSubTable.Columns.DeliveryID, DeliveryID).Load();
		}
		#endregion
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int? varDeliveryNoteID,int? varOrderNumber,DateTime? varStatusDate,int? varCurrentStatusID,DateTime? varCurrentStatusDate,int? varDeliveryAddress,bool varDelivered,bool varPODRequired,string varSpecialInstructions,string varPODurl,bool varAdded,byte[] varTs)
		{
			DeliverySubTable item = new DeliverySubTable();
			
			item.DeliveryNoteID = varDeliveryNoteID;
			
			item.OrderNumber = varOrderNumber;
			
			item.StatusDate = varStatusDate;
			
			item.CurrentStatusID = varCurrentStatusID;
			
			item.CurrentStatusDate = varCurrentStatusDate;
			
			item.DeliveryAddress = varDeliveryAddress;
			
			item.Delivered = varDelivered;
			
			item.PODRequired = varPODRequired;
			
			item.SpecialInstructions = varSpecialInstructions;
			
			item.PODurl = varPODurl;
			
			item.Added = varAdded;
			
			item.Ts = varTs;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varDeliveryID,int? varDeliveryNoteID,int? varOrderNumber,DateTime? varStatusDate,int? varCurrentStatusID,DateTime? varCurrentStatusDate,int? varDeliveryAddress,bool varDelivered,bool varPODRequired,string varSpecialInstructions,string varPODurl,bool varAdded,byte[] varTs)
		{
			DeliverySubTable item = new DeliverySubTable();
			
				item.DeliveryID = varDeliveryID;
			
				item.DeliveryNoteID = varDeliveryNoteID;
			
				item.OrderNumber = varOrderNumber;
			
				item.StatusDate = varStatusDate;
			
				item.CurrentStatusID = varCurrentStatusID;
			
				item.CurrentStatusDate = varCurrentStatusDate;
			
				item.DeliveryAddress = varDeliveryAddress;
			
				item.Delivered = varDelivered;
			
				item.PODRequired = varPODRequired;
			
				item.SpecialInstructions = varSpecialInstructions;
			
				item.PODurl = varPODurl;
			
				item.Added = varAdded;
			
				item.Ts = varTs;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn DeliveryIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn DeliveryNoteIDColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn OrderNumberColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn StatusDateColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn CurrentStatusIDColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn CurrentStatusDateColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn DeliveryAddressColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn DeliveredColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn PODRequiredColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn SpecialInstructionsColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn PODurlColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn AddedColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn TsColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string DeliveryID = @"DeliveryID";
			 public static string DeliveryNoteID = @"DeliveryNoteID";
			 public static string OrderNumber = @"OrderNumber";
			 public static string StatusDate = @"StatusDate";
			 public static string CurrentStatusID = @"CurrentStatusID";
			 public static string CurrentStatusDate = @"CurrentStatusDate";
			 public static string DeliveryAddress = @"DeliveryAddress";
			 public static string Delivered = @"Delivered";
			 public static string PODRequired = @"PODRequired";
			 public static string SpecialInstructions = @"SpecialInstructions";
			 public static string PODurl = @"PODurl";
			 public static string Added = @"Added";
			 public static string Ts = @"TS";
						
		}
		#endregion
		
		#region Update PK Collections
		
        public void SetPKValues()
        {
}
        #endregion
    
        #region Deep Save
		
        public void DeepSave()
        {
            Save();
            
}
        #endregion
	}
}
