using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DAL.Logistics
{
	/// <summary>
	/// Strongly-typed collection for the HouseBLTable class.
	/// </summary>
    [Serializable]
	public partial class HouseBLTableCollection : ActiveList<HouseBLTable, HouseBLTableCollection>
	{	   
		public HouseBLTableCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>HouseBLTableCollection</returns>
		public HouseBLTableCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                HouseBLTable o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the HouseBLTable table.
	/// </summary>
	[Serializable]
	public partial class HouseBLTable : ActiveRecord<HouseBLTable>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public HouseBLTable()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public HouseBLTable(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public HouseBLTable(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public HouseBLTable(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("HouseBLTable", TableType.Table, DataService.GetInstance("WWIprov"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarHouseBLID = new TableSchema.TableColumn(schema);
				colvarHouseBLID.ColumnName = "HouseBLID";
				colvarHouseBLID.DataType = DbType.Int32;
				colvarHouseBLID.MaxLength = 0;
				colvarHouseBLID.AutoIncrement = true;
				colvarHouseBLID.IsNullable = false;
				colvarHouseBLID.IsPrimaryKey = true;
				colvarHouseBLID.IsForeignKey = false;
				colvarHouseBLID.IsReadOnly = false;
				colvarHouseBLID.DefaultSetting = @"";
				colvarHouseBLID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHouseBLID);
				
				TableSchema.TableColumn colvarHouseBLNumber = new TableSchema.TableColumn(schema);
				colvarHouseBLNumber.ColumnName = "HouseBLNumber";
				colvarHouseBLNumber.DataType = DbType.String;
				colvarHouseBLNumber.MaxLength = 50;
				colvarHouseBLNumber.AutoIncrement = false;
				colvarHouseBLNumber.IsNullable = true;
				colvarHouseBLNumber.IsPrimaryKey = false;
				colvarHouseBLNumber.IsForeignKey = false;
				colvarHouseBLNumber.IsReadOnly = false;
				colvarHouseBLNumber.DefaultSetting = @"";
				colvarHouseBLNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHouseBLNumber);
				
				TableSchema.TableColumn colvarMasterBLID = new TableSchema.TableColumn(schema);
				colvarMasterBLID.ColumnName = "MasterBLID";
				colvarMasterBLID.DataType = DbType.Int32;
				colvarMasterBLID.MaxLength = 0;
				colvarMasterBLID.AutoIncrement = false;
				colvarMasterBLID.IsNullable = true;
				colvarMasterBLID.IsPrimaryKey = false;
				colvarMasterBLID.IsForeignKey = false;
				colvarMasterBLID.IsReadOnly = false;
				colvarMasterBLID.DefaultSetting = @"";
				colvarMasterBLID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMasterBLID);
				
				TableSchema.TableColumn colvarConsigneeID = new TableSchema.TableColumn(schema);
				colvarConsigneeID.ColumnName = "ConsigneeID";
				colvarConsigneeID.DataType = DbType.Int32;
				colvarConsigneeID.MaxLength = 0;
				colvarConsigneeID.AutoIncrement = false;
				colvarConsigneeID.IsNullable = true;
				colvarConsigneeID.IsPrimaryKey = false;
				colvarConsigneeID.IsForeignKey = false;
				colvarConsigneeID.IsReadOnly = false;
				colvarConsigneeID.DefaultSetting = @"";
				colvarConsigneeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarConsigneeID);
				
				TableSchema.TableColumn colvarHBLDate = new TableSchema.TableColumn(schema);
				colvarHBLDate.ColumnName = "HBLDate";
				colvarHBLDate.DataType = DbType.DateTime;
				colvarHBLDate.MaxLength = 0;
				colvarHBLDate.AutoIncrement = false;
				colvarHBLDate.IsNullable = true;
				colvarHBLDate.IsPrimaryKey = false;
				colvarHBLDate.IsForeignKey = false;
				colvarHBLDate.IsReadOnly = false;
				colvarHBLDate.DefaultSetting = @"";
				colvarHBLDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHBLDate);
				
				TableSchema.TableColumn colvarAgentAtDestinationID = new TableSchema.TableColumn(schema);
				colvarAgentAtDestinationID.ColumnName = "AgentAtDestinationID";
				colvarAgentAtDestinationID.DataType = DbType.Int32;
				colvarAgentAtDestinationID.MaxLength = 0;
				colvarAgentAtDestinationID.AutoIncrement = false;
				colvarAgentAtDestinationID.IsNullable = true;
				colvarAgentAtDestinationID.IsPrimaryKey = false;
				colvarAgentAtDestinationID.IsForeignKey = false;
				colvarAgentAtDestinationID.IsReadOnly = false;
				colvarAgentAtDestinationID.DefaultSetting = @"";
				colvarAgentAtDestinationID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAgentAtDestinationID);
				
				TableSchema.TableColumn colvarOriginPort = new TableSchema.TableColumn(schema);
				colvarOriginPort.ColumnName = "OriginPort";
				colvarOriginPort.DataType = DbType.Int32;
				colvarOriginPort.MaxLength = 0;
				colvarOriginPort.AutoIncrement = false;
				colvarOriginPort.IsNullable = true;
				colvarOriginPort.IsPrimaryKey = false;
				colvarOriginPort.IsForeignKey = false;
				colvarOriginPort.IsReadOnly = false;
				colvarOriginPort.DefaultSetting = @"";
				colvarOriginPort.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOriginPort);
				
				TableSchema.TableColumn colvarDestinationPort = new TableSchema.TableColumn(schema);
				colvarDestinationPort.ColumnName = "DestinationPort";
				colvarDestinationPort.DataType = DbType.Int32;
				colvarDestinationPort.MaxLength = 0;
				colvarDestinationPort.AutoIncrement = false;
				colvarDestinationPort.IsNullable = true;
				colvarDestinationPort.IsPrimaryKey = false;
				colvarDestinationPort.IsForeignKey = false;
				colvarDestinationPort.IsReadOnly = false;
				colvarDestinationPort.DefaultSetting = @"";
				colvarDestinationPort.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDestinationPort);
				
				TableSchema.TableColumn colvarVoyageID = new TableSchema.TableColumn(schema);
				colvarVoyageID.ColumnName = "VoyageID";
				colvarVoyageID.DataType = DbType.Int32;
				colvarVoyageID.MaxLength = 0;
				colvarVoyageID.AutoIncrement = false;
				colvarVoyageID.IsNullable = true;
				colvarVoyageID.IsPrimaryKey = false;
				colvarVoyageID.IsForeignKey = false;
				colvarVoyageID.IsReadOnly = false;
				colvarVoyageID.DefaultSetting = @"";
				colvarVoyageID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarVoyageID);
				
				TableSchema.TableColumn colvarEts = new TableSchema.TableColumn(schema);
				colvarEts.ColumnName = "ETS";
				colvarEts.DataType = DbType.DateTime;
				colvarEts.MaxLength = 0;
				colvarEts.AutoIncrement = false;
				colvarEts.IsNullable = true;
				colvarEts.IsPrimaryKey = false;
				colvarEts.IsForeignKey = false;
				colvarEts.IsReadOnly = false;
				colvarEts.DefaultSetting = @"";
				colvarEts.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEts);
				
				TableSchema.TableColumn colvarEta = new TableSchema.TableColumn(schema);
				colvarEta.ColumnName = "ETA";
				colvarEta.DataType = DbType.DateTime;
				colvarEta.MaxLength = 0;
				colvarEta.AutoIncrement = false;
				colvarEta.IsNullable = true;
				colvarEta.IsPrimaryKey = false;
				colvarEta.IsForeignKey = false;
				colvarEta.IsReadOnly = false;
				colvarEta.DefaultSetting = @"";
				colvarEta.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEta);
				
				TableSchema.TableColumn colvarAdded = new TableSchema.TableColumn(schema);
				colvarAdded.ColumnName = "Added";
				colvarAdded.DataType = DbType.Boolean;
				colvarAdded.MaxLength = 0;
				colvarAdded.AutoIncrement = false;
				colvarAdded.IsNullable = false;
				colvarAdded.IsPrimaryKey = false;
				colvarAdded.IsForeignKey = false;
				colvarAdded.IsReadOnly = false;
				
						colvarAdded.DefaultSetting = @"(0)";
				colvarAdded.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAdded);
				
				TableSchema.TableColumn colvarTs = new TableSchema.TableColumn(schema);
				colvarTs.ColumnName = "TS";
				colvarTs.DataType = DbType.Binary;
				colvarTs.MaxLength = 0;
				colvarTs.AutoIncrement = false;
				colvarTs.IsNullable = true;
				colvarTs.IsPrimaryKey = false;
				colvarTs.IsForeignKey = false;
				colvarTs.IsReadOnly = true;
				colvarTs.DefaultSetting = @"";
				colvarTs.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTs);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["WWIprov"].AddSchema("HouseBLTable",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("HouseBLID")]
		[Bindable(true)]
		public int HouseBLID 
		{
			get { return GetColumnValue<int>(Columns.HouseBLID); }
			set { SetColumnValue(Columns.HouseBLID, value); }
		}
		  
		[XmlAttribute("HouseBLNumber")]
		[Bindable(true)]
		public string HouseBLNumber 
		{
			get { return GetColumnValue<string>(Columns.HouseBLNumber); }
			set { SetColumnValue(Columns.HouseBLNumber, value); }
		}
		  
		[XmlAttribute("MasterBLID")]
		[Bindable(true)]
		public int? MasterBLID 
		{
			get { return GetColumnValue<int?>(Columns.MasterBLID); }
			set { SetColumnValue(Columns.MasterBLID, value); }
		}
		  
		[XmlAttribute("ConsigneeID")]
		[Bindable(true)]
		public int? ConsigneeID 
		{
			get { return GetColumnValue<int?>(Columns.ConsigneeID); }
			set { SetColumnValue(Columns.ConsigneeID, value); }
		}
		  
		[XmlAttribute("HBLDate")]
		[Bindable(true)]
		public DateTime? HBLDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.HBLDate); }
			set { SetColumnValue(Columns.HBLDate, value); }
		}
		  
		[XmlAttribute("AgentAtDestinationID")]
		[Bindable(true)]
		public int? AgentAtDestinationID 
		{
			get { return GetColumnValue<int?>(Columns.AgentAtDestinationID); }
			set { SetColumnValue(Columns.AgentAtDestinationID, value); }
		}
		  
		[XmlAttribute("OriginPort")]
		[Bindable(true)]
		public int? OriginPort 
		{
			get { return GetColumnValue<int?>(Columns.OriginPort); }
			set { SetColumnValue(Columns.OriginPort, value); }
		}
		  
		[XmlAttribute("DestinationPort")]
		[Bindable(true)]
		public int? DestinationPort 
		{
			get { return GetColumnValue<int?>(Columns.DestinationPort); }
			set { SetColumnValue(Columns.DestinationPort, value); }
		}
		  
		[XmlAttribute("VoyageID")]
		[Bindable(true)]
		public int? VoyageID 
		{
			get { return GetColumnValue<int?>(Columns.VoyageID); }
			set { SetColumnValue(Columns.VoyageID, value); }
		}
		  
		[XmlAttribute("Ets")]
		[Bindable(true)]
		public DateTime? Ets 
		{
			get { return GetColumnValue<DateTime?>(Columns.Ets); }
			set { SetColumnValue(Columns.Ets, value); }
		}
		  
		[XmlAttribute("Eta")]
		[Bindable(true)]
		public DateTime? Eta 
		{
			get { return GetColumnValue<DateTime?>(Columns.Eta); }
			set { SetColumnValue(Columns.Eta, value); }
		}
		  
		[XmlAttribute("Added")]
		[Bindable(true)]
		public bool Added 
		{
			get { return GetColumnValue<bool>(Columns.Added); }
			set { SetColumnValue(Columns.Added, value); }
		}
		  
		[XmlAttribute("Ts")]
		[Bindable(true)]
		public byte[] Ts 
		{
			get { return GetColumnValue<byte[]>(Columns.Ts); }
			set { SetColumnValue(Columns.Ts, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varHouseBLNumber,int? varMasterBLID,int? varConsigneeID,DateTime? varHBLDate,int? varAgentAtDestinationID,int? varOriginPort,int? varDestinationPort,int? varVoyageID,DateTime? varEts,DateTime? varEta,bool varAdded,byte[] varTs)
		{
			HouseBLTable item = new HouseBLTable();
			
			item.HouseBLNumber = varHouseBLNumber;
			
			item.MasterBLID = varMasterBLID;
			
			item.ConsigneeID = varConsigneeID;
			
			item.HBLDate = varHBLDate;
			
			item.AgentAtDestinationID = varAgentAtDestinationID;
			
			item.OriginPort = varOriginPort;
			
			item.DestinationPort = varDestinationPort;
			
			item.VoyageID = varVoyageID;
			
			item.Ets = varEts;
			
			item.Eta = varEta;
			
			item.Added = varAdded;
			
			item.Ts = varTs;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varHouseBLID,string varHouseBLNumber,int? varMasterBLID,int? varConsigneeID,DateTime? varHBLDate,int? varAgentAtDestinationID,int? varOriginPort,int? varDestinationPort,int? varVoyageID,DateTime? varEts,DateTime? varEta,bool varAdded,byte[] varTs)
		{
			HouseBLTable item = new HouseBLTable();
			
				item.HouseBLID = varHouseBLID;
			
				item.HouseBLNumber = varHouseBLNumber;
			
				item.MasterBLID = varMasterBLID;
			
				item.ConsigneeID = varConsigneeID;
			
				item.HBLDate = varHBLDate;
			
				item.AgentAtDestinationID = varAgentAtDestinationID;
			
				item.OriginPort = varOriginPort;
			
				item.DestinationPort = varDestinationPort;
			
				item.VoyageID = varVoyageID;
			
				item.Ets = varEts;
			
				item.Eta = varEta;
			
				item.Added = varAdded;
			
				item.Ts = varTs;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn HouseBLIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn HouseBLNumberColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn MasterBLIDColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn ConsigneeIDColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn HBLDateColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn AgentAtDestinationIDColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn OriginPortColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn DestinationPortColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn VoyageIDColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn EtsColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn EtaColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn AddedColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn TsColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string HouseBLID = @"HouseBLID";
			 public static string HouseBLNumber = @"HouseBLNumber";
			 public static string MasterBLID = @"MasterBLID";
			 public static string ConsigneeID = @"ConsigneeID";
			 public static string HBLDate = @"HBLDate";
			 public static string AgentAtDestinationID = @"AgentAtDestinationID";
			 public static string OriginPort = @"OriginPort";
			 public static string DestinationPort = @"DestinationPort";
			 public static string VoyageID = @"VoyageID";
			 public static string Ets = @"ETS";
			 public static string Eta = @"ETA";
			 public static string Added = @"Added";
			 public static string Ts = @"TS";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
