using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DAL.Logistics
{
	/// <summary>
	/// Strongly-typed collection for the OrderTable class.
	/// </summary>
    [Serializable]
	public partial class OrderTableCollection : ActiveList<OrderTable, OrderTableCollection>
	{	   
		public OrderTableCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>OrderTableCollection</returns>
		public OrderTableCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                OrderTable o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the OrderTable table.
	/// </summary>
	[Serializable]
	public partial class OrderTable : ActiveRecord<OrderTable>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public OrderTable()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public OrderTable(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public OrderTable(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public OrderTable(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("OrderTable", TableType.Table, DataService.GetInstance("WWIprov"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarOrderID = new TableSchema.TableColumn(schema);
				colvarOrderID.ColumnName = "OrderID";
				colvarOrderID.DataType = DbType.Int32;
				colvarOrderID.MaxLength = 0;
				colvarOrderID.AutoIncrement = true;
				colvarOrderID.IsNullable = false;
				colvarOrderID.IsPrimaryKey = true;
				colvarOrderID.IsForeignKey = false;
				colvarOrderID.IsReadOnly = false;
				colvarOrderID.DefaultSetting = @"";
				colvarOrderID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOrderID);
				
				TableSchema.TableColumn colvarOrderNumber = new TableSchema.TableColumn(schema);
				colvarOrderNumber.ColumnName = "OrderNumber";
				colvarOrderNumber.DataType = DbType.Int32;
				colvarOrderNumber.MaxLength = 0;
				colvarOrderNumber.AutoIncrement = false;
				colvarOrderNumber.IsNullable = true;
				colvarOrderNumber.IsPrimaryKey = false;
				colvarOrderNumber.IsForeignKey = false;
				colvarOrderNumber.IsReadOnly = false;
				colvarOrderNumber.DefaultSetting = @"";
				colvarOrderNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOrderNumber);
				
				TableSchema.TableColumn colvarOfficeIndicator = new TableSchema.TableColumn(schema);
				colvarOfficeIndicator.ColumnName = "OfficeIndicator";
				colvarOfficeIndicator.DataType = DbType.String;
				colvarOfficeIndicator.MaxLength = 50;
				colvarOfficeIndicator.AutoIncrement = false;
				colvarOfficeIndicator.IsNullable = true;
				colvarOfficeIndicator.IsPrimaryKey = false;
				colvarOfficeIndicator.IsForeignKey = false;
				colvarOfficeIndicator.IsReadOnly = false;
				colvarOfficeIndicator.DefaultSetting = @"";
				colvarOfficeIndicator.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOfficeIndicator);
				
				TableSchema.TableColumn colvarPublishipOrder = new TableSchema.TableColumn(schema);
				colvarPublishipOrder.ColumnName = "PublishipOrder";
				colvarPublishipOrder.DataType = DbType.Boolean;
				colvarPublishipOrder.MaxLength = 0;
				colvarPublishipOrder.AutoIncrement = false;
				colvarPublishipOrder.IsNullable = false;
				colvarPublishipOrder.IsPrimaryKey = false;
				colvarPublishipOrder.IsForeignKey = false;
				colvarPublishipOrder.IsReadOnly = false;
				
						colvarPublishipOrder.DefaultSetting = @"((0))";
				colvarPublishipOrder.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPublishipOrder);
				
				TableSchema.TableColumn colvarDateOrderCreated = new TableSchema.TableColumn(schema);
				colvarDateOrderCreated.ColumnName = "DateOrderCreated";
				colvarDateOrderCreated.DataType = DbType.DateTime;
				colvarDateOrderCreated.MaxLength = 0;
				colvarDateOrderCreated.AutoIncrement = false;
				colvarDateOrderCreated.IsNullable = true;
				colvarDateOrderCreated.IsPrimaryKey = false;
				colvarDateOrderCreated.IsForeignKey = false;
				colvarDateOrderCreated.IsReadOnly = false;
				colvarDateOrderCreated.DefaultSetting = @"";
				colvarDateOrderCreated.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDateOrderCreated);
				
				TableSchema.TableColumn colvarHotJob = new TableSchema.TableColumn(schema);
				colvarHotJob.ColumnName = "HotJob";
				colvarHotJob.DataType = DbType.Boolean;
				colvarHotJob.MaxLength = 0;
				colvarHotJob.AutoIncrement = false;
				colvarHotJob.IsNullable = false;
				colvarHotJob.IsPrimaryKey = false;
				colvarHotJob.IsForeignKey = false;
				colvarHotJob.IsReadOnly = false;
				
						colvarHotJob.DefaultSetting = @"((0))";
				colvarHotJob.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHotJob);
				
				TableSchema.TableColumn colvarCompanyID = new TableSchema.TableColumn(schema);
				colvarCompanyID.ColumnName = "CompanyID";
				colvarCompanyID.DataType = DbType.Int32;
				colvarCompanyID.MaxLength = 0;
				colvarCompanyID.AutoIncrement = false;
				colvarCompanyID.IsNullable = true;
				colvarCompanyID.IsPrimaryKey = false;
				colvarCompanyID.IsForeignKey = false;
				colvarCompanyID.IsReadOnly = false;
				colvarCompanyID.DefaultSetting = @"";
				colvarCompanyID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCompanyID);
				
				TableSchema.TableColumn colvarConsigneeID = new TableSchema.TableColumn(schema);
				colvarConsigneeID.ColumnName = "ConsigneeID";
				colvarConsigneeID.DataType = DbType.Int32;
				colvarConsigneeID.MaxLength = 0;
				colvarConsigneeID.AutoIncrement = false;
				colvarConsigneeID.IsNullable = true;
				colvarConsigneeID.IsPrimaryKey = false;
				colvarConsigneeID.IsForeignKey = false;
				colvarConsigneeID.IsReadOnly = false;
				colvarConsigneeID.DefaultSetting = @"";
				colvarConsigneeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarConsigneeID);
				
				TableSchema.TableColumn colvarNotifyPartyID = new TableSchema.TableColumn(schema);
				colvarNotifyPartyID.ColumnName = "NotifyPartyID";
				colvarNotifyPartyID.DataType = DbType.Int32;
				colvarNotifyPartyID.MaxLength = 0;
				colvarNotifyPartyID.AutoIncrement = false;
				colvarNotifyPartyID.IsNullable = true;
				colvarNotifyPartyID.IsPrimaryKey = false;
				colvarNotifyPartyID.IsForeignKey = false;
				colvarNotifyPartyID.IsReadOnly = false;
				colvarNotifyPartyID.DefaultSetting = @"";
				colvarNotifyPartyID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNotifyPartyID);
				
				TableSchema.TableColumn colvarAgentAtOriginID = new TableSchema.TableColumn(schema);
				colvarAgentAtOriginID.ColumnName = "AgentAtOriginID";
				colvarAgentAtOriginID.DataType = DbType.Int32;
				colvarAgentAtOriginID.MaxLength = 0;
				colvarAgentAtOriginID.AutoIncrement = false;
				colvarAgentAtOriginID.IsNullable = true;
				colvarAgentAtOriginID.IsPrimaryKey = false;
				colvarAgentAtOriginID.IsForeignKey = false;
				colvarAgentAtOriginID.IsReadOnly = false;
				colvarAgentAtOriginID.DefaultSetting = @"";
				colvarAgentAtOriginID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAgentAtOriginID);
				
				TableSchema.TableColumn colvarAgentAtDestinationID = new TableSchema.TableColumn(schema);
				colvarAgentAtDestinationID.ColumnName = "AgentAtDestinationID";
				colvarAgentAtDestinationID.DataType = DbType.Int32;
				colvarAgentAtDestinationID.MaxLength = 0;
				colvarAgentAtDestinationID.AutoIncrement = false;
				colvarAgentAtDestinationID.IsNullable = true;
				colvarAgentAtDestinationID.IsPrimaryKey = false;
				colvarAgentAtDestinationID.IsForeignKey = false;
				colvarAgentAtDestinationID.IsReadOnly = false;
				colvarAgentAtDestinationID.DefaultSetting = @"";
				colvarAgentAtDestinationID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAgentAtDestinationID);
				
				TableSchema.TableColumn colvarPrinterID = new TableSchema.TableColumn(schema);
				colvarPrinterID.ColumnName = "PrinterID";
				colvarPrinterID.DataType = DbType.Int32;
				colvarPrinterID.MaxLength = 0;
				colvarPrinterID.AutoIncrement = false;
				colvarPrinterID.IsNullable = true;
				colvarPrinterID.IsPrimaryKey = false;
				colvarPrinterID.IsForeignKey = false;
				colvarPrinterID.IsReadOnly = false;
				colvarPrinterID.DefaultSetting = @"";
				colvarPrinterID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPrinterID);
				
				TableSchema.TableColumn colvarClearingAgentID = new TableSchema.TableColumn(schema);
				colvarClearingAgentID.ColumnName = "ClearingAgentID";
				colvarClearingAgentID.DataType = DbType.Int32;
				colvarClearingAgentID.MaxLength = 0;
				colvarClearingAgentID.AutoIncrement = false;
				colvarClearingAgentID.IsNullable = true;
				colvarClearingAgentID.IsPrimaryKey = false;
				colvarClearingAgentID.IsForeignKey = false;
				colvarClearingAgentID.IsReadOnly = false;
				colvarClearingAgentID.DefaultSetting = @"";
				colvarClearingAgentID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarClearingAgentID);
				
				TableSchema.TableColumn colvarOnCarriageID = new TableSchema.TableColumn(schema);
				colvarOnCarriageID.ColumnName = "OnCarriageID";
				colvarOnCarriageID.DataType = DbType.Int32;
				colvarOnCarriageID.MaxLength = 0;
				colvarOnCarriageID.AutoIncrement = false;
				colvarOnCarriageID.IsNullable = true;
				colvarOnCarriageID.IsPrimaryKey = false;
				colvarOnCarriageID.IsForeignKey = false;
				colvarOnCarriageID.IsReadOnly = false;
				colvarOnCarriageID.DefaultSetting = @"";
				colvarOnCarriageID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOnCarriageID);
				
				TableSchema.TableColumn colvarOrderControllerID = new TableSchema.TableColumn(schema);
				colvarOrderControllerID.ColumnName = "OrderControllerID";
				colvarOrderControllerID.DataType = DbType.Int32;
				colvarOrderControllerID.MaxLength = 0;
				colvarOrderControllerID.AutoIncrement = false;
				colvarOrderControllerID.IsNullable = true;
				colvarOrderControllerID.IsPrimaryKey = false;
				colvarOrderControllerID.IsForeignKey = false;
				colvarOrderControllerID.IsReadOnly = false;
				colvarOrderControllerID.DefaultSetting = @"";
				colvarOrderControllerID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOrderControllerID);
				
				TableSchema.TableColumn colvarOperationsControllerID = new TableSchema.TableColumn(schema);
				colvarOperationsControllerID.ColumnName = "OperationsControllerID";
				colvarOperationsControllerID.DataType = DbType.Int32;
				colvarOperationsControllerID.MaxLength = 0;
				colvarOperationsControllerID.AutoIncrement = false;
				colvarOperationsControllerID.IsNullable = true;
				colvarOperationsControllerID.IsPrimaryKey = false;
				colvarOperationsControllerID.IsForeignKey = false;
				colvarOperationsControllerID.IsReadOnly = false;
				colvarOperationsControllerID.DefaultSetting = @"";
				colvarOperationsControllerID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOperationsControllerID);
				
				TableSchema.TableColumn colvarOriginPortControllerID = new TableSchema.TableColumn(schema);
				colvarOriginPortControllerID.ColumnName = "OriginPortControllerID";
				colvarOriginPortControllerID.DataType = DbType.Int32;
				colvarOriginPortControllerID.MaxLength = 0;
				colvarOriginPortControllerID.AutoIncrement = false;
				colvarOriginPortControllerID.IsNullable = true;
				colvarOriginPortControllerID.IsPrimaryKey = false;
				colvarOriginPortControllerID.IsForeignKey = false;
				colvarOriginPortControllerID.IsReadOnly = false;
				colvarOriginPortControllerID.DefaultSetting = @"";
				colvarOriginPortControllerID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOriginPortControllerID);
				
				TableSchema.TableColumn colvarDestinationPortControllerID = new TableSchema.TableColumn(schema);
				colvarDestinationPortControllerID.ColumnName = "DestinationPortControllerID";
				colvarDestinationPortControllerID.DataType = DbType.Int32;
				colvarDestinationPortControllerID.MaxLength = 0;
				colvarDestinationPortControllerID.AutoIncrement = false;
				colvarDestinationPortControllerID.IsNullable = true;
				colvarDestinationPortControllerID.IsPrimaryKey = false;
				colvarDestinationPortControllerID.IsForeignKey = false;
				colvarDestinationPortControllerID.IsReadOnly = false;
				colvarDestinationPortControllerID.DefaultSetting = @"";
				colvarDestinationPortControllerID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDestinationPortControllerID);
				
				TableSchema.TableColumn colvarCustomersRef = new TableSchema.TableColumn(schema);
				colvarCustomersRef.ColumnName = "CustomersRef";
				colvarCustomersRef.DataType = DbType.String;
				colvarCustomersRef.MaxLength = 20;
				colvarCustomersRef.AutoIncrement = false;
				colvarCustomersRef.IsNullable = true;
				colvarCustomersRef.IsPrimaryKey = false;
				colvarCustomersRef.IsForeignKey = false;
				colvarCustomersRef.IsReadOnly = false;
				colvarCustomersRef.DefaultSetting = @"";
				colvarCustomersRef.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomersRef);
				
				TableSchema.TableColumn colvarContactID = new TableSchema.TableColumn(schema);
				colvarContactID.ColumnName = "ContactID";
				colvarContactID.DataType = DbType.Int32;
				colvarContactID.MaxLength = 0;
				colvarContactID.AutoIncrement = false;
				colvarContactID.IsNullable = true;
				colvarContactID.IsPrimaryKey = false;
				colvarContactID.IsForeignKey = false;
				colvarContactID.IsReadOnly = false;
				colvarContactID.DefaultSetting = @"";
				colvarContactID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarContactID);
				
				TableSchema.TableColumn colvarExWorksDate = new TableSchema.TableColumn(schema);
				colvarExWorksDate.ColumnName = "ExWorksDate";
				colvarExWorksDate.DataType = DbType.DateTime;
				colvarExWorksDate.MaxLength = 0;
				colvarExWorksDate.AutoIncrement = false;
				colvarExWorksDate.IsNullable = true;
				colvarExWorksDate.IsPrimaryKey = false;
				colvarExWorksDate.IsForeignKey = false;
				colvarExWorksDate.IsReadOnly = false;
				colvarExWorksDate.DefaultSetting = @"";
				colvarExWorksDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarExWorksDate);
				
				TableSchema.TableColumn colvarEWDLastUpdated = new TableSchema.TableColumn(schema);
				colvarEWDLastUpdated.ColumnName = "EWDLastUpdated";
				colvarEWDLastUpdated.DataType = DbType.DateTime;
				colvarEWDLastUpdated.MaxLength = 0;
				colvarEWDLastUpdated.AutoIncrement = false;
				colvarEWDLastUpdated.IsNullable = true;
				colvarEWDLastUpdated.IsPrimaryKey = false;
				colvarEWDLastUpdated.IsForeignKey = false;
				colvarEWDLastUpdated.IsReadOnly = false;
				colvarEWDLastUpdated.DefaultSetting = @"";
				colvarEWDLastUpdated.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEWDLastUpdated);
				
				TableSchema.TableColumn colvarCargoReady = new TableSchema.TableColumn(schema);
				colvarCargoReady.ColumnName = "CargoReady";
				colvarCargoReady.DataType = DbType.DateTime;
				colvarCargoReady.MaxLength = 0;
				colvarCargoReady.AutoIncrement = false;
				colvarCargoReady.IsNullable = true;
				colvarCargoReady.IsPrimaryKey = false;
				colvarCargoReady.IsForeignKey = false;
				colvarCargoReady.IsReadOnly = false;
				colvarCargoReady.DefaultSetting = @"";
				colvarCargoReady.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCargoReady);
				
				TableSchema.TableColumn colvarWarehouseDate = new TableSchema.TableColumn(schema);
				colvarWarehouseDate.ColumnName = "WarehouseDate";
				colvarWarehouseDate.DataType = DbType.DateTime;
				colvarWarehouseDate.MaxLength = 0;
				colvarWarehouseDate.AutoIncrement = false;
				colvarWarehouseDate.IsNullable = true;
				colvarWarehouseDate.IsPrimaryKey = false;
				colvarWarehouseDate.IsForeignKey = false;
				colvarWarehouseDate.IsReadOnly = false;
				colvarWarehouseDate.DefaultSetting = @"";
				colvarWarehouseDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarWarehouseDate);
				
				TableSchema.TableColumn colvarOnTime = new TableSchema.TableColumn(schema);
				colvarOnTime.ColumnName = "OnTime";
				colvarOnTime.DataType = DbType.Boolean;
				colvarOnTime.MaxLength = 0;
				colvarOnTime.AutoIncrement = false;
				colvarOnTime.IsNullable = true;
				colvarOnTime.IsPrimaryKey = false;
				colvarOnTime.IsForeignKey = false;
				colvarOnTime.IsReadOnly = false;
				colvarOnTime.DefaultSetting = @"";
				colvarOnTime.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOnTime);
				
				TableSchema.TableColumn colvarBookingReceived = new TableSchema.TableColumn(schema);
				colvarBookingReceived.ColumnName = "BookingReceived";
				colvarBookingReceived.DataType = DbType.DateTime;
				colvarBookingReceived.MaxLength = 0;
				colvarBookingReceived.AutoIncrement = false;
				colvarBookingReceived.IsNullable = true;
				colvarBookingReceived.IsPrimaryKey = false;
				colvarBookingReceived.IsForeignKey = false;
				colvarBookingReceived.IsReadOnly = false;
				colvarBookingReceived.DefaultSetting = @"";
				colvarBookingReceived.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBookingReceived);
				
				TableSchema.TableColumn colvarOriginPointID = new TableSchema.TableColumn(schema);
				colvarOriginPointID.ColumnName = "OriginPointID";
				colvarOriginPointID.DataType = DbType.Int32;
				colvarOriginPointID.MaxLength = 0;
				colvarOriginPointID.AutoIncrement = false;
				colvarOriginPointID.IsNullable = true;
				colvarOriginPointID.IsPrimaryKey = false;
				colvarOriginPointID.IsForeignKey = false;
				colvarOriginPointID.IsReadOnly = false;
				colvarOriginPointID.DefaultSetting = @"";
				colvarOriginPointID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOriginPointID);
				
				TableSchema.TableColumn colvarPortID = new TableSchema.TableColumn(schema);
				colvarPortID.ColumnName = "PortID";
				colvarPortID.DataType = DbType.Int32;
				colvarPortID.MaxLength = 0;
				colvarPortID.AutoIncrement = false;
				colvarPortID.IsNullable = true;
				colvarPortID.IsPrimaryKey = false;
				colvarPortID.IsForeignKey = false;
				colvarPortID.IsReadOnly = false;
				colvarPortID.DefaultSetting = @"";
				colvarPortID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPortID);
				
				TableSchema.TableColumn colvarDestinationPortID = new TableSchema.TableColumn(schema);
				colvarDestinationPortID.ColumnName = "DestinationPortID";
				colvarDestinationPortID.DataType = DbType.Int32;
				colvarDestinationPortID.MaxLength = 0;
				colvarDestinationPortID.AutoIncrement = false;
				colvarDestinationPortID.IsNullable = true;
				colvarDestinationPortID.IsPrimaryKey = false;
				colvarDestinationPortID.IsForeignKey = false;
				colvarDestinationPortID.IsReadOnly = false;
				colvarDestinationPortID.DefaultSetting = @"";
				colvarDestinationPortID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDestinationPortID);
				
				TableSchema.TableColumn colvarFinalDestinationID = new TableSchema.TableColumn(schema);
				colvarFinalDestinationID.ColumnName = "FinalDestinationID";
				colvarFinalDestinationID.DataType = DbType.Int32;
				colvarFinalDestinationID.MaxLength = 0;
				colvarFinalDestinationID.AutoIncrement = false;
				colvarFinalDestinationID.IsNullable = true;
				colvarFinalDestinationID.IsPrimaryKey = false;
				colvarFinalDestinationID.IsForeignKey = false;
				colvarFinalDestinationID.IsReadOnly = false;
				colvarFinalDestinationID.DefaultSetting = @"";
				colvarFinalDestinationID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFinalDestinationID);
				
				TableSchema.TableColumn colvarCountryID = new TableSchema.TableColumn(schema);
				colvarCountryID.ColumnName = "CountryID";
				colvarCountryID.DataType = DbType.Int32;
				colvarCountryID.MaxLength = 0;
				colvarCountryID.AutoIncrement = false;
				colvarCountryID.IsNullable = true;
				colvarCountryID.IsPrimaryKey = false;
				colvarCountryID.IsForeignKey = false;
				colvarCountryID.IsReadOnly = false;
				colvarCountryID.DefaultSetting = @"";
				colvarCountryID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCountryID);
				
				TableSchema.TableColumn colvarOldVesselName = new TableSchema.TableColumn(schema);
				colvarOldVesselName.ColumnName = "OldVesselName";
				colvarOldVesselName.DataType = DbType.String;
				colvarOldVesselName.MaxLength = 50;
				colvarOldVesselName.AutoIncrement = false;
				colvarOldVesselName.IsNullable = true;
				colvarOldVesselName.IsPrimaryKey = false;
				colvarOldVesselName.IsForeignKey = false;
				colvarOldVesselName.IsReadOnly = false;
				colvarOldVesselName.DefaultSetting = @"";
				colvarOldVesselName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOldVesselName);
				
				TableSchema.TableColumn colvarDestinationCountryID = new TableSchema.TableColumn(schema);
				colvarDestinationCountryID.ColumnName = "DestinationCountryID";
				colvarDestinationCountryID.DataType = DbType.Int32;
				colvarDestinationCountryID.MaxLength = 0;
				colvarDestinationCountryID.AutoIncrement = false;
				colvarDestinationCountryID.IsNullable = true;
				colvarDestinationCountryID.IsPrimaryKey = false;
				colvarDestinationCountryID.IsForeignKey = false;
				colvarDestinationCountryID.IsReadOnly = false;
				colvarDestinationCountryID.DefaultSetting = @"";
				colvarDestinationCountryID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDestinationCountryID);
				
				TableSchema.TableColumn colvarVesselID = new TableSchema.TableColumn(schema);
				colvarVesselID.ColumnName = "VesselID";
				colvarVesselID.DataType = DbType.Int32;
				colvarVesselID.MaxLength = 0;
				colvarVesselID.AutoIncrement = false;
				colvarVesselID.IsNullable = true;
				colvarVesselID.IsPrimaryKey = false;
				colvarVesselID.IsForeignKey = false;
				colvarVesselID.IsReadOnly = false;
				colvarVesselID.DefaultSetting = @"";
				colvarVesselID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarVesselID);
				
				TableSchema.TableColumn colvarVesselLastUpdated = new TableSchema.TableColumn(schema);
				colvarVesselLastUpdated.ColumnName = "VesselLastUpdated";
				colvarVesselLastUpdated.DataType = DbType.DateTime;
				colvarVesselLastUpdated.MaxLength = 0;
				colvarVesselLastUpdated.AutoIncrement = false;
				colvarVesselLastUpdated.IsNullable = true;
				colvarVesselLastUpdated.IsPrimaryKey = false;
				colvarVesselLastUpdated.IsForeignKey = false;
				colvarVesselLastUpdated.IsReadOnly = false;
				colvarVesselLastUpdated.DefaultSetting = @"";
				colvarVesselLastUpdated.ForeignKeyTableName = "";
				schema.Columns.Add(colvarVesselLastUpdated);
				
				TableSchema.TableColumn colvarEts = new TableSchema.TableColumn(schema);
				colvarEts.ColumnName = "ETS";
				colvarEts.DataType = DbType.DateTime;
				colvarEts.MaxLength = 0;
				colvarEts.AutoIncrement = false;
				colvarEts.IsNullable = true;
				colvarEts.IsPrimaryKey = false;
				colvarEts.IsForeignKey = false;
				colvarEts.IsReadOnly = false;
				colvarEts.DefaultSetting = @"";
				colvarEts.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEts);
				
				TableSchema.TableColumn colvarEta = new TableSchema.TableColumn(schema);
				colvarEta.ColumnName = "ETA";
				colvarEta.DataType = DbType.DateTime;
				colvarEta.MaxLength = 0;
				colvarEta.AutoIncrement = false;
				colvarEta.IsNullable = true;
				colvarEta.IsPrimaryKey = false;
				colvarEta.IsForeignKey = false;
				colvarEta.IsReadOnly = false;
				colvarEta.DefaultSetting = @"";
				colvarEta.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEta);
				
				TableSchema.TableColumn colvarPearsonDivCode = new TableSchema.TableColumn(schema);
				colvarPearsonDivCode.ColumnName = "PearsonDivCode";
				colvarPearsonDivCode.DataType = DbType.String;
				colvarPearsonDivCode.MaxLength = 50;
				colvarPearsonDivCode.AutoIncrement = false;
				colvarPearsonDivCode.IsNullable = true;
				colvarPearsonDivCode.IsPrimaryKey = false;
				colvarPearsonDivCode.IsForeignKey = false;
				colvarPearsonDivCode.IsReadOnly = false;
				colvarPearsonDivCode.DefaultSetting = @"";
				colvarPearsonDivCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPearsonDivCode);
				
				TableSchema.TableColumn colvarPearsonSSRRef = new TableSchema.TableColumn(schema);
				colvarPearsonSSRRef.ColumnName = "PearsonSSRRef";
				colvarPearsonSSRRef.DataType = DbType.String;
				colvarPearsonSSRRef.MaxLength = 50;
				colvarPearsonSSRRef.AutoIncrement = false;
				colvarPearsonSSRRef.IsNullable = true;
				colvarPearsonSSRRef.IsPrimaryKey = false;
				colvarPearsonSSRRef.IsForeignKey = false;
				colvarPearsonSSRRef.IsReadOnly = false;
				colvarPearsonSSRRef.DefaultSetting = @"";
				colvarPearsonSSRRef.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPearsonSSRRef);
				
				TableSchema.TableColumn colvarHouseBLNUmber = new TableSchema.TableColumn(schema);
				colvarHouseBLNUmber.ColumnName = "HouseBLNUmber";
				colvarHouseBLNUmber.DataType = DbType.String;
				colvarHouseBLNUmber.MaxLength = 50;
				colvarHouseBLNUmber.AutoIncrement = false;
				colvarHouseBLNUmber.IsNullable = true;
				colvarHouseBLNUmber.IsPrimaryKey = false;
				colvarHouseBLNUmber.IsForeignKey = false;
				colvarHouseBLNUmber.IsReadOnly = false;
				colvarHouseBLNUmber.DefaultSetting = @"";
				colvarHouseBLNUmber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHouseBLNUmber);
				
				TableSchema.TableColumn colvarHouseBLAdded = new TableSchema.TableColumn(schema);
				colvarHouseBLAdded.ColumnName = "HouseBLAdded";
				colvarHouseBLAdded.DataType = DbType.Boolean;
				colvarHouseBLAdded.MaxLength = 0;
				colvarHouseBLAdded.AutoIncrement = false;
				colvarHouseBLAdded.IsNullable = false;
				colvarHouseBLAdded.IsPrimaryKey = false;
				colvarHouseBLAdded.IsForeignKey = false;
				colvarHouseBLAdded.IsReadOnly = false;
				
						colvarHouseBLAdded.DefaultSetting = @"((0))";
				colvarHouseBLAdded.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHouseBLAdded);
				
				TableSchema.TableColumn colvarShippedOnBoard = new TableSchema.TableColumn(schema);
				colvarShippedOnBoard.ColumnName = "ShippedOnBoard";
				colvarShippedOnBoard.DataType = DbType.Boolean;
				colvarShippedOnBoard.MaxLength = 0;
				colvarShippedOnBoard.AutoIncrement = false;
				colvarShippedOnBoard.IsNullable = false;
				colvarShippedOnBoard.IsPrimaryKey = false;
				colvarShippedOnBoard.IsForeignKey = false;
				colvarShippedOnBoard.IsReadOnly = false;
				
						colvarShippedOnBoard.DefaultSetting = @"((0))";
				colvarShippedOnBoard.ForeignKeyTableName = "";
				schema.Columns.Add(colvarShippedOnBoard);
				
				TableSchema.TableColumn colvarEstCopies = new TableSchema.TableColumn(schema);
				colvarEstCopies.ColumnName = "EstCopies";
				colvarEstCopies.DataType = DbType.Single;
				colvarEstCopies.MaxLength = 0;
				colvarEstCopies.AutoIncrement = false;
				colvarEstCopies.IsNullable = true;
				colvarEstCopies.IsPrimaryKey = false;
				colvarEstCopies.IsForeignKey = false;
				colvarEstCopies.IsReadOnly = false;
				colvarEstCopies.DefaultSetting = @"";
				colvarEstCopies.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEstCopies);
				
				TableSchema.TableColumn colvarCopiesLastUpdated = new TableSchema.TableColumn(schema);
				colvarCopiesLastUpdated.ColumnName = "CopiesLastUpdated";
				colvarCopiesLastUpdated.DataType = DbType.DateTime;
				colvarCopiesLastUpdated.MaxLength = 0;
				colvarCopiesLastUpdated.AutoIncrement = false;
				colvarCopiesLastUpdated.IsNullable = true;
				colvarCopiesLastUpdated.IsPrimaryKey = false;
				colvarCopiesLastUpdated.IsForeignKey = false;
				colvarCopiesLastUpdated.IsReadOnly = false;
				colvarCopiesLastUpdated.DefaultSetting = @"";
				colvarCopiesLastUpdated.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCopiesLastUpdated);
				
				TableSchema.TableColumn colvarEstCartons = new TableSchema.TableColumn(schema);
				colvarEstCartons.ColumnName = "EstCartons";
				colvarEstCartons.DataType = DbType.Int32;
				colvarEstCartons.MaxLength = 0;
				colvarEstCartons.AutoIncrement = false;
				colvarEstCartons.IsNullable = true;
				colvarEstCartons.IsPrimaryKey = false;
				colvarEstCartons.IsForeignKey = false;
				colvarEstCartons.IsReadOnly = false;
				colvarEstCartons.DefaultSetting = @"";
				colvarEstCartons.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEstCartons);
				
				TableSchema.TableColumn colvarEstPallets = new TableSchema.TableColumn(schema);
				colvarEstPallets.ColumnName = "EstPallets";
				colvarEstPallets.DataType = DbType.Int32;
				colvarEstPallets.MaxLength = 0;
				colvarEstPallets.AutoIncrement = false;
				colvarEstPallets.IsNullable = true;
				colvarEstPallets.IsPrimaryKey = false;
				colvarEstPallets.IsForeignKey = false;
				colvarEstPallets.IsReadOnly = false;
				colvarEstPallets.DefaultSetting = @"";
				colvarEstPallets.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEstPallets);
				
				TableSchema.TableColumn colvarEstWeight = new TableSchema.TableColumn(schema);
				colvarEstWeight.ColumnName = "EstWeight";
				colvarEstWeight.DataType = DbType.Int32;
				colvarEstWeight.MaxLength = 0;
				colvarEstWeight.AutoIncrement = false;
				colvarEstWeight.IsNullable = true;
				colvarEstWeight.IsPrimaryKey = false;
				colvarEstWeight.IsForeignKey = false;
				colvarEstWeight.IsReadOnly = false;
				colvarEstWeight.DefaultSetting = @"";
				colvarEstWeight.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEstWeight);
				
				TableSchema.TableColumn colvarEstVolume = new TableSchema.TableColumn(schema);
				colvarEstVolume.ColumnName = "EstVolume";
				colvarEstVolume.DataType = DbType.Single;
				colvarEstVolume.MaxLength = 0;
				colvarEstVolume.AutoIncrement = false;
				colvarEstVolume.IsNullable = true;
				colvarEstVolume.IsPrimaryKey = false;
				colvarEstVolume.IsForeignKey = false;
				colvarEstVolume.IsReadOnly = false;
				colvarEstVolume.DefaultSetting = @"";
				colvarEstVolume.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEstVolume);
				
				TableSchema.TableColumn colvarPalletise = new TableSchema.TableColumn(schema);
				colvarPalletise.ColumnName = "Palletise";
				colvarPalletise.DataType = DbType.Int32;
				colvarPalletise.MaxLength = 0;
				colvarPalletise.AutoIncrement = false;
				colvarPalletise.IsNullable = true;
				colvarPalletise.IsPrimaryKey = false;
				colvarPalletise.IsForeignKey = false;
				colvarPalletise.IsReadOnly = false;
				colvarPalletise.DefaultSetting = @"";
				colvarPalletise.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPalletise);
				
				TableSchema.TableColumn colvarPackageTypeID = new TableSchema.TableColumn(schema);
				colvarPackageTypeID.ColumnName = "PackageTypeID";
				colvarPackageTypeID.DataType = DbType.Int32;
				colvarPackageTypeID.MaxLength = 0;
				colvarPackageTypeID.AutoIncrement = false;
				colvarPackageTypeID.IsNullable = true;
				colvarPackageTypeID.IsPrimaryKey = false;
				colvarPackageTypeID.IsForeignKey = false;
				colvarPackageTypeID.IsReadOnly = false;
				colvarPackageTypeID.DefaultSetting = @"";
				colvarPackageTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPackageTypeID);
				
				TableSchema.TableColumn colvarNumberOfPackages = new TableSchema.TableColumn(schema);
				colvarNumberOfPackages.ColumnName = "NumberOfPackages";
				colvarNumberOfPackages.DataType = DbType.Int32;
				colvarNumberOfPackages.MaxLength = 0;
				colvarNumberOfPackages.AutoIncrement = false;
				colvarNumberOfPackages.IsNullable = true;
				colvarNumberOfPackages.IsPrimaryKey = false;
				colvarNumberOfPackages.IsForeignKey = false;
				colvarNumberOfPackages.IsReadOnly = false;
				colvarNumberOfPackages.DefaultSetting = @"";
				colvarNumberOfPackages.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNumberOfPackages);
				
				TableSchema.TableColumn colvarActualCartons = new TableSchema.TableColumn(schema);
				colvarActualCartons.ColumnName = "ActualCartons";
				colvarActualCartons.DataType = DbType.Int32;
				colvarActualCartons.MaxLength = 0;
				colvarActualCartons.AutoIncrement = false;
				colvarActualCartons.IsNullable = true;
				colvarActualCartons.IsPrimaryKey = false;
				colvarActualCartons.IsForeignKey = false;
				colvarActualCartons.IsReadOnly = false;
				colvarActualCartons.DefaultSetting = @"";
				colvarActualCartons.ForeignKeyTableName = "";
				schema.Columns.Add(colvarActualCartons);
				
				TableSchema.TableColumn colvarActualPallets = new TableSchema.TableColumn(schema);
				colvarActualPallets.ColumnName = "ActualPallets";
				colvarActualPallets.DataType = DbType.Int32;
				colvarActualPallets.MaxLength = 0;
				colvarActualPallets.AutoIncrement = false;
				colvarActualPallets.IsNullable = true;
				colvarActualPallets.IsPrimaryKey = false;
				colvarActualPallets.IsForeignKey = false;
				colvarActualPallets.IsReadOnly = false;
				colvarActualPallets.DefaultSetting = @"";
				colvarActualPallets.ForeignKeyTableName = "";
				schema.Columns.Add(colvarActualPallets);
				
				TableSchema.TableColumn colvarJackets = new TableSchema.TableColumn(schema);
				colvarJackets.ColumnName = "Jackets";
				colvarJackets.DataType = DbType.Int32;
				colvarJackets.MaxLength = 0;
				colvarJackets.AutoIncrement = false;
				colvarJackets.IsNullable = true;
				colvarJackets.IsPrimaryKey = false;
				colvarJackets.IsForeignKey = false;
				colvarJackets.IsReadOnly = false;
				colvarJackets.DefaultSetting = @"";
				colvarJackets.ForeignKeyTableName = "";
				schema.Columns.Add(colvarJackets);
				
				TableSchema.TableColumn colvarActualWeight = new TableSchema.TableColumn(schema);
				colvarActualWeight.ColumnName = "ActualWeight";
				colvarActualWeight.DataType = DbType.Int32;
				colvarActualWeight.MaxLength = 0;
				colvarActualWeight.AutoIncrement = false;
				colvarActualWeight.IsNullable = true;
				colvarActualWeight.IsPrimaryKey = false;
				colvarActualWeight.IsForeignKey = false;
				colvarActualWeight.IsReadOnly = false;
				colvarActualWeight.DefaultSetting = @"";
				colvarActualWeight.ForeignKeyTableName = "";
				schema.Columns.Add(colvarActualWeight);
				
				TableSchema.TableColumn colvarWeightLastUpdated = new TableSchema.TableColumn(schema);
				colvarWeightLastUpdated.ColumnName = "WeightLastUpdated";
				colvarWeightLastUpdated.DataType = DbType.DateTime;
				colvarWeightLastUpdated.MaxLength = 0;
				colvarWeightLastUpdated.AutoIncrement = false;
				colvarWeightLastUpdated.IsNullable = true;
				colvarWeightLastUpdated.IsPrimaryKey = false;
				colvarWeightLastUpdated.IsForeignKey = false;
				colvarWeightLastUpdated.IsReadOnly = false;
				colvarWeightLastUpdated.DefaultSetting = @"";
				colvarWeightLastUpdated.ForeignKeyTableName = "";
				schema.Columns.Add(colvarWeightLastUpdated);
				
				TableSchema.TableColumn colvarActualVolume = new TableSchema.TableColumn(schema);
				colvarActualVolume.ColumnName = "ActualVolume";
				colvarActualVolume.DataType = DbType.Single;
				colvarActualVolume.MaxLength = 0;
				colvarActualVolume.AutoIncrement = false;
				colvarActualVolume.IsNullable = true;
				colvarActualVolume.IsPrimaryKey = false;
				colvarActualVolume.IsForeignKey = false;
				colvarActualVolume.IsReadOnly = false;
				colvarActualVolume.DefaultSetting = @"";
				colvarActualVolume.ForeignKeyTableName = "";
				schema.Columns.Add(colvarActualVolume);
				
				TableSchema.TableColumn colvarVolumeLastUpdated = new TableSchema.TableColumn(schema);
				colvarVolumeLastUpdated.ColumnName = "VolumeLastUpdated";
				colvarVolumeLastUpdated.DataType = DbType.DateTime;
				colvarVolumeLastUpdated.MaxLength = 0;
				colvarVolumeLastUpdated.AutoIncrement = false;
				colvarVolumeLastUpdated.IsNullable = true;
				colvarVolumeLastUpdated.IsPrimaryKey = false;
				colvarVolumeLastUpdated.IsForeignKey = false;
				colvarVolumeLastUpdated.IsReadOnly = false;
				colvarVolumeLastUpdated.DefaultSetting = @"";
				colvarVolumeLastUpdated.ForeignKeyTableName = "";
				schema.Columns.Add(colvarVolumeLastUpdated);
				
				TableSchema.TableColumn colvarFcllcl = new TableSchema.TableColumn(schema);
				colvarFcllcl.ColumnName = "FCLLCL";
				colvarFcllcl.DataType = DbType.Boolean;
				colvarFcllcl.MaxLength = 0;
				colvarFcllcl.AutoIncrement = false;
				colvarFcllcl.IsNullable = true;
				colvarFcllcl.IsPrimaryKey = false;
				colvarFcllcl.IsForeignKey = false;
				colvarFcllcl.IsReadOnly = false;
				colvarFcllcl.DefaultSetting = @"";
				colvarFcllcl.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFcllcl);
				
				TableSchema.TableColumn colvarEst20 = new TableSchema.TableColumn(schema);
				colvarEst20.ColumnName = "Est20";
				colvarEst20.DataType = DbType.Int32;
				colvarEst20.MaxLength = 0;
				colvarEst20.AutoIncrement = false;
				colvarEst20.IsNullable = true;
				colvarEst20.IsPrimaryKey = false;
				colvarEst20.IsForeignKey = false;
				colvarEst20.IsReadOnly = false;
				colvarEst20.DefaultSetting = @"";
				colvarEst20.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEst20);
				
				TableSchema.TableColumn colvarEst40 = new TableSchema.TableColumn(schema);
				colvarEst40.ColumnName = "Est40";
				colvarEst40.DataType = DbType.Int32;
				colvarEst40.MaxLength = 0;
				colvarEst40.AutoIncrement = false;
				colvarEst40.IsNullable = true;
				colvarEst40.IsPrimaryKey = false;
				colvarEst40.IsForeignKey = false;
				colvarEst40.IsReadOnly = false;
				colvarEst40.DefaultSetting = @"";
				colvarEst40.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEst40);
				
				TableSchema.TableColumn colvarEstLCLWt = new TableSchema.TableColumn(schema);
				colvarEstLCLWt.ColumnName = "EstLCLWt";
				colvarEstLCLWt.DataType = DbType.Int32;
				colvarEstLCLWt.MaxLength = 0;
				colvarEstLCLWt.AutoIncrement = false;
				colvarEstLCLWt.IsNullable = true;
				colvarEstLCLWt.IsPrimaryKey = false;
				colvarEstLCLWt.IsForeignKey = false;
				colvarEstLCLWt.IsReadOnly = false;
				colvarEstLCLWt.DefaultSetting = @"";
				colvarEstLCLWt.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEstLCLWt);
				
				TableSchema.TableColumn colvarEstLCLVol = new TableSchema.TableColumn(schema);
				colvarEstLCLVol.ColumnName = "EstLCLVol";
				colvarEstLCLVol.DataType = DbType.Single;
				colvarEstLCLVol.MaxLength = 0;
				colvarEstLCLVol.AutoIncrement = false;
				colvarEstLCLVol.IsNullable = true;
				colvarEstLCLVol.IsPrimaryKey = false;
				colvarEstLCLVol.IsForeignKey = false;
				colvarEstLCLVol.IsReadOnly = false;
				colvarEstLCLVol.DefaultSetting = @"";
				colvarEstLCLVol.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEstLCLVol);
				
				TableSchema.TableColumn colvarNo20 = new TableSchema.TableColumn(schema);
				colvarNo20.ColumnName = "No20";
				colvarNo20.DataType = DbType.Int32;
				colvarNo20.MaxLength = 0;
				colvarNo20.AutoIncrement = false;
				colvarNo20.IsNullable = true;
				colvarNo20.IsPrimaryKey = false;
				colvarNo20.IsForeignKey = false;
				colvarNo20.IsReadOnly = false;
				colvarNo20.DefaultSetting = @"";
				colvarNo20.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNo20);
				
				TableSchema.TableColumn colvarNo40 = new TableSchema.TableColumn(schema);
				colvarNo40.ColumnName = "No40";
				colvarNo40.DataType = DbType.Int32;
				colvarNo40.MaxLength = 0;
				colvarNo40.AutoIncrement = false;
				colvarNo40.IsNullable = true;
				colvarNo40.IsPrimaryKey = false;
				colvarNo40.IsForeignKey = false;
				colvarNo40.IsReadOnly = false;
				colvarNo40.DefaultSetting = @"";
				colvarNo40.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNo40);
				
				TableSchema.TableColumn colvarLCLWt = new TableSchema.TableColumn(schema);
				colvarLCLWt.ColumnName = "LCLWt";
				colvarLCLWt.DataType = DbType.Int32;
				colvarLCLWt.MaxLength = 0;
				colvarLCLWt.AutoIncrement = false;
				colvarLCLWt.IsNullable = true;
				colvarLCLWt.IsPrimaryKey = false;
				colvarLCLWt.IsForeignKey = false;
				colvarLCLWt.IsReadOnly = false;
				colvarLCLWt.DefaultSetting = @"";
				colvarLCLWt.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLCLWt);
				
				TableSchema.TableColumn colvarLCLVol = new TableSchema.TableColumn(schema);
				colvarLCLVol.ColumnName = "LCLVol";
				colvarLCLVol.DataType = DbType.Single;
				colvarLCLVol.MaxLength = 0;
				colvarLCLVol.AutoIncrement = false;
				colvarLCLVol.IsNullable = true;
				colvarLCLVol.IsPrimaryKey = false;
				colvarLCLVol.IsForeignKey = false;
				colvarLCLVol.IsReadOnly = false;
				colvarLCLVol.DefaultSetting = @"";
				colvarLCLVol.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLCLVol);
				
				TableSchema.TableColumn colvarRemarks = new TableSchema.TableColumn(schema);
				colvarRemarks.ColumnName = "Remarks";
				colvarRemarks.DataType = DbType.String;
				colvarRemarks.MaxLength = 1073741823;
				colvarRemarks.AutoIncrement = false;
				colvarRemarks.IsNullable = true;
				colvarRemarks.IsPrimaryKey = false;
				colvarRemarks.IsForeignKey = false;
				colvarRemarks.IsReadOnly = false;
				colvarRemarks.DefaultSetting = @"";
				colvarRemarks.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRemarks);
				
				TableSchema.TableColumn colvarRemarksToCustomer = new TableSchema.TableColumn(schema);
				colvarRemarksToCustomer.ColumnName = "RemarksToCustomer";
				colvarRemarksToCustomer.DataType = DbType.String;
				colvarRemarksToCustomer.MaxLength = 1073741823;
				colvarRemarksToCustomer.AutoIncrement = false;
				colvarRemarksToCustomer.IsNullable = true;
				colvarRemarksToCustomer.IsPrimaryKey = false;
				colvarRemarksToCustomer.IsForeignKey = false;
				colvarRemarksToCustomer.IsReadOnly = false;
				colvarRemarksToCustomer.DefaultSetting = @"";
				colvarRemarksToCustomer.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRemarksToCustomer);
				
				TableSchema.TableColumn colvarQuoteRef = new TableSchema.TableColumn(schema);
				colvarQuoteRef.ColumnName = "QuoteRef";
				colvarQuoteRef.DataType = DbType.Int32;
				colvarQuoteRef.MaxLength = 0;
				colvarQuoteRef.AutoIncrement = false;
				colvarQuoteRef.IsNullable = true;
				colvarQuoteRef.IsPrimaryKey = false;
				colvarQuoteRef.IsForeignKey = false;
				colvarQuoteRef.IsReadOnly = false;
				colvarQuoteRef.DefaultSetting = @"";
				colvarQuoteRef.ForeignKeyTableName = "";
				schema.Columns.Add(colvarQuoteRef);
				
				TableSchema.TableColumn colvarSellingrate = new TableSchema.TableColumn(schema);
				colvarSellingrate.ColumnName = "Sellingrate";
				colvarSellingrate.DataType = DbType.String;
				colvarSellingrate.MaxLength = 50;
				colvarSellingrate.AutoIncrement = false;
				colvarSellingrate.IsNullable = true;
				colvarSellingrate.IsPrimaryKey = false;
				colvarSellingrate.IsForeignKey = false;
				colvarSellingrate.IsReadOnly = false;
				colvarSellingrate.DefaultSetting = @"";
				colvarSellingrate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSellingrate);
				
				TableSchema.TableColumn colvarSellingrateAgent = new TableSchema.TableColumn(schema);
				colvarSellingrateAgent.ColumnName = "SellingrateAgent";
				colvarSellingrateAgent.DataType = DbType.String;
				colvarSellingrateAgent.MaxLength = 50;
				colvarSellingrateAgent.AutoIncrement = false;
				colvarSellingrateAgent.IsNullable = true;
				colvarSellingrateAgent.IsPrimaryKey = false;
				colvarSellingrateAgent.IsForeignKey = false;
				colvarSellingrateAgent.IsReadOnly = false;
				colvarSellingrateAgent.DefaultSetting = @"";
				colvarSellingrateAgent.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSellingrateAgent);
				
				TableSchema.TableColumn colvarDocsRcdAndApproved = new TableSchema.TableColumn(schema);
				colvarDocsRcdAndApproved.ColumnName = "DocsRcdAndApproved";
				colvarDocsRcdAndApproved.DataType = DbType.Boolean;
				colvarDocsRcdAndApproved.MaxLength = 0;
				colvarDocsRcdAndApproved.AutoIncrement = false;
				colvarDocsRcdAndApproved.IsNullable = false;
				colvarDocsRcdAndApproved.IsPrimaryKey = false;
				colvarDocsRcdAndApproved.IsForeignKey = false;
				colvarDocsRcdAndApproved.IsReadOnly = false;
				
						colvarDocsRcdAndApproved.DefaultSetting = @"((0))";
				colvarDocsRcdAndApproved.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDocsRcdAndApproved);
				
				TableSchema.TableColumn colvarDocsApprovedDate = new TableSchema.TableColumn(schema);
				colvarDocsApprovedDate.ColumnName = "DocsApprovedDate";
				colvarDocsApprovedDate.DataType = DbType.DateTime;
				colvarDocsApprovedDate.MaxLength = 0;
				colvarDocsApprovedDate.AutoIncrement = false;
				colvarDocsApprovedDate.IsNullable = true;
				colvarDocsApprovedDate.IsPrimaryKey = false;
				colvarDocsApprovedDate.IsForeignKey = false;
				colvarDocsApprovedDate.IsReadOnly = false;
				colvarDocsApprovedDate.DefaultSetting = @"";
				colvarDocsApprovedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDocsApprovedDate);
				
				TableSchema.TableColumn colvarJobClosureDate = new TableSchema.TableColumn(schema);
				colvarJobClosureDate.ColumnName = "JobClosureDate";
				colvarJobClosureDate.DataType = DbType.DateTime;
				colvarJobClosureDate.MaxLength = 0;
				colvarJobClosureDate.AutoIncrement = false;
				colvarJobClosureDate.IsNullable = true;
				colvarJobClosureDate.IsPrimaryKey = false;
				colvarJobClosureDate.IsForeignKey = false;
				colvarJobClosureDate.IsReadOnly = false;
				colvarJobClosureDate.DefaultSetting = @"";
				colvarJobClosureDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarJobClosureDate);
				
				TableSchema.TableColumn colvarJobClosed = new TableSchema.TableColumn(schema);
				colvarJobClosed.ColumnName = "JobClosed";
				colvarJobClosed.DataType = DbType.Boolean;
				colvarJobClosed.MaxLength = 0;
				colvarJobClosed.AutoIncrement = false;
				colvarJobClosed.IsNullable = false;
				colvarJobClosed.IsPrimaryKey = false;
				colvarJobClosed.IsForeignKey = false;
				colvarJobClosed.IsReadOnly = false;
				
						colvarJobClosed.DefaultSetting = @"((0))";
				colvarJobClosed.ForeignKeyTableName = "";
				schema.Columns.Add(colvarJobClosed);
				
				TableSchema.TableColumn colvarExpressBL = new TableSchema.TableColumn(schema);
				colvarExpressBL.ColumnName = "ExpressBL";
				colvarExpressBL.DataType = DbType.Boolean;
				colvarExpressBL.MaxLength = 0;
				colvarExpressBL.AutoIncrement = false;
				colvarExpressBL.IsNullable = false;
				colvarExpressBL.IsPrimaryKey = false;
				colvarExpressBL.IsForeignKey = false;
				colvarExpressBL.IsReadOnly = false;
				
						colvarExpressBL.DefaultSetting = @"((0))";
				colvarExpressBL.ForeignKeyTableName = "";
				schema.Columns.Add(colvarExpressBL);
				
				TableSchema.TableColumn colvarFumigationCert = new TableSchema.TableColumn(schema);
				colvarFumigationCert.ColumnName = "FumigationCert";
				colvarFumigationCert.DataType = DbType.Boolean;
				colvarFumigationCert.MaxLength = 0;
				colvarFumigationCert.AutoIncrement = false;
				colvarFumigationCert.IsNullable = false;
				colvarFumigationCert.IsPrimaryKey = false;
				colvarFumigationCert.IsForeignKey = false;
				colvarFumigationCert.IsReadOnly = false;
				
						colvarFumigationCert.DefaultSetting = @"((0))";
				colvarFumigationCert.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFumigationCert);
				
				TableSchema.TableColumn colvarGSPCert = new TableSchema.TableColumn(schema);
				colvarGSPCert.ColumnName = "GSPCert";
				colvarGSPCert.DataType = DbType.Boolean;
				colvarGSPCert.MaxLength = 0;
				colvarGSPCert.AutoIncrement = false;
				colvarGSPCert.IsNullable = false;
				colvarGSPCert.IsPrimaryKey = false;
				colvarGSPCert.IsForeignKey = false;
				colvarGSPCert.IsReadOnly = false;
				
						colvarGSPCert.DefaultSetting = @"((0))";
				colvarGSPCert.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGSPCert);
				
				TableSchema.TableColumn colvarCOfO = new TableSchema.TableColumn(schema);
				colvarCOfO.ColumnName = "COfO";
				colvarCOfO.DataType = DbType.Boolean;
				colvarCOfO.MaxLength = 0;
				colvarCOfO.AutoIncrement = false;
				colvarCOfO.IsNullable = false;
				colvarCOfO.IsPrimaryKey = false;
				colvarCOfO.IsForeignKey = false;
				colvarCOfO.IsReadOnly = false;
				
						colvarCOfO.DefaultSetting = @"((0))";
				colvarCOfO.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCOfO);
				
				TableSchema.TableColumn colvarPackingDeclaration = new TableSchema.TableColumn(schema);
				colvarPackingDeclaration.ColumnName = "PackingDeclaration";
				colvarPackingDeclaration.DataType = DbType.Boolean;
				colvarPackingDeclaration.MaxLength = 0;
				colvarPackingDeclaration.AutoIncrement = false;
				colvarPackingDeclaration.IsNullable = false;
				colvarPackingDeclaration.IsPrimaryKey = false;
				colvarPackingDeclaration.IsForeignKey = false;
				colvarPackingDeclaration.IsReadOnly = false;
				
						colvarPackingDeclaration.DefaultSetting = @"((0))";
				colvarPackingDeclaration.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPackingDeclaration);
				
				TableSchema.TableColumn colvarOtherDocsRequired = new TableSchema.TableColumn(schema);
				colvarOtherDocsRequired.ColumnName = "OtherDocsRequired";
				colvarOtherDocsRequired.DataType = DbType.String;
				colvarOtherDocsRequired.MaxLength = 50;
				colvarOtherDocsRequired.AutoIncrement = false;
				colvarOtherDocsRequired.IsNullable = true;
				colvarOtherDocsRequired.IsPrimaryKey = false;
				colvarOtherDocsRequired.IsForeignKey = false;
				colvarOtherDocsRequired.IsReadOnly = false;
				colvarOtherDocsRequired.DefaultSetting = @"";
				colvarOtherDocsRequired.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOtherDocsRequired);
				
				TableSchema.TableColumn colvarIncoterms = new TableSchema.TableColumn(schema);
				colvarIncoterms.ColumnName = "Incoterms";
				colvarIncoterms.DataType = DbType.String;
				colvarIncoterms.MaxLength = 50;
				colvarIncoterms.AutoIncrement = false;
				colvarIncoterms.IsNullable = true;
				colvarIncoterms.IsPrimaryKey = false;
				colvarIncoterms.IsForeignKey = false;
				colvarIncoterms.IsReadOnly = false;
				colvarIncoterms.DefaultSetting = @"";
				colvarIncoterms.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIncoterms);
				
				TableSchema.TableColumn colvarPricePerCopy = new TableSchema.TableColumn(schema);
				colvarPricePerCopy.ColumnName = "PricePerCopy";
				colvarPricePerCopy.DataType = DbType.Single;
				colvarPricePerCopy.MaxLength = 0;
				colvarPricePerCopy.AutoIncrement = false;
				colvarPricePerCopy.IsNullable = true;
				colvarPricePerCopy.IsPrimaryKey = false;
				colvarPricePerCopy.IsForeignKey = false;
				colvarPricePerCopy.IsReadOnly = false;
				colvarPricePerCopy.DefaultSetting = @"";
				colvarPricePerCopy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPricePerCopy);
				
				TableSchema.TableColumn colvarCustoms = new TableSchema.TableColumn(schema);
				colvarCustoms.ColumnName = "Customs";
				colvarCustoms.DataType = DbType.String;
				colvarCustoms.MaxLength = 15;
				colvarCustoms.AutoIncrement = false;
				colvarCustoms.IsNullable = true;
				colvarCustoms.IsPrimaryKey = false;
				colvarCustoms.IsForeignKey = false;
				colvarCustoms.IsReadOnly = false;
				colvarCustoms.DefaultSetting = @"";
				colvarCustoms.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustoms);
				
				TableSchema.TableColumn colvarCurrency = new TableSchema.TableColumn(schema);
				colvarCurrency.ColumnName = "Currency";
				colvarCurrency.DataType = DbType.String;
				colvarCurrency.MaxLength = 3;
				colvarCurrency.AutoIncrement = false;
				colvarCurrency.IsNullable = true;
				colvarCurrency.IsPrimaryKey = false;
				colvarCurrency.IsForeignKey = false;
				colvarCurrency.IsReadOnly = false;
				colvarCurrency.DefaultSetting = @"";
				colvarCurrency.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCurrency);
				
				TableSchema.TableColumn colvarInvoiceAddresseeID = new TableSchema.TableColumn(schema);
				colvarInvoiceAddresseeID.ColumnName = "InvoiceAddresseeID";
				colvarInvoiceAddresseeID.DataType = DbType.Int32;
				colvarInvoiceAddresseeID.MaxLength = 0;
				colvarInvoiceAddresseeID.AutoIncrement = false;
				colvarInvoiceAddresseeID.IsNullable = true;
				colvarInvoiceAddresseeID.IsPrimaryKey = false;
				colvarInvoiceAddresseeID.IsForeignKey = false;
				colvarInvoiceAddresseeID.IsReadOnly = false;
				colvarInvoiceAddresseeID.DefaultSetting = @"";
				colvarInvoiceAddresseeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInvoiceAddresseeID);
				
				TableSchema.TableColumn colvarConsolNumber = new TableSchema.TableColumn(schema);
				colvarConsolNumber.ColumnName = "ConsolNumber";
				colvarConsolNumber.DataType = DbType.Int32;
				colvarConsolNumber.MaxLength = 0;
				colvarConsolNumber.AutoIncrement = false;
				colvarConsolNumber.IsNullable = true;
				colvarConsolNumber.IsPrimaryKey = false;
				colvarConsolNumber.IsForeignKey = false;
				colvarConsolNumber.IsReadOnly = false;
				colvarConsolNumber.DefaultSetting = @"";
				colvarConsolNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarConsolNumber);
				
				TableSchema.TableColumn colvarUnitPricePerCopy = new TableSchema.TableColumn(schema);
				colvarUnitPricePerCopy.ColumnName = "UnitPricePerCopy";
				colvarUnitPricePerCopy.DataType = DbType.Single;
				colvarUnitPricePerCopy.MaxLength = 0;
				colvarUnitPricePerCopy.AutoIncrement = false;
				colvarUnitPricePerCopy.IsNullable = true;
				colvarUnitPricePerCopy.IsPrimaryKey = false;
				colvarUnitPricePerCopy.IsForeignKey = false;
				colvarUnitPricePerCopy.IsReadOnly = false;
				colvarUnitPricePerCopy.DefaultSetting = @"";
				colvarUnitPricePerCopy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUnitPricePerCopy);
				
				TableSchema.TableColumn colvarOnHold = new TableSchema.TableColumn(schema);
				colvarOnHold.ColumnName = "OnHold";
				colvarOnHold.DataType = DbType.Boolean;
				colvarOnHold.MaxLength = 0;
				colvarOnHold.AutoIncrement = false;
				colvarOnHold.IsNullable = false;
				colvarOnHold.IsPrimaryKey = false;
				colvarOnHold.IsForeignKey = false;
				colvarOnHold.IsReadOnly = false;
				
						colvarOnHold.DefaultSetting = @"((0))";
				colvarOnHold.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOnHold);
				
				TableSchema.TableColumn colvarContainerInfo = new TableSchema.TableColumn(schema);
				colvarContainerInfo.ColumnName = "ContainerInfo";
				colvarContainerInfo.DataType = DbType.String;
				colvarContainerInfo.MaxLength = 100;
				colvarContainerInfo.AutoIncrement = false;
				colvarContainerInfo.IsNullable = true;
				colvarContainerInfo.IsPrimaryKey = false;
				colvarContainerInfo.IsForeignKey = false;
				colvarContainerInfo.IsReadOnly = false;
				colvarContainerInfo.DefaultSetting = @"";
				colvarContainerInfo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarContainerInfo);
				
				TableSchema.TableColumn colvarCleared = new TableSchema.TableColumn(schema);
				colvarCleared.ColumnName = "Cleared";
				colvarCleared.DataType = DbType.DateTime;
				colvarCleared.MaxLength = 0;
				colvarCleared.AutoIncrement = false;
				colvarCleared.IsNullable = true;
				colvarCleared.IsPrimaryKey = false;
				colvarCleared.IsForeignKey = false;
				colvarCleared.IsReadOnly = false;
				colvarCleared.DefaultSetting = @"";
				colvarCleared.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCleared);
				
				TableSchema.TableColumn colvarHodderPricePerCopy = new TableSchema.TableColumn(schema);
				colvarHodderPricePerCopy.ColumnName = "HodderPricePerCopy";
				colvarHodderPricePerCopy.DataType = DbType.Single;
				colvarHodderPricePerCopy.MaxLength = 0;
				colvarHodderPricePerCopy.AutoIncrement = false;
				colvarHodderPricePerCopy.IsNullable = true;
				colvarHodderPricePerCopy.IsPrimaryKey = false;
				colvarHodderPricePerCopy.IsForeignKey = false;
				colvarHodderPricePerCopy.IsReadOnly = false;
				colvarHodderPricePerCopy.DefaultSetting = @"";
				colvarHodderPricePerCopy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHodderPricePerCopy);
				
				TableSchema.TableColumn colvarFileCoverPrintedOrigin = new TableSchema.TableColumn(schema);
				colvarFileCoverPrintedOrigin.ColumnName = "FileCoverPrintedOrigin";
				colvarFileCoverPrintedOrigin.DataType = DbType.Boolean;
				colvarFileCoverPrintedOrigin.MaxLength = 0;
				colvarFileCoverPrintedOrigin.AutoIncrement = false;
				colvarFileCoverPrintedOrigin.IsNullable = false;
				colvarFileCoverPrintedOrigin.IsPrimaryKey = false;
				colvarFileCoverPrintedOrigin.IsForeignKey = false;
				colvarFileCoverPrintedOrigin.IsReadOnly = false;
				
						colvarFileCoverPrintedOrigin.DefaultSetting = @"((0))";
				colvarFileCoverPrintedOrigin.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFileCoverPrintedOrigin);
				
				TableSchema.TableColumn colvarFileCoverPrintedDest = new TableSchema.TableColumn(schema);
				colvarFileCoverPrintedDest.ColumnName = "FileCoverPrintedDest";
				colvarFileCoverPrintedDest.DataType = DbType.Boolean;
				colvarFileCoverPrintedDest.MaxLength = 0;
				colvarFileCoverPrintedDest.AutoIncrement = false;
				colvarFileCoverPrintedDest.IsNullable = false;
				colvarFileCoverPrintedDest.IsPrimaryKey = false;
				colvarFileCoverPrintedDest.IsForeignKey = false;
				colvarFileCoverPrintedDest.IsReadOnly = false;
				
						colvarFileCoverPrintedDest.DefaultSetting = @"((0))";
				colvarFileCoverPrintedDest.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFileCoverPrintedDest);
				
				TableSchema.TableColumn colvarClientsTerms = new TableSchema.TableColumn(schema);
				colvarClientsTerms.ColumnName = "ClientsTerms";
				colvarClientsTerms.DataType = DbType.String;
				colvarClientsTerms.MaxLength = 50;
				colvarClientsTerms.AutoIncrement = false;
				colvarClientsTerms.IsNullable = true;
				colvarClientsTerms.IsPrimaryKey = false;
				colvarClientsTerms.IsForeignKey = false;
				colvarClientsTerms.IsReadOnly = false;
				colvarClientsTerms.DefaultSetting = @"";
				colvarClientsTerms.ForeignKeyTableName = "";
				schema.Columns.Add(colvarClientsTerms);
				
				TableSchema.TableColumn colvarOriginTrucking = new TableSchema.TableColumn(schema);
				colvarOriginTrucking.ColumnName = "OriginTrucking";
				colvarOriginTrucking.DataType = DbType.String;
				colvarOriginTrucking.MaxLength = 50;
				colvarOriginTrucking.AutoIncrement = false;
				colvarOriginTrucking.IsNullable = true;
				colvarOriginTrucking.IsPrimaryKey = false;
				colvarOriginTrucking.IsForeignKey = false;
				colvarOriginTrucking.IsReadOnly = false;
				colvarOriginTrucking.DefaultSetting = @"";
				colvarOriginTrucking.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOriginTrucking);
				
				TableSchema.TableColumn colvarOrignTHC = new TableSchema.TableColumn(schema);
				colvarOrignTHC.ColumnName = "OrignTHC";
				colvarOrignTHC.DataType = DbType.String;
				colvarOrignTHC.MaxLength = 50;
				colvarOrignTHC.AutoIncrement = false;
				colvarOrignTHC.IsNullable = true;
				colvarOrignTHC.IsPrimaryKey = false;
				colvarOrignTHC.IsForeignKey = false;
				colvarOrignTHC.IsReadOnly = false;
				colvarOrignTHC.DefaultSetting = @"";
				colvarOrignTHC.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOrignTHC);
				
				TableSchema.TableColumn colvarOriginDocs = new TableSchema.TableColumn(schema);
				colvarOriginDocs.ColumnName = "OriginDocs";
				colvarOriginDocs.DataType = DbType.String;
				colvarOriginDocs.MaxLength = 50;
				colvarOriginDocs.AutoIncrement = false;
				colvarOriginDocs.IsNullable = true;
				colvarOriginDocs.IsPrimaryKey = false;
				colvarOriginDocs.IsForeignKey = false;
				colvarOriginDocs.IsReadOnly = false;
				colvarOriginDocs.DefaultSetting = @"";
				colvarOriginDocs.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOriginDocs);
				
				TableSchema.TableColumn colvarFreight = new TableSchema.TableColumn(schema);
				colvarFreight.ColumnName = "Freight";
				colvarFreight.DataType = DbType.String;
				colvarFreight.MaxLength = 50;
				colvarFreight.AutoIncrement = false;
				colvarFreight.IsNullable = true;
				colvarFreight.IsPrimaryKey = false;
				colvarFreight.IsForeignKey = false;
				colvarFreight.IsReadOnly = false;
				colvarFreight.DefaultSetting = @"";
				colvarFreight.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFreight);
				
				TableSchema.TableColumn colvarDestTHC = new TableSchema.TableColumn(schema);
				colvarDestTHC.ColumnName = "DestTHC";
				colvarDestTHC.DataType = DbType.String;
				colvarDestTHC.MaxLength = 50;
				colvarDestTHC.AutoIncrement = false;
				colvarDestTHC.IsNullable = true;
				colvarDestTHC.IsPrimaryKey = false;
				colvarDestTHC.IsForeignKey = false;
				colvarDestTHC.IsReadOnly = false;
				colvarDestTHC.DefaultSetting = @"";
				colvarDestTHC.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDestTHC);
				
				TableSchema.TableColumn colvarDestPalletisation = new TableSchema.TableColumn(schema);
				colvarDestPalletisation.ColumnName = "DestPalletisation";
				colvarDestPalletisation.DataType = DbType.String;
				colvarDestPalletisation.MaxLength = 50;
				colvarDestPalletisation.AutoIncrement = false;
				colvarDestPalletisation.IsNullable = true;
				colvarDestPalletisation.IsPrimaryKey = false;
				colvarDestPalletisation.IsForeignKey = false;
				colvarDestPalletisation.IsReadOnly = false;
				colvarDestPalletisation.DefaultSetting = @"";
				colvarDestPalletisation.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDestPalletisation);
				
				TableSchema.TableColumn colvarCustomsClearance = new TableSchema.TableColumn(schema);
				colvarCustomsClearance.ColumnName = "CustomsClearance";
				colvarCustomsClearance.DataType = DbType.String;
				colvarCustomsClearance.MaxLength = 50;
				colvarCustomsClearance.AutoIncrement = false;
				colvarCustomsClearance.IsNullable = true;
				colvarCustomsClearance.IsPrimaryKey = false;
				colvarCustomsClearance.IsForeignKey = false;
				colvarCustomsClearance.IsReadOnly = false;
				colvarCustomsClearance.DefaultSetting = @"";
				colvarCustomsClearance.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomsClearance);
				
				TableSchema.TableColumn colvarDeliveryCharges = new TableSchema.TableColumn(schema);
				colvarDeliveryCharges.ColumnName = "DeliveryCharges";
				colvarDeliveryCharges.DataType = DbType.String;
				colvarDeliveryCharges.MaxLength = 50;
				colvarDeliveryCharges.AutoIncrement = false;
				colvarDeliveryCharges.IsNullable = true;
				colvarDeliveryCharges.IsPrimaryKey = false;
				colvarDeliveryCharges.IsForeignKey = false;
				colvarDeliveryCharges.IsReadOnly = false;
				colvarDeliveryCharges.DefaultSetting = @"";
				colvarDeliveryCharges.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDeliveryCharges);
				
				TableSchema.TableColumn colvarCoLoaderComments = new TableSchema.TableColumn(schema);
				colvarCoLoaderComments.ColumnName = "CoLoaderComments";
				colvarCoLoaderComments.DataType = DbType.String;
				colvarCoLoaderComments.MaxLength = 1073741823;
				colvarCoLoaderComments.AutoIncrement = false;
				colvarCoLoaderComments.IsNullable = true;
				colvarCoLoaderComments.IsPrimaryKey = false;
				colvarCoLoaderComments.IsForeignKey = false;
				colvarCoLoaderComments.IsReadOnly = false;
				colvarCoLoaderComments.DefaultSetting = @"";
				colvarCoLoaderComments.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCoLoaderComments);
				
				TableSchema.TableColumn colvarPdcid = new TableSchema.TableColumn(schema);
				colvarPdcid.ColumnName = "PDCID";
				colvarPdcid.DataType = DbType.String;
				colvarPdcid.MaxLength = 50;
				colvarPdcid.AutoIncrement = false;
				colvarPdcid.IsNullable = true;
				colvarPdcid.IsPrimaryKey = false;
				colvarPdcid.IsForeignKey = false;
				colvarPdcid.IsReadOnly = false;
				colvarPdcid.DefaultSetting = @"";
				colvarPdcid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPdcid);
				
				TableSchema.TableColumn colvarHCCompositeRef = new TableSchema.TableColumn(schema);
				colvarHCCompositeRef.ColumnName = "HCCompositeRef";
				colvarHCCompositeRef.DataType = DbType.String;
				colvarHCCompositeRef.MaxLength = 50;
				colvarHCCompositeRef.AutoIncrement = false;
				colvarHCCompositeRef.IsNullable = true;
				colvarHCCompositeRef.IsPrimaryKey = false;
				colvarHCCompositeRef.IsForeignKey = false;
				colvarHCCompositeRef.IsReadOnly = false;
				colvarHCCompositeRef.DefaultSetting = @"";
				colvarHCCompositeRef.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHCCompositeRef);
				
				TableSchema.TableColumn colvarHCInvoiceAmount = new TableSchema.TableColumn(schema);
				colvarHCInvoiceAmount.ColumnName = "HCInvoiceAmount";
				colvarHCInvoiceAmount.DataType = DbType.Currency;
				colvarHCInvoiceAmount.MaxLength = 0;
				colvarHCInvoiceAmount.AutoIncrement = false;
				colvarHCInvoiceAmount.IsNullable = true;
				colvarHCInvoiceAmount.IsPrimaryKey = false;
				colvarHCInvoiceAmount.IsForeignKey = false;
				colvarHCInvoiceAmount.IsReadOnly = false;
				colvarHCInvoiceAmount.DefaultSetting = @"";
				colvarHCInvoiceAmount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHCInvoiceAmount);
				
				TableSchema.TableColumn colvarImpression = new TableSchema.TableColumn(schema);
				colvarImpression.ColumnName = "Impression";
				colvarImpression.DataType = DbType.String;
				colvarImpression.MaxLength = 50;
				colvarImpression.AutoIncrement = false;
				colvarImpression.IsNullable = true;
				colvarImpression.IsPrimaryKey = false;
				colvarImpression.IsForeignKey = false;
				colvarImpression.IsReadOnly = false;
				colvarImpression.DefaultSetting = @"";
				colvarImpression.ForeignKeyTableName = "";
				schema.Columns.Add(colvarImpression);
				
				TableSchema.TableColumn colvarInsuranceValue = new TableSchema.TableColumn(schema);
				colvarInsuranceValue.ColumnName = "InsuranceValue";
				colvarInsuranceValue.DataType = DbType.Currency;
				colvarInsuranceValue.MaxLength = 0;
				colvarInsuranceValue.AutoIncrement = false;
				colvarInsuranceValue.IsNullable = true;
				colvarInsuranceValue.IsPrimaryKey = false;
				colvarInsuranceValue.IsForeignKey = false;
				colvarInsuranceValue.IsReadOnly = false;
				colvarInsuranceValue.DefaultSetting = @"";
				colvarInsuranceValue.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInsuranceValue);
				
				TableSchema.TableColumn colvarInvoiceNumber = new TableSchema.TableColumn(schema);
				colvarInvoiceNumber.ColumnName = "InvoiceNumber";
				colvarInvoiceNumber.DataType = DbType.Int32;
				colvarInvoiceNumber.MaxLength = 0;
				colvarInvoiceNumber.AutoIncrement = false;
				colvarInvoiceNumber.IsNullable = true;
				colvarInvoiceNumber.IsPrimaryKey = false;
				colvarInvoiceNumber.IsForeignKey = false;
				colvarInvoiceNumber.IsReadOnly = false;
				colvarInvoiceNumber.DefaultSetting = @"";
				colvarInvoiceNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInvoiceNumber);
				
				TableSchema.TableColumn colvarInvoiceDate = new TableSchema.TableColumn(schema);
				colvarInvoiceDate.ColumnName = "InvoiceDate";
				colvarInvoiceDate.DataType = DbType.DateTime;
				colvarInvoiceDate.MaxLength = 0;
				colvarInvoiceDate.AutoIncrement = false;
				colvarInvoiceDate.IsNullable = true;
				colvarInvoiceDate.IsPrimaryKey = false;
				colvarInvoiceDate.IsForeignKey = false;
				colvarInvoiceDate.IsReadOnly = false;
				colvarInvoiceDate.DefaultSetting = @"";
				colvarInvoiceDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInvoiceDate);
				
				TableSchema.TableColumn colvarCancelRequestRcd = new TableSchema.TableColumn(schema);
				colvarCancelRequestRcd.ColumnName = "CancelRequestRcd";
				colvarCancelRequestRcd.DataType = DbType.DateTime;
				colvarCancelRequestRcd.MaxLength = 0;
				colvarCancelRequestRcd.AutoIncrement = false;
				colvarCancelRequestRcd.IsNullable = true;
				colvarCancelRequestRcd.IsPrimaryKey = false;
				colvarCancelRequestRcd.IsForeignKey = false;
				colvarCancelRequestRcd.IsReadOnly = false;
				colvarCancelRequestRcd.DefaultSetting = @"";
				colvarCancelRequestRcd.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCancelRequestRcd);
				
				TableSchema.TableColumn colvarOrderCancelled = new TableSchema.TableColumn(schema);
				colvarOrderCancelled.ColumnName = "OrderCancelled";
				colvarOrderCancelled.DataType = DbType.Boolean;
				colvarOrderCancelled.MaxLength = 0;
				colvarOrderCancelled.AutoIncrement = false;
				colvarOrderCancelled.IsNullable = true;
				colvarOrderCancelled.IsPrimaryKey = false;
				colvarOrderCancelled.IsForeignKey = false;
				colvarOrderCancelled.IsReadOnly = false;
				colvarOrderCancelled.DefaultSetting = @"";
				colvarOrderCancelled.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOrderCancelled);
				
				TableSchema.TableColumn colvarCancelDate = new TableSchema.TableColumn(schema);
				colvarCancelDate.ColumnName = "CancelDate";
				colvarCancelDate.DataType = DbType.DateTime;
				colvarCancelDate.MaxLength = 0;
				colvarCancelDate.AutoIncrement = false;
				colvarCancelDate.IsNullable = true;
				colvarCancelDate.IsPrimaryKey = false;
				colvarCancelDate.IsForeignKey = false;
				colvarCancelDate.IsReadOnly = false;
				colvarCancelDate.DefaultSetting = @"";
				colvarCancelDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCancelDate);
				
				TableSchema.TableColumn colvarCancelledBy = new TableSchema.TableColumn(schema);
				colvarCancelledBy.ColumnName = "CancelledBy";
				colvarCancelledBy.DataType = DbType.Int32;
				colvarCancelledBy.MaxLength = 0;
				colvarCancelledBy.AutoIncrement = false;
				colvarCancelledBy.IsNullable = true;
				colvarCancelledBy.IsPrimaryKey = false;
				colvarCancelledBy.IsForeignKey = false;
				colvarCancelledBy.IsReadOnly = false;
				colvarCancelledBy.DefaultSetting = @"";
				colvarCancelledBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCancelledBy);
				
				TableSchema.TableColumn colvarInvoiceTo = new TableSchema.TableColumn(schema);
				colvarInvoiceTo.ColumnName = "InvoiceTo";
				colvarInvoiceTo.DataType = DbType.Int32;
				colvarInvoiceTo.MaxLength = 0;
				colvarInvoiceTo.AutoIncrement = false;
				colvarInvoiceTo.IsNullable = true;
				colvarInvoiceTo.IsPrimaryKey = false;
				colvarInvoiceTo.IsForeignKey = false;
				colvarInvoiceTo.IsReadOnly = false;
				colvarInvoiceTo.DefaultSetting = @"";
				colvarInvoiceTo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInvoiceTo);
				
				TableSchema.TableColumn colvarHCInvoiceAmount2 = new TableSchema.TableColumn(schema);
				colvarHCInvoiceAmount2.ColumnName = "HCInvoiceAmount2";
				colvarHCInvoiceAmount2.DataType = DbType.Currency;
				colvarHCInvoiceAmount2.MaxLength = 0;
				colvarHCInvoiceAmount2.AutoIncrement = false;
				colvarHCInvoiceAmount2.IsNullable = true;
				colvarHCInvoiceAmount2.IsPrimaryKey = false;
				colvarHCInvoiceAmount2.IsForeignKey = false;
				colvarHCInvoiceAmount2.IsReadOnly = false;
				colvarHCInvoiceAmount2.DefaultSetting = @"";
				colvarHCInvoiceAmount2.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHCInvoiceAmount2);
				
				TableSchema.TableColumn colvarOrderAckSent = new TableSchema.TableColumn(schema);
				colvarOrderAckSent.ColumnName = "OrderAckSent";
				colvarOrderAckSent.DataType = DbType.Boolean;
				colvarOrderAckSent.MaxLength = 0;
				colvarOrderAckSent.AutoIncrement = false;
				colvarOrderAckSent.IsNullable = true;
				colvarOrderAckSent.IsPrimaryKey = false;
				colvarOrderAckSent.IsForeignKey = false;
				colvarOrderAckSent.IsReadOnly = false;
				colvarOrderAckSent.DefaultSetting = @"";
				colvarOrderAckSent.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOrderAckSent);
				
				TableSchema.TableColumn colvarCargoUpdateId = new TableSchema.TableColumn(schema);
				colvarCargoUpdateId.ColumnName = "CargoUpdateId";
				colvarCargoUpdateId.DataType = DbType.Int32;
				colvarCargoUpdateId.MaxLength = 0;
				colvarCargoUpdateId.AutoIncrement = false;
				colvarCargoUpdateId.IsNullable = true;
				colvarCargoUpdateId.IsPrimaryKey = false;
				colvarCargoUpdateId.IsForeignKey = false;
				colvarCargoUpdateId.IsReadOnly = false;
				colvarCargoUpdateId.DefaultSetting = @"";
				colvarCargoUpdateId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCargoUpdateId);
				
				TableSchema.TableColumn colvarQuoteId = new TableSchema.TableColumn(schema);
				colvarQuoteId.ColumnName = "quote_id";
				colvarQuoteId.DataType = DbType.Int32;
				colvarQuoteId.MaxLength = 0;
				colvarQuoteId.AutoIncrement = false;
				colvarQuoteId.IsNullable = true;
				colvarQuoteId.IsPrimaryKey = false;
				colvarQuoteId.IsForeignKey = false;
				colvarQuoteId.IsReadOnly = false;
				
						colvarQuoteId.DefaultSetting = @"((0))";
				colvarQuoteId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarQuoteId);
				
				TableSchema.TableColumn colvarDocumentFolder = new TableSchema.TableColumn(schema);
				colvarDocumentFolder.ColumnName = "document_folder";
				colvarDocumentFolder.DataType = DbType.Int32;
				colvarDocumentFolder.MaxLength = 0;
				colvarDocumentFolder.AutoIncrement = false;
				colvarDocumentFolder.IsNullable = true;
				colvarDocumentFolder.IsPrimaryKey = false;
				colvarDocumentFolder.IsForeignKey = false;
				colvarDocumentFolder.IsReadOnly = false;
				
						colvarDocumentFolder.DefaultSetting = @"((0))";
				colvarDocumentFolder.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDocumentFolder);
				
				TableSchema.TableColumn colvarInsuranceValues = new TableSchema.TableColumn(schema);
				colvarInsuranceValues.ColumnName = "InsuranceValues";
				colvarInsuranceValues.DataType = DbType.Double;
				colvarInsuranceValues.MaxLength = 0;
				colvarInsuranceValues.AutoIncrement = false;
				colvarInsuranceValues.IsNullable = true;
				colvarInsuranceValues.IsPrimaryKey = false;
				colvarInsuranceValues.IsForeignKey = false;
				colvarInsuranceValues.IsReadOnly = false;
				colvarInsuranceValues.DefaultSetting = @"";
				colvarInsuranceValues.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInsuranceValues);
				
				TableSchema.TableColumn colvarTs = new TableSchema.TableColumn(schema);
				colvarTs.ColumnName = "TS";
				colvarTs.DataType = DbType.Binary;
				colvarTs.MaxLength = 0;
				colvarTs.AutoIncrement = false;
				colvarTs.IsNullable = true;
				colvarTs.IsPrimaryKey = false;
				colvarTs.IsForeignKey = false;
				colvarTs.IsReadOnly = true;
				colvarTs.DefaultSetting = @"";
				colvarTs.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTs);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["WWIprov"].AddSchema("OrderTable",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("OrderID")]
		[Bindable(true)]
		public int OrderID 
		{
			get { return GetColumnValue<int>(Columns.OrderID); }
			set { SetColumnValue(Columns.OrderID, value); }
		}
		  
		[XmlAttribute("OrderNumber")]
		[Bindable(true)]
		public int? OrderNumber 
		{
			get { return GetColumnValue<int?>(Columns.OrderNumber); }
			set { SetColumnValue(Columns.OrderNumber, value); }
		}
		  
		[XmlAttribute("OfficeIndicator")]
		[Bindable(true)]
		public string OfficeIndicator 
		{
			get { return GetColumnValue<string>(Columns.OfficeIndicator); }
			set { SetColumnValue(Columns.OfficeIndicator, value); }
		}
		  
		[XmlAttribute("PublishipOrder")]
		[Bindable(true)]
		public bool PublishipOrder 
		{
			get { return GetColumnValue<bool>(Columns.PublishipOrder); }
			set { SetColumnValue(Columns.PublishipOrder, value); }
		}
		  
		[XmlAttribute("DateOrderCreated")]
		[Bindable(true)]
		public DateTime? DateOrderCreated 
		{
			get { return GetColumnValue<DateTime?>(Columns.DateOrderCreated); }
			set { SetColumnValue(Columns.DateOrderCreated, value); }
		}
		  
		[XmlAttribute("HotJob")]
		[Bindable(true)]
		public bool HotJob 
		{
			get { return GetColumnValue<bool>(Columns.HotJob); }
			set { SetColumnValue(Columns.HotJob, value); }
		}
		  
		[XmlAttribute("CompanyID")]
		[Bindable(true)]
		public int? CompanyID 
		{
			get { return GetColumnValue<int?>(Columns.CompanyID); }
			set { SetColumnValue(Columns.CompanyID, value); }
		}
		  
		[XmlAttribute("ConsigneeID")]
		[Bindable(true)]
		public int? ConsigneeID 
		{
			get { return GetColumnValue<int?>(Columns.ConsigneeID); }
			set { SetColumnValue(Columns.ConsigneeID, value); }
		}
		  
		[XmlAttribute("NotifyPartyID")]
		[Bindable(true)]
		public int? NotifyPartyID 
		{
			get { return GetColumnValue<int?>(Columns.NotifyPartyID); }
			set { SetColumnValue(Columns.NotifyPartyID, value); }
		}
		  
		[XmlAttribute("AgentAtOriginID")]
		[Bindable(true)]
		public int? AgentAtOriginID 
		{
			get { return GetColumnValue<int?>(Columns.AgentAtOriginID); }
			set { SetColumnValue(Columns.AgentAtOriginID, value); }
		}
		  
		[XmlAttribute("AgentAtDestinationID")]
		[Bindable(true)]
		public int? AgentAtDestinationID 
		{
			get { return GetColumnValue<int?>(Columns.AgentAtDestinationID); }
			set { SetColumnValue(Columns.AgentAtDestinationID, value); }
		}
		  
		[XmlAttribute("PrinterID")]
		[Bindable(true)]
		public int? PrinterID 
		{
			get { return GetColumnValue<int?>(Columns.PrinterID); }
			set { SetColumnValue(Columns.PrinterID, value); }
		}
		  
		[XmlAttribute("ClearingAgentID")]
		[Bindable(true)]
		public int? ClearingAgentID 
		{
			get { return GetColumnValue<int?>(Columns.ClearingAgentID); }
			set { SetColumnValue(Columns.ClearingAgentID, value); }
		}
		  
		[XmlAttribute("OnCarriageID")]
		[Bindable(true)]
		public int? OnCarriageID 
		{
			get { return GetColumnValue<int?>(Columns.OnCarriageID); }
			set { SetColumnValue(Columns.OnCarriageID, value); }
		}
		  
		[XmlAttribute("OrderControllerID")]
		[Bindable(true)]
		public int? OrderControllerID 
		{
			get { return GetColumnValue<int?>(Columns.OrderControllerID); }
			set { SetColumnValue(Columns.OrderControllerID, value); }
		}
		  
		[XmlAttribute("OperationsControllerID")]
		[Bindable(true)]
		public int? OperationsControllerID 
		{
			get { return GetColumnValue<int?>(Columns.OperationsControllerID); }
			set { SetColumnValue(Columns.OperationsControllerID, value); }
		}
		  
		[XmlAttribute("OriginPortControllerID")]
		[Bindable(true)]
		public int? OriginPortControllerID 
		{
			get { return GetColumnValue<int?>(Columns.OriginPortControllerID); }
			set { SetColumnValue(Columns.OriginPortControllerID, value); }
		}
		  
		[XmlAttribute("DestinationPortControllerID")]
		[Bindable(true)]
		public int? DestinationPortControllerID 
		{
			get { return GetColumnValue<int?>(Columns.DestinationPortControllerID); }
			set { SetColumnValue(Columns.DestinationPortControllerID, value); }
		}
		  
		[XmlAttribute("CustomersRef")]
		[Bindable(true)]
		public string CustomersRef 
		{
			get { return GetColumnValue<string>(Columns.CustomersRef); }
			set { SetColumnValue(Columns.CustomersRef, value); }
		}
		  
		[XmlAttribute("ContactID")]
		[Bindable(true)]
		public int? ContactID 
		{
			get { return GetColumnValue<int?>(Columns.ContactID); }
			set { SetColumnValue(Columns.ContactID, value); }
		}
		  
		[XmlAttribute("ExWorksDate")]
		[Bindable(true)]
		public DateTime? ExWorksDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.ExWorksDate); }
			set { SetColumnValue(Columns.ExWorksDate, value); }
		}
		  
		[XmlAttribute("EWDLastUpdated")]
		[Bindable(true)]
		public DateTime? EWDLastUpdated 
		{
			get { return GetColumnValue<DateTime?>(Columns.EWDLastUpdated); }
			set { SetColumnValue(Columns.EWDLastUpdated, value); }
		}
		  
		[XmlAttribute("CargoReady")]
		[Bindable(true)]
		public DateTime? CargoReady 
		{
			get { return GetColumnValue<DateTime?>(Columns.CargoReady); }
			set { SetColumnValue(Columns.CargoReady, value); }
		}
		  
		[XmlAttribute("WarehouseDate")]
		[Bindable(true)]
		public DateTime? WarehouseDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.WarehouseDate); }
			set { SetColumnValue(Columns.WarehouseDate, value); }
		}
		  
		[XmlAttribute("OnTime")]
		[Bindable(true)]
		public bool? OnTime 
		{
			get { return GetColumnValue<bool?>(Columns.OnTime); }
			set { SetColumnValue(Columns.OnTime, value); }
		}
		  
		[XmlAttribute("BookingReceived")]
		[Bindable(true)]
		public DateTime? BookingReceived 
		{
			get { return GetColumnValue<DateTime?>(Columns.BookingReceived); }
			set { SetColumnValue(Columns.BookingReceived, value); }
		}
		  
		[XmlAttribute("OriginPointID")]
		[Bindable(true)]
		public int? OriginPointID 
		{
			get { return GetColumnValue<int?>(Columns.OriginPointID); }
			set { SetColumnValue(Columns.OriginPointID, value); }
		}
		  
		[XmlAttribute("PortID")]
		[Bindable(true)]
		public int? PortID 
		{
			get { return GetColumnValue<int?>(Columns.PortID); }
			set { SetColumnValue(Columns.PortID, value); }
		}
		  
		[XmlAttribute("DestinationPortID")]
		[Bindable(true)]
		public int? DestinationPortID 
		{
			get { return GetColumnValue<int?>(Columns.DestinationPortID); }
			set { SetColumnValue(Columns.DestinationPortID, value); }
		}
		  
		[XmlAttribute("FinalDestinationID")]
		[Bindable(true)]
		public int? FinalDestinationID 
		{
			get { return GetColumnValue<int?>(Columns.FinalDestinationID); }
			set { SetColumnValue(Columns.FinalDestinationID, value); }
		}
		  
		[XmlAttribute("CountryID")]
		[Bindable(true)]
		public int? CountryID 
		{
			get { return GetColumnValue<int?>(Columns.CountryID); }
			set { SetColumnValue(Columns.CountryID, value); }
		}
		  
		[XmlAttribute("OldVesselName")]
		[Bindable(true)]
		public string OldVesselName 
		{
			get { return GetColumnValue<string>(Columns.OldVesselName); }
			set { SetColumnValue(Columns.OldVesselName, value); }
		}
		  
		[XmlAttribute("DestinationCountryID")]
		[Bindable(true)]
		public int? DestinationCountryID 
		{
			get { return GetColumnValue<int?>(Columns.DestinationCountryID); }
			set { SetColumnValue(Columns.DestinationCountryID, value); }
		}
		  
		[XmlAttribute("VesselID")]
		[Bindable(true)]
		public int? VesselID 
		{
			get { return GetColumnValue<int?>(Columns.VesselID); }
			set { SetColumnValue(Columns.VesselID, value); }
		}
		  
		[XmlAttribute("VesselLastUpdated")]
		[Bindable(true)]
		public DateTime? VesselLastUpdated 
		{
			get { return GetColumnValue<DateTime?>(Columns.VesselLastUpdated); }
			set { SetColumnValue(Columns.VesselLastUpdated, value); }
		}
		  
		[XmlAttribute("Ets")]
		[Bindable(true)]
		public DateTime? Ets 
		{
			get { return GetColumnValue<DateTime?>(Columns.Ets); }
			set { SetColumnValue(Columns.Ets, value); }
		}
		  
		[XmlAttribute("Eta")]
		[Bindable(true)]
		public DateTime? Eta 
		{
			get { return GetColumnValue<DateTime?>(Columns.Eta); }
			set { SetColumnValue(Columns.Eta, value); }
		}
		  
		[XmlAttribute("PearsonDivCode")]
		[Bindable(true)]
		public string PearsonDivCode 
		{
			get { return GetColumnValue<string>(Columns.PearsonDivCode); }
			set { SetColumnValue(Columns.PearsonDivCode, value); }
		}
		  
		[XmlAttribute("PearsonSSRRef")]
		[Bindable(true)]
		public string PearsonSSRRef 
		{
			get { return GetColumnValue<string>(Columns.PearsonSSRRef); }
			set { SetColumnValue(Columns.PearsonSSRRef, value); }
		}
		  
		[XmlAttribute("HouseBLNUmber")]
		[Bindable(true)]
		public string HouseBLNUmber 
		{
			get { return GetColumnValue<string>(Columns.HouseBLNUmber); }
			set { SetColumnValue(Columns.HouseBLNUmber, value); }
		}
		  
		[XmlAttribute("HouseBLAdded")]
		[Bindable(true)]
		public bool HouseBLAdded 
		{
			get { return GetColumnValue<bool>(Columns.HouseBLAdded); }
			set { SetColumnValue(Columns.HouseBLAdded, value); }
		}
		  
		[XmlAttribute("ShippedOnBoard")]
		[Bindable(true)]
		public bool ShippedOnBoard 
		{
			get { return GetColumnValue<bool>(Columns.ShippedOnBoard); }
			set { SetColumnValue(Columns.ShippedOnBoard, value); }
		}
		  
		[XmlAttribute("EstCopies")]
		[Bindable(true)]
		public float? EstCopies 
		{
			get { return GetColumnValue<float?>(Columns.EstCopies); }
			set { SetColumnValue(Columns.EstCopies, value); }
		}
		  
		[XmlAttribute("CopiesLastUpdated")]
		[Bindable(true)]
		public DateTime? CopiesLastUpdated 
		{
			get { return GetColumnValue<DateTime?>(Columns.CopiesLastUpdated); }
			set { SetColumnValue(Columns.CopiesLastUpdated, value); }
		}
		  
		[XmlAttribute("EstCartons")]
		[Bindable(true)]
		public int? EstCartons 
		{
			get { return GetColumnValue<int?>(Columns.EstCartons); }
			set { SetColumnValue(Columns.EstCartons, value); }
		}
		  
		[XmlAttribute("EstPallets")]
		[Bindable(true)]
		public int? EstPallets 
		{
			get { return GetColumnValue<int?>(Columns.EstPallets); }
			set { SetColumnValue(Columns.EstPallets, value); }
		}
		  
		[XmlAttribute("EstWeight")]
		[Bindable(true)]
		public int? EstWeight 
		{
			get { return GetColumnValue<int?>(Columns.EstWeight); }
			set { SetColumnValue(Columns.EstWeight, value); }
		}
		  
		[XmlAttribute("EstVolume")]
		[Bindable(true)]
		public float? EstVolume 
		{
			get { return GetColumnValue<float?>(Columns.EstVolume); }
			set { SetColumnValue(Columns.EstVolume, value); }
		}
		  
		[XmlAttribute("Palletise")]
		[Bindable(true)]
		public int? Palletise 
		{
			get { return GetColumnValue<int?>(Columns.Palletise); }
			set { SetColumnValue(Columns.Palletise, value); }
		}
		  
		[XmlAttribute("PackageTypeID")]
		[Bindable(true)]
		public int? PackageTypeID 
		{
			get { return GetColumnValue<int?>(Columns.PackageTypeID); }
			set { SetColumnValue(Columns.PackageTypeID, value); }
		}
		  
		[XmlAttribute("NumberOfPackages")]
		[Bindable(true)]
		public int? NumberOfPackages 
		{
			get { return GetColumnValue<int?>(Columns.NumberOfPackages); }
			set { SetColumnValue(Columns.NumberOfPackages, value); }
		}
		  
		[XmlAttribute("ActualCartons")]
		[Bindable(true)]
		public int? ActualCartons 
		{
			get { return GetColumnValue<int?>(Columns.ActualCartons); }
			set { SetColumnValue(Columns.ActualCartons, value); }
		}
		  
		[XmlAttribute("ActualPallets")]
		[Bindable(true)]
		public int? ActualPallets 
		{
			get { return GetColumnValue<int?>(Columns.ActualPallets); }
			set { SetColumnValue(Columns.ActualPallets, value); }
		}
		  
		[XmlAttribute("Jackets")]
		[Bindable(true)]
		public int? Jackets 
		{
			get { return GetColumnValue<int?>(Columns.Jackets); }
			set { SetColumnValue(Columns.Jackets, value); }
		}
		  
		[XmlAttribute("ActualWeight")]
		[Bindable(true)]
		public int? ActualWeight 
		{
			get { return GetColumnValue<int?>(Columns.ActualWeight); }
			set { SetColumnValue(Columns.ActualWeight, value); }
		}
		  
		[XmlAttribute("WeightLastUpdated")]
		[Bindable(true)]
		public DateTime? WeightLastUpdated 
		{
			get { return GetColumnValue<DateTime?>(Columns.WeightLastUpdated); }
			set { SetColumnValue(Columns.WeightLastUpdated, value); }
		}
		  
		[XmlAttribute("ActualVolume")]
		[Bindable(true)]
		public float? ActualVolume 
		{
			get { return GetColumnValue<float?>(Columns.ActualVolume); }
			set { SetColumnValue(Columns.ActualVolume, value); }
		}
		  
		[XmlAttribute("VolumeLastUpdated")]
		[Bindable(true)]
		public DateTime? VolumeLastUpdated 
		{
			get { return GetColumnValue<DateTime?>(Columns.VolumeLastUpdated); }
			set { SetColumnValue(Columns.VolumeLastUpdated, value); }
		}
		  
		[XmlAttribute("Fcllcl")]
		[Bindable(true)]
		public bool? Fcllcl 
		{
			get { return GetColumnValue<bool?>(Columns.Fcllcl); }
			set { SetColumnValue(Columns.Fcllcl, value); }
		}
		  
		[XmlAttribute("Est20")]
		[Bindable(true)]
		public int? Est20 
		{
			get { return GetColumnValue<int?>(Columns.Est20); }
			set { SetColumnValue(Columns.Est20, value); }
		}
		  
		[XmlAttribute("Est40")]
		[Bindable(true)]
		public int? Est40 
		{
			get { return GetColumnValue<int?>(Columns.Est40); }
			set { SetColumnValue(Columns.Est40, value); }
		}
		  
		[XmlAttribute("EstLCLWt")]
		[Bindable(true)]
		public int? EstLCLWt 
		{
			get { return GetColumnValue<int?>(Columns.EstLCLWt); }
			set { SetColumnValue(Columns.EstLCLWt, value); }
		}
		  
		[XmlAttribute("EstLCLVol")]
		[Bindable(true)]
		public float? EstLCLVol 
		{
			get { return GetColumnValue<float?>(Columns.EstLCLVol); }
			set { SetColumnValue(Columns.EstLCLVol, value); }
		}
		  
		[XmlAttribute("No20")]
		[Bindable(true)]
		public int? No20 
		{
			get { return GetColumnValue<int?>(Columns.No20); }
			set { SetColumnValue(Columns.No20, value); }
		}
		  
		[XmlAttribute("No40")]
		[Bindable(true)]
		public int? No40 
		{
			get { return GetColumnValue<int?>(Columns.No40); }
			set { SetColumnValue(Columns.No40, value); }
		}
		  
		[XmlAttribute("LCLWt")]
		[Bindable(true)]
		public int? LCLWt 
		{
			get { return GetColumnValue<int?>(Columns.LCLWt); }
			set { SetColumnValue(Columns.LCLWt, value); }
		}
		  
		[XmlAttribute("LCLVol")]
		[Bindable(true)]
		public float? LCLVol 
		{
			get { return GetColumnValue<float?>(Columns.LCLVol); }
			set { SetColumnValue(Columns.LCLVol, value); }
		}
		  
		[XmlAttribute("Remarks")]
		[Bindable(true)]
		public string Remarks 
		{
			get { return GetColumnValue<string>(Columns.Remarks); }
			set { SetColumnValue(Columns.Remarks, value); }
		}
		  
		[XmlAttribute("RemarksToCustomer")]
		[Bindable(true)]
		public string RemarksToCustomer 
		{
			get { return GetColumnValue<string>(Columns.RemarksToCustomer); }
			set { SetColumnValue(Columns.RemarksToCustomer, value); }
		}
		  
		[XmlAttribute("QuoteRef")]
		[Bindable(true)]
		public int? QuoteRef 
		{
			get { return GetColumnValue<int?>(Columns.QuoteRef); }
			set { SetColumnValue(Columns.QuoteRef, value); }
		}
		  
		[XmlAttribute("Sellingrate")]
		[Bindable(true)]
		public string Sellingrate 
		{
			get { return GetColumnValue<string>(Columns.Sellingrate); }
			set { SetColumnValue(Columns.Sellingrate, value); }
		}
		  
		[XmlAttribute("SellingrateAgent")]
		[Bindable(true)]
		public string SellingrateAgent 
		{
			get { return GetColumnValue<string>(Columns.SellingrateAgent); }
			set { SetColumnValue(Columns.SellingrateAgent, value); }
		}
		  
		[XmlAttribute("DocsRcdAndApproved")]
		[Bindable(true)]
		public bool DocsRcdAndApproved 
		{
			get { return GetColumnValue<bool>(Columns.DocsRcdAndApproved); }
			set { SetColumnValue(Columns.DocsRcdAndApproved, value); }
		}
		  
		[XmlAttribute("DocsApprovedDate")]
		[Bindable(true)]
		public DateTime? DocsApprovedDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.DocsApprovedDate); }
			set { SetColumnValue(Columns.DocsApprovedDate, value); }
		}
		  
		[XmlAttribute("JobClosureDate")]
		[Bindable(true)]
		public DateTime? JobClosureDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.JobClosureDate); }
			set { SetColumnValue(Columns.JobClosureDate, value); }
		}
		  
		[XmlAttribute("JobClosed")]
		[Bindable(true)]
		public bool JobClosed 
		{
			get { return GetColumnValue<bool>(Columns.JobClosed); }
			set { SetColumnValue(Columns.JobClosed, value); }
		}
		  
		[XmlAttribute("ExpressBL")]
		[Bindable(true)]
		public bool ExpressBL 
		{
			get { return GetColumnValue<bool>(Columns.ExpressBL); }
			set { SetColumnValue(Columns.ExpressBL, value); }
		}
		  
		[XmlAttribute("FumigationCert")]
		[Bindable(true)]
		public bool FumigationCert 
		{
			get { return GetColumnValue<bool>(Columns.FumigationCert); }
			set { SetColumnValue(Columns.FumigationCert, value); }
		}
		  
		[XmlAttribute("GSPCert")]
		[Bindable(true)]
		public bool GSPCert 
		{
			get { return GetColumnValue<bool>(Columns.GSPCert); }
			set { SetColumnValue(Columns.GSPCert, value); }
		}
		  
		[XmlAttribute("COfO")]
		[Bindable(true)]
		public bool COfO 
		{
			get { return GetColumnValue<bool>(Columns.COfO); }
			set { SetColumnValue(Columns.COfO, value); }
		}
		  
		[XmlAttribute("PackingDeclaration")]
		[Bindable(true)]
		public bool PackingDeclaration 
		{
			get { return GetColumnValue<bool>(Columns.PackingDeclaration); }
			set { SetColumnValue(Columns.PackingDeclaration, value); }
		}
		  
		[XmlAttribute("OtherDocsRequired")]
		[Bindable(true)]
		public string OtherDocsRequired 
		{
			get { return GetColumnValue<string>(Columns.OtherDocsRequired); }
			set { SetColumnValue(Columns.OtherDocsRequired, value); }
		}
		  
		[XmlAttribute("Incoterms")]
		[Bindable(true)]
		public string Incoterms 
		{
			get { return GetColumnValue<string>(Columns.Incoterms); }
			set { SetColumnValue(Columns.Incoterms, value); }
		}
		  
		[XmlAttribute("PricePerCopy")]
		[Bindable(true)]
		public float? PricePerCopy 
		{
			get { return GetColumnValue<float?>(Columns.PricePerCopy); }
			set { SetColumnValue(Columns.PricePerCopy, value); }
		}
		  
		[XmlAttribute("Customs")]
		[Bindable(true)]
		public string Customs 
		{
			get { return GetColumnValue<string>(Columns.Customs); }
			set { SetColumnValue(Columns.Customs, value); }
		}
		  
		[XmlAttribute("Currency")]
		[Bindable(true)]
		public string Currency 
		{
			get { return GetColumnValue<string>(Columns.Currency); }
			set { SetColumnValue(Columns.Currency, value); }
		}
		  
		[XmlAttribute("InvoiceAddresseeID")]
		[Bindable(true)]
		public int? InvoiceAddresseeID 
		{
			get { return GetColumnValue<int?>(Columns.InvoiceAddresseeID); }
			set { SetColumnValue(Columns.InvoiceAddresseeID, value); }
		}
		  
		[XmlAttribute("ConsolNumber")]
		[Bindable(true)]
		public int? ConsolNumber 
		{
			get { return GetColumnValue<int?>(Columns.ConsolNumber); }
			set { SetColumnValue(Columns.ConsolNumber, value); }
		}
		  
		[XmlAttribute("UnitPricePerCopy")]
		[Bindable(true)]
		public float? UnitPricePerCopy 
		{
			get { return GetColumnValue<float?>(Columns.UnitPricePerCopy); }
			set { SetColumnValue(Columns.UnitPricePerCopy, value); }
		}
		  
		[XmlAttribute("OnHold")]
		[Bindable(true)]
		public bool OnHold 
		{
			get { return GetColumnValue<bool>(Columns.OnHold); }
			set { SetColumnValue(Columns.OnHold, value); }
		}
		  
		[XmlAttribute("ContainerInfo")]
		[Bindable(true)]
		public string ContainerInfo 
		{
			get { return GetColumnValue<string>(Columns.ContainerInfo); }
			set { SetColumnValue(Columns.ContainerInfo, value); }
		}
		  
		[XmlAttribute("Cleared")]
		[Bindable(true)]
		public DateTime? Cleared 
		{
			get { return GetColumnValue<DateTime?>(Columns.Cleared); }
			set { SetColumnValue(Columns.Cleared, value); }
		}
		  
		[XmlAttribute("HodderPricePerCopy")]
		[Bindable(true)]
		public float? HodderPricePerCopy 
		{
			get { return GetColumnValue<float?>(Columns.HodderPricePerCopy); }
			set { SetColumnValue(Columns.HodderPricePerCopy, value); }
		}
		  
		[XmlAttribute("FileCoverPrintedOrigin")]
		[Bindable(true)]
		public bool FileCoverPrintedOrigin 
		{
			get { return GetColumnValue<bool>(Columns.FileCoverPrintedOrigin); }
			set { SetColumnValue(Columns.FileCoverPrintedOrigin, value); }
		}
		  
		[XmlAttribute("FileCoverPrintedDest")]
		[Bindable(true)]
		public bool FileCoverPrintedDest 
		{
			get { return GetColumnValue<bool>(Columns.FileCoverPrintedDest); }
			set { SetColumnValue(Columns.FileCoverPrintedDest, value); }
		}
		  
		[XmlAttribute("ClientsTerms")]
		[Bindable(true)]
		public string ClientsTerms 
		{
			get { return GetColumnValue<string>(Columns.ClientsTerms); }
			set { SetColumnValue(Columns.ClientsTerms, value); }
		}
		  
		[XmlAttribute("OriginTrucking")]
		[Bindable(true)]
		public string OriginTrucking 
		{
			get { return GetColumnValue<string>(Columns.OriginTrucking); }
			set { SetColumnValue(Columns.OriginTrucking, value); }
		}
		  
		[XmlAttribute("OrignTHC")]
		[Bindable(true)]
		public string OrignTHC 
		{
			get { return GetColumnValue<string>(Columns.OrignTHC); }
			set { SetColumnValue(Columns.OrignTHC, value); }
		}
		  
		[XmlAttribute("OriginDocs")]
		[Bindable(true)]
		public string OriginDocs 
		{
			get { return GetColumnValue<string>(Columns.OriginDocs); }
			set { SetColumnValue(Columns.OriginDocs, value); }
		}
		  
		[XmlAttribute("Freight")]
		[Bindable(true)]
		public string Freight 
		{
			get { return GetColumnValue<string>(Columns.Freight); }
			set { SetColumnValue(Columns.Freight, value); }
		}
		  
		[XmlAttribute("DestTHC")]
		[Bindable(true)]
		public string DestTHC 
		{
			get { return GetColumnValue<string>(Columns.DestTHC); }
			set { SetColumnValue(Columns.DestTHC, value); }
		}
		  
		[XmlAttribute("DestPalletisation")]
		[Bindable(true)]
		public string DestPalletisation 
		{
			get { return GetColumnValue<string>(Columns.DestPalletisation); }
			set { SetColumnValue(Columns.DestPalletisation, value); }
		}
		  
		[XmlAttribute("CustomsClearance")]
		[Bindable(true)]
		public string CustomsClearance 
		{
			get { return GetColumnValue<string>(Columns.CustomsClearance); }
			set { SetColumnValue(Columns.CustomsClearance, value); }
		}
		  
		[XmlAttribute("DeliveryCharges")]
		[Bindable(true)]
		public string DeliveryCharges 
		{
			get { return GetColumnValue<string>(Columns.DeliveryCharges); }
			set { SetColumnValue(Columns.DeliveryCharges, value); }
		}
		  
		[XmlAttribute("CoLoaderComments")]
		[Bindable(true)]
		public string CoLoaderComments 
		{
			get { return GetColumnValue<string>(Columns.CoLoaderComments); }
			set { SetColumnValue(Columns.CoLoaderComments, value); }
		}
		  
		[XmlAttribute("Pdcid")]
		[Bindable(true)]
		public string Pdcid 
		{
			get { return GetColumnValue<string>(Columns.Pdcid); }
			set { SetColumnValue(Columns.Pdcid, value); }
		}
		  
		[XmlAttribute("HCCompositeRef")]
		[Bindable(true)]
		public string HCCompositeRef 
		{
			get { return GetColumnValue<string>(Columns.HCCompositeRef); }
			set { SetColumnValue(Columns.HCCompositeRef, value); }
		}
		  
		[XmlAttribute("HCInvoiceAmount")]
		[Bindable(true)]
		public decimal? HCInvoiceAmount 
		{
			get { return GetColumnValue<decimal?>(Columns.HCInvoiceAmount); }
			set { SetColumnValue(Columns.HCInvoiceAmount, value); }
		}
		  
		[XmlAttribute("Impression")]
		[Bindable(true)]
		public string Impression 
		{
			get { return GetColumnValue<string>(Columns.Impression); }
			set { SetColumnValue(Columns.Impression, value); }
		}
		  
		[XmlAttribute("InsuranceValue")]
		[Bindable(true)]
		public decimal? InsuranceValue 
		{
			get { return GetColumnValue<decimal?>(Columns.InsuranceValue); }
			set { SetColumnValue(Columns.InsuranceValue, value); }
		}
		  
		[XmlAttribute("InvoiceNumber")]
		[Bindable(true)]
		public int? InvoiceNumber 
		{
			get { return GetColumnValue<int?>(Columns.InvoiceNumber); }
			set { SetColumnValue(Columns.InvoiceNumber, value); }
		}
		  
		[XmlAttribute("InvoiceDate")]
		[Bindable(true)]
		public DateTime? InvoiceDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.InvoiceDate); }
			set { SetColumnValue(Columns.InvoiceDate, value); }
		}
		  
		[XmlAttribute("CancelRequestRcd")]
		[Bindable(true)]
		public DateTime? CancelRequestRcd 
		{
			get { return GetColumnValue<DateTime?>(Columns.CancelRequestRcd); }
			set { SetColumnValue(Columns.CancelRequestRcd, value); }
		}
		  
		[XmlAttribute("OrderCancelled")]
		[Bindable(true)]
		public bool? OrderCancelled 
		{
			get { return GetColumnValue<bool?>(Columns.OrderCancelled); }
			set { SetColumnValue(Columns.OrderCancelled, value); }
		}
		  
		[XmlAttribute("CancelDate")]
		[Bindable(true)]
		public DateTime? CancelDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.CancelDate); }
			set { SetColumnValue(Columns.CancelDate, value); }
		}
		  
		[XmlAttribute("CancelledBy")]
		[Bindable(true)]
		public int? CancelledBy 
		{
			get { return GetColumnValue<int?>(Columns.CancelledBy); }
			set { SetColumnValue(Columns.CancelledBy, value); }
		}
		  
		[XmlAttribute("InvoiceTo")]
		[Bindable(true)]
		public int? InvoiceTo 
		{
			get { return GetColumnValue<int?>(Columns.InvoiceTo); }
			set { SetColumnValue(Columns.InvoiceTo, value); }
		}
		  
		[XmlAttribute("HCInvoiceAmount2")]
		[Bindable(true)]
		public decimal? HCInvoiceAmount2 
		{
			get { return GetColumnValue<decimal?>(Columns.HCInvoiceAmount2); }
			set { SetColumnValue(Columns.HCInvoiceAmount2, value); }
		}
		  
		[XmlAttribute("OrderAckSent")]
		[Bindable(true)]
		public bool? OrderAckSent 
		{
			get { return GetColumnValue<bool?>(Columns.OrderAckSent); }
			set { SetColumnValue(Columns.OrderAckSent, value); }
		}
		  
		[XmlAttribute("CargoUpdateId")]
		[Bindable(true)]
		public int? CargoUpdateId 
		{
			get { return GetColumnValue<int?>(Columns.CargoUpdateId); }
			set { SetColumnValue(Columns.CargoUpdateId, value); }
		}
		  
		[XmlAttribute("QuoteId")]
		[Bindable(true)]
		public int? QuoteId 
		{
			get { return GetColumnValue<int?>(Columns.QuoteId); }
			set { SetColumnValue(Columns.QuoteId, value); }
		}
		  
		[XmlAttribute("DocumentFolder")]
		[Bindable(true)]
		public int? DocumentFolder 
		{
			get { return GetColumnValue<int?>(Columns.DocumentFolder); }
			set { SetColumnValue(Columns.DocumentFolder, value); }
		}
		  
		[XmlAttribute("InsuranceValues")]
		[Bindable(true)]
		public double? InsuranceValues 
		{
			get { return GetColumnValue<double?>(Columns.InsuranceValues); }
			set { SetColumnValue(Columns.InsuranceValues, value); }
		}
		  
		[XmlAttribute("Ts")]
		[Bindable(true)]
		public byte[] Ts 
		{
			get { return GetColumnValue<byte[]>(Columns.Ts); }
			set { SetColumnValue(Columns.Ts, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int? varOrderNumber,string varOfficeIndicator,bool varPublishipOrder,DateTime? varDateOrderCreated,bool varHotJob,int? varCompanyID,int? varConsigneeID,int? varNotifyPartyID,int? varAgentAtOriginID,int? varAgentAtDestinationID,int? varPrinterID,int? varClearingAgentID,int? varOnCarriageID,int? varOrderControllerID,int? varOperationsControllerID,int? varOriginPortControllerID,int? varDestinationPortControllerID,string varCustomersRef,int? varContactID,DateTime? varExWorksDate,DateTime? varEWDLastUpdated,DateTime? varCargoReady,DateTime? varWarehouseDate,bool? varOnTime,DateTime? varBookingReceived,int? varOriginPointID,int? varPortID,int? varDestinationPortID,int? varFinalDestinationID,int? varCountryID,string varOldVesselName,int? varDestinationCountryID,int? varVesselID,DateTime? varVesselLastUpdated,DateTime? varEts,DateTime? varEta,string varPearsonDivCode,string varPearsonSSRRef,string varHouseBLNUmber,bool varHouseBLAdded,bool varShippedOnBoard,float? varEstCopies,DateTime? varCopiesLastUpdated,int? varEstCartons,int? varEstPallets,int? varEstWeight,float? varEstVolume,int? varPalletise,int? varPackageTypeID,int? varNumberOfPackages,int? varActualCartons,int? varActualPallets,int? varJackets,int? varActualWeight,DateTime? varWeightLastUpdated,float? varActualVolume,DateTime? varVolumeLastUpdated,bool? varFcllcl,int? varEst20,int? varEst40,int? varEstLCLWt,float? varEstLCLVol,int? varNo20,int? varNo40,int? varLCLWt,float? varLCLVol,string varRemarks,string varRemarksToCustomer,int? varQuoteRef,string varSellingrate,string varSellingrateAgent,bool varDocsRcdAndApproved,DateTime? varDocsApprovedDate,DateTime? varJobClosureDate,bool varJobClosed,bool varExpressBL,bool varFumigationCert,bool varGSPCert,bool varCOfO,bool varPackingDeclaration,string varOtherDocsRequired,string varIncoterms,float? varPricePerCopy,string varCustoms,string varCurrency,int? varInvoiceAddresseeID,int? varConsolNumber,float? varUnitPricePerCopy,bool varOnHold,string varContainerInfo,DateTime? varCleared,float? varHodderPricePerCopy,bool varFileCoverPrintedOrigin,bool varFileCoverPrintedDest,string varClientsTerms,string varOriginTrucking,string varOrignTHC,string varOriginDocs,string varFreight,string varDestTHC,string varDestPalletisation,string varCustomsClearance,string varDeliveryCharges,string varCoLoaderComments,string varPdcid,string varHCCompositeRef,decimal? varHCInvoiceAmount,string varImpression,decimal? varInsuranceValue,int? varInvoiceNumber,DateTime? varInvoiceDate,DateTime? varCancelRequestRcd,bool? varOrderCancelled,DateTime? varCancelDate,int? varCancelledBy,int? varInvoiceTo,decimal? varHCInvoiceAmount2,bool? varOrderAckSent,int? varCargoUpdateId,int? varQuoteId,int? varDocumentFolder,double? varInsuranceValues,byte[] varTs)
		{
			OrderTable item = new OrderTable();
			
			item.OrderNumber = varOrderNumber;
			
			item.OfficeIndicator = varOfficeIndicator;
			
			item.PublishipOrder = varPublishipOrder;
			
			item.DateOrderCreated = varDateOrderCreated;
			
			item.HotJob = varHotJob;
			
			item.CompanyID = varCompanyID;
			
			item.ConsigneeID = varConsigneeID;
			
			item.NotifyPartyID = varNotifyPartyID;
			
			item.AgentAtOriginID = varAgentAtOriginID;
			
			item.AgentAtDestinationID = varAgentAtDestinationID;
			
			item.PrinterID = varPrinterID;
			
			item.ClearingAgentID = varClearingAgentID;
			
			item.OnCarriageID = varOnCarriageID;
			
			item.OrderControllerID = varOrderControllerID;
			
			item.OperationsControllerID = varOperationsControllerID;
			
			item.OriginPortControllerID = varOriginPortControllerID;
			
			item.DestinationPortControllerID = varDestinationPortControllerID;
			
			item.CustomersRef = varCustomersRef;
			
			item.ContactID = varContactID;
			
			item.ExWorksDate = varExWorksDate;
			
			item.EWDLastUpdated = varEWDLastUpdated;
			
			item.CargoReady = varCargoReady;
			
			item.WarehouseDate = varWarehouseDate;
			
			item.OnTime = varOnTime;
			
			item.BookingReceived = varBookingReceived;
			
			item.OriginPointID = varOriginPointID;
			
			item.PortID = varPortID;
			
			item.DestinationPortID = varDestinationPortID;
			
			item.FinalDestinationID = varFinalDestinationID;
			
			item.CountryID = varCountryID;
			
			item.OldVesselName = varOldVesselName;
			
			item.DestinationCountryID = varDestinationCountryID;
			
			item.VesselID = varVesselID;
			
			item.VesselLastUpdated = varVesselLastUpdated;
			
			item.Ets = varEts;
			
			item.Eta = varEta;
			
			item.PearsonDivCode = varPearsonDivCode;
			
			item.PearsonSSRRef = varPearsonSSRRef;
			
			item.HouseBLNUmber = varHouseBLNUmber;
			
			item.HouseBLAdded = varHouseBLAdded;
			
			item.ShippedOnBoard = varShippedOnBoard;
			
			item.EstCopies = varEstCopies;
			
			item.CopiesLastUpdated = varCopiesLastUpdated;
			
			item.EstCartons = varEstCartons;
			
			item.EstPallets = varEstPallets;
			
			item.EstWeight = varEstWeight;
			
			item.EstVolume = varEstVolume;
			
			item.Palletise = varPalletise;
			
			item.PackageTypeID = varPackageTypeID;
			
			item.NumberOfPackages = varNumberOfPackages;
			
			item.ActualCartons = varActualCartons;
			
			item.ActualPallets = varActualPallets;
			
			item.Jackets = varJackets;
			
			item.ActualWeight = varActualWeight;
			
			item.WeightLastUpdated = varWeightLastUpdated;
			
			item.ActualVolume = varActualVolume;
			
			item.VolumeLastUpdated = varVolumeLastUpdated;
			
			item.Fcllcl = varFcllcl;
			
			item.Est20 = varEst20;
			
			item.Est40 = varEst40;
			
			item.EstLCLWt = varEstLCLWt;
			
			item.EstLCLVol = varEstLCLVol;
			
			item.No20 = varNo20;
			
			item.No40 = varNo40;
			
			item.LCLWt = varLCLWt;
			
			item.LCLVol = varLCLVol;
			
			item.Remarks = varRemarks;
			
			item.RemarksToCustomer = varRemarksToCustomer;
			
			item.QuoteRef = varQuoteRef;
			
			item.Sellingrate = varSellingrate;
			
			item.SellingrateAgent = varSellingrateAgent;
			
			item.DocsRcdAndApproved = varDocsRcdAndApproved;
			
			item.DocsApprovedDate = varDocsApprovedDate;
			
			item.JobClosureDate = varJobClosureDate;
			
			item.JobClosed = varJobClosed;
			
			item.ExpressBL = varExpressBL;
			
			item.FumigationCert = varFumigationCert;
			
			item.GSPCert = varGSPCert;
			
			item.COfO = varCOfO;
			
			item.PackingDeclaration = varPackingDeclaration;
			
			item.OtherDocsRequired = varOtherDocsRequired;
			
			item.Incoterms = varIncoterms;
			
			item.PricePerCopy = varPricePerCopy;
			
			item.Customs = varCustoms;
			
			item.Currency = varCurrency;
			
			item.InvoiceAddresseeID = varInvoiceAddresseeID;
			
			item.ConsolNumber = varConsolNumber;
			
			item.UnitPricePerCopy = varUnitPricePerCopy;
			
			item.OnHold = varOnHold;
			
			item.ContainerInfo = varContainerInfo;
			
			item.Cleared = varCleared;
			
			item.HodderPricePerCopy = varHodderPricePerCopy;
			
			item.FileCoverPrintedOrigin = varFileCoverPrintedOrigin;
			
			item.FileCoverPrintedDest = varFileCoverPrintedDest;
			
			item.ClientsTerms = varClientsTerms;
			
			item.OriginTrucking = varOriginTrucking;
			
			item.OrignTHC = varOrignTHC;
			
			item.OriginDocs = varOriginDocs;
			
			item.Freight = varFreight;
			
			item.DestTHC = varDestTHC;
			
			item.DestPalletisation = varDestPalletisation;
			
			item.CustomsClearance = varCustomsClearance;
			
			item.DeliveryCharges = varDeliveryCharges;
			
			item.CoLoaderComments = varCoLoaderComments;
			
			item.Pdcid = varPdcid;
			
			item.HCCompositeRef = varHCCompositeRef;
			
			item.HCInvoiceAmount = varHCInvoiceAmount;
			
			item.Impression = varImpression;
			
			item.InsuranceValue = varInsuranceValue;
			
			item.InvoiceNumber = varInvoiceNumber;
			
			item.InvoiceDate = varInvoiceDate;
			
			item.CancelRequestRcd = varCancelRequestRcd;
			
			item.OrderCancelled = varOrderCancelled;
			
			item.CancelDate = varCancelDate;
			
			item.CancelledBy = varCancelledBy;
			
			item.InvoiceTo = varInvoiceTo;
			
			item.HCInvoiceAmount2 = varHCInvoiceAmount2;
			
			item.OrderAckSent = varOrderAckSent;
			
			item.CargoUpdateId = varCargoUpdateId;
			
			item.QuoteId = varQuoteId;
			
			item.DocumentFolder = varDocumentFolder;
			
			item.InsuranceValues = varInsuranceValues;
			
			item.Ts = varTs;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varOrderID,int? varOrderNumber,string varOfficeIndicator,bool varPublishipOrder,DateTime? varDateOrderCreated,bool varHotJob,int? varCompanyID,int? varConsigneeID,int? varNotifyPartyID,int? varAgentAtOriginID,int? varAgentAtDestinationID,int? varPrinterID,int? varClearingAgentID,int? varOnCarriageID,int? varOrderControllerID,int? varOperationsControllerID,int? varOriginPortControllerID,int? varDestinationPortControllerID,string varCustomersRef,int? varContactID,DateTime? varExWorksDate,DateTime? varEWDLastUpdated,DateTime? varCargoReady,DateTime? varWarehouseDate,bool? varOnTime,DateTime? varBookingReceived,int? varOriginPointID,int? varPortID,int? varDestinationPortID,int? varFinalDestinationID,int? varCountryID,string varOldVesselName,int? varDestinationCountryID,int? varVesselID,DateTime? varVesselLastUpdated,DateTime? varEts,DateTime? varEta,string varPearsonDivCode,string varPearsonSSRRef,string varHouseBLNUmber,bool varHouseBLAdded,bool varShippedOnBoard,float? varEstCopies,DateTime? varCopiesLastUpdated,int? varEstCartons,int? varEstPallets,int? varEstWeight,float? varEstVolume,int? varPalletise,int? varPackageTypeID,int? varNumberOfPackages,int? varActualCartons,int? varActualPallets,int? varJackets,int? varActualWeight,DateTime? varWeightLastUpdated,float? varActualVolume,DateTime? varVolumeLastUpdated,bool? varFcllcl,int? varEst20,int? varEst40,int? varEstLCLWt,float? varEstLCLVol,int? varNo20,int? varNo40,int? varLCLWt,float? varLCLVol,string varRemarks,string varRemarksToCustomer,int? varQuoteRef,string varSellingrate,string varSellingrateAgent,bool varDocsRcdAndApproved,DateTime? varDocsApprovedDate,DateTime? varJobClosureDate,bool varJobClosed,bool varExpressBL,bool varFumigationCert,bool varGSPCert,bool varCOfO,bool varPackingDeclaration,string varOtherDocsRequired,string varIncoterms,float? varPricePerCopy,string varCustoms,string varCurrency,int? varInvoiceAddresseeID,int? varConsolNumber,float? varUnitPricePerCopy,bool varOnHold,string varContainerInfo,DateTime? varCleared,float? varHodderPricePerCopy,bool varFileCoverPrintedOrigin,bool varFileCoverPrintedDest,string varClientsTerms,string varOriginTrucking,string varOrignTHC,string varOriginDocs,string varFreight,string varDestTHC,string varDestPalletisation,string varCustomsClearance,string varDeliveryCharges,string varCoLoaderComments,string varPdcid,string varHCCompositeRef,decimal? varHCInvoiceAmount,string varImpression,decimal? varInsuranceValue,int? varInvoiceNumber,DateTime? varInvoiceDate,DateTime? varCancelRequestRcd,bool? varOrderCancelled,DateTime? varCancelDate,int? varCancelledBy,int? varInvoiceTo,decimal? varHCInvoiceAmount2,bool? varOrderAckSent,int? varCargoUpdateId,int? varQuoteId,int? varDocumentFolder,double? varInsuranceValues,byte[] varTs)
		{
			OrderTable item = new OrderTable();
			
				item.OrderID = varOrderID;
			
				item.OrderNumber = varOrderNumber;
			
				item.OfficeIndicator = varOfficeIndicator;
			
				item.PublishipOrder = varPublishipOrder;
			
				item.DateOrderCreated = varDateOrderCreated;
			
				item.HotJob = varHotJob;
			
				item.CompanyID = varCompanyID;
			
				item.ConsigneeID = varConsigneeID;
			
				item.NotifyPartyID = varNotifyPartyID;
			
				item.AgentAtOriginID = varAgentAtOriginID;
			
				item.AgentAtDestinationID = varAgentAtDestinationID;
			
				item.PrinterID = varPrinterID;
			
				item.ClearingAgentID = varClearingAgentID;
			
				item.OnCarriageID = varOnCarriageID;
			
				item.OrderControllerID = varOrderControllerID;
			
				item.OperationsControllerID = varOperationsControllerID;
			
				item.OriginPortControllerID = varOriginPortControllerID;
			
				item.DestinationPortControllerID = varDestinationPortControllerID;
			
				item.CustomersRef = varCustomersRef;
			
				item.ContactID = varContactID;
			
				item.ExWorksDate = varExWorksDate;
			
				item.EWDLastUpdated = varEWDLastUpdated;
			
				item.CargoReady = varCargoReady;
			
				item.WarehouseDate = varWarehouseDate;
			
				item.OnTime = varOnTime;
			
				item.BookingReceived = varBookingReceived;
			
				item.OriginPointID = varOriginPointID;
			
				item.PortID = varPortID;
			
				item.DestinationPortID = varDestinationPortID;
			
				item.FinalDestinationID = varFinalDestinationID;
			
				item.CountryID = varCountryID;
			
				item.OldVesselName = varOldVesselName;
			
				item.DestinationCountryID = varDestinationCountryID;
			
				item.VesselID = varVesselID;
			
				item.VesselLastUpdated = varVesselLastUpdated;
			
				item.Ets = varEts;
			
				item.Eta = varEta;
			
				item.PearsonDivCode = varPearsonDivCode;
			
				item.PearsonSSRRef = varPearsonSSRRef;
			
				item.HouseBLNUmber = varHouseBLNUmber;
			
				item.HouseBLAdded = varHouseBLAdded;
			
				item.ShippedOnBoard = varShippedOnBoard;
			
				item.EstCopies = varEstCopies;
			
				item.CopiesLastUpdated = varCopiesLastUpdated;
			
				item.EstCartons = varEstCartons;
			
				item.EstPallets = varEstPallets;
			
				item.EstWeight = varEstWeight;
			
				item.EstVolume = varEstVolume;
			
				item.Palletise = varPalletise;
			
				item.PackageTypeID = varPackageTypeID;
			
				item.NumberOfPackages = varNumberOfPackages;
			
				item.ActualCartons = varActualCartons;
			
				item.ActualPallets = varActualPallets;
			
				item.Jackets = varJackets;
			
				item.ActualWeight = varActualWeight;
			
				item.WeightLastUpdated = varWeightLastUpdated;
			
				item.ActualVolume = varActualVolume;
			
				item.VolumeLastUpdated = varVolumeLastUpdated;
			
				item.Fcllcl = varFcllcl;
			
				item.Est20 = varEst20;
			
				item.Est40 = varEst40;
			
				item.EstLCLWt = varEstLCLWt;
			
				item.EstLCLVol = varEstLCLVol;
			
				item.No20 = varNo20;
			
				item.No40 = varNo40;
			
				item.LCLWt = varLCLWt;
			
				item.LCLVol = varLCLVol;
			
				item.Remarks = varRemarks;
			
				item.RemarksToCustomer = varRemarksToCustomer;
			
				item.QuoteRef = varQuoteRef;
			
				item.Sellingrate = varSellingrate;
			
				item.SellingrateAgent = varSellingrateAgent;
			
				item.DocsRcdAndApproved = varDocsRcdAndApproved;
			
				item.DocsApprovedDate = varDocsApprovedDate;
			
				item.JobClosureDate = varJobClosureDate;
			
				item.JobClosed = varJobClosed;
			
				item.ExpressBL = varExpressBL;
			
				item.FumigationCert = varFumigationCert;
			
				item.GSPCert = varGSPCert;
			
				item.COfO = varCOfO;
			
				item.PackingDeclaration = varPackingDeclaration;
			
				item.OtherDocsRequired = varOtherDocsRequired;
			
				item.Incoterms = varIncoterms;
			
				item.PricePerCopy = varPricePerCopy;
			
				item.Customs = varCustoms;
			
				item.Currency = varCurrency;
			
				item.InvoiceAddresseeID = varInvoiceAddresseeID;
			
				item.ConsolNumber = varConsolNumber;
			
				item.UnitPricePerCopy = varUnitPricePerCopy;
			
				item.OnHold = varOnHold;
			
				item.ContainerInfo = varContainerInfo;
			
				item.Cleared = varCleared;
			
				item.HodderPricePerCopy = varHodderPricePerCopy;
			
				item.FileCoverPrintedOrigin = varFileCoverPrintedOrigin;
			
				item.FileCoverPrintedDest = varFileCoverPrintedDest;
			
				item.ClientsTerms = varClientsTerms;
			
				item.OriginTrucking = varOriginTrucking;
			
				item.OrignTHC = varOrignTHC;
			
				item.OriginDocs = varOriginDocs;
			
				item.Freight = varFreight;
			
				item.DestTHC = varDestTHC;
			
				item.DestPalletisation = varDestPalletisation;
			
				item.CustomsClearance = varCustomsClearance;
			
				item.DeliveryCharges = varDeliveryCharges;
			
				item.CoLoaderComments = varCoLoaderComments;
			
				item.Pdcid = varPdcid;
			
				item.HCCompositeRef = varHCCompositeRef;
			
				item.HCInvoiceAmount = varHCInvoiceAmount;
			
				item.Impression = varImpression;
			
				item.InsuranceValue = varInsuranceValue;
			
				item.InvoiceNumber = varInvoiceNumber;
			
				item.InvoiceDate = varInvoiceDate;
			
				item.CancelRequestRcd = varCancelRequestRcd;
			
				item.OrderCancelled = varOrderCancelled;
			
				item.CancelDate = varCancelDate;
			
				item.CancelledBy = varCancelledBy;
			
				item.InvoiceTo = varInvoiceTo;
			
				item.HCInvoiceAmount2 = varHCInvoiceAmount2;
			
				item.OrderAckSent = varOrderAckSent;
			
				item.CargoUpdateId = varCargoUpdateId;
			
				item.QuoteId = varQuoteId;
			
				item.DocumentFolder = varDocumentFolder;
			
				item.InsuranceValues = varInsuranceValues;
			
				item.Ts = varTs;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn OrderIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn OrderNumberColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn OfficeIndicatorColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn PublishipOrderColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn DateOrderCreatedColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn HotJobColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn CompanyIDColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn ConsigneeIDColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn NotifyPartyIDColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn AgentAtOriginIDColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn AgentAtDestinationIDColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn PrinterIDColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn ClearingAgentIDColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn OnCarriageIDColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn OrderControllerIDColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn OperationsControllerIDColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        public static TableSchema.TableColumn OriginPortControllerIDColumn
        {
            get { return Schema.Columns[16]; }
        }
        
        
        
        public static TableSchema.TableColumn DestinationPortControllerIDColumn
        {
            get { return Schema.Columns[17]; }
        }
        
        
        
        public static TableSchema.TableColumn CustomersRefColumn
        {
            get { return Schema.Columns[18]; }
        }
        
        
        
        public static TableSchema.TableColumn ContactIDColumn
        {
            get { return Schema.Columns[19]; }
        }
        
        
        
        public static TableSchema.TableColumn ExWorksDateColumn
        {
            get { return Schema.Columns[20]; }
        }
        
        
        
        public static TableSchema.TableColumn EWDLastUpdatedColumn
        {
            get { return Schema.Columns[21]; }
        }
        
        
        
        public static TableSchema.TableColumn CargoReadyColumn
        {
            get { return Schema.Columns[22]; }
        }
        
        
        
        public static TableSchema.TableColumn WarehouseDateColumn
        {
            get { return Schema.Columns[23]; }
        }
        
        
        
        public static TableSchema.TableColumn OnTimeColumn
        {
            get { return Schema.Columns[24]; }
        }
        
        
        
        public static TableSchema.TableColumn BookingReceivedColumn
        {
            get { return Schema.Columns[25]; }
        }
        
        
        
        public static TableSchema.TableColumn OriginPointIDColumn
        {
            get { return Schema.Columns[26]; }
        }
        
        
        
        public static TableSchema.TableColumn PortIDColumn
        {
            get { return Schema.Columns[27]; }
        }
        
        
        
        public static TableSchema.TableColumn DestinationPortIDColumn
        {
            get { return Schema.Columns[28]; }
        }
        
        
        
        public static TableSchema.TableColumn FinalDestinationIDColumn
        {
            get { return Schema.Columns[29]; }
        }
        
        
        
        public static TableSchema.TableColumn CountryIDColumn
        {
            get { return Schema.Columns[30]; }
        }
        
        
        
        public static TableSchema.TableColumn OldVesselNameColumn
        {
            get { return Schema.Columns[31]; }
        }
        
        
        
        public static TableSchema.TableColumn DestinationCountryIDColumn
        {
            get { return Schema.Columns[32]; }
        }
        
        
        
        public static TableSchema.TableColumn VesselIDColumn
        {
            get { return Schema.Columns[33]; }
        }
        
        
        
        public static TableSchema.TableColumn VesselLastUpdatedColumn
        {
            get { return Schema.Columns[34]; }
        }
        
        
        
        public static TableSchema.TableColumn EtsColumn
        {
            get { return Schema.Columns[35]; }
        }
        
        
        
        public static TableSchema.TableColumn EtaColumn
        {
            get { return Schema.Columns[36]; }
        }
        
        
        
        public static TableSchema.TableColumn PearsonDivCodeColumn
        {
            get { return Schema.Columns[37]; }
        }
        
        
        
        public static TableSchema.TableColumn PearsonSSRRefColumn
        {
            get { return Schema.Columns[38]; }
        }
        
        
        
        public static TableSchema.TableColumn HouseBLNUmberColumn
        {
            get { return Schema.Columns[39]; }
        }
        
        
        
        public static TableSchema.TableColumn HouseBLAddedColumn
        {
            get { return Schema.Columns[40]; }
        }
        
        
        
        public static TableSchema.TableColumn ShippedOnBoardColumn
        {
            get { return Schema.Columns[41]; }
        }
        
        
        
        public static TableSchema.TableColumn EstCopiesColumn
        {
            get { return Schema.Columns[42]; }
        }
        
        
        
        public static TableSchema.TableColumn CopiesLastUpdatedColumn
        {
            get { return Schema.Columns[43]; }
        }
        
        
        
        public static TableSchema.TableColumn EstCartonsColumn
        {
            get { return Schema.Columns[44]; }
        }
        
        
        
        public static TableSchema.TableColumn EstPalletsColumn
        {
            get { return Schema.Columns[45]; }
        }
        
        
        
        public static TableSchema.TableColumn EstWeightColumn
        {
            get { return Schema.Columns[46]; }
        }
        
        
        
        public static TableSchema.TableColumn EstVolumeColumn
        {
            get { return Schema.Columns[47]; }
        }
        
        
        
        public static TableSchema.TableColumn PalletiseColumn
        {
            get { return Schema.Columns[48]; }
        }
        
        
        
        public static TableSchema.TableColumn PackageTypeIDColumn
        {
            get { return Schema.Columns[49]; }
        }
        
        
        
        public static TableSchema.TableColumn NumberOfPackagesColumn
        {
            get { return Schema.Columns[50]; }
        }
        
        
        
        public static TableSchema.TableColumn ActualCartonsColumn
        {
            get { return Schema.Columns[51]; }
        }
        
        
        
        public static TableSchema.TableColumn ActualPalletsColumn
        {
            get { return Schema.Columns[52]; }
        }
        
        
        
        public static TableSchema.TableColumn JacketsColumn
        {
            get { return Schema.Columns[53]; }
        }
        
        
        
        public static TableSchema.TableColumn ActualWeightColumn
        {
            get { return Schema.Columns[54]; }
        }
        
        
        
        public static TableSchema.TableColumn WeightLastUpdatedColumn
        {
            get { return Schema.Columns[55]; }
        }
        
        
        
        public static TableSchema.TableColumn ActualVolumeColumn
        {
            get { return Schema.Columns[56]; }
        }
        
        
        
        public static TableSchema.TableColumn VolumeLastUpdatedColumn
        {
            get { return Schema.Columns[57]; }
        }
        
        
        
        public static TableSchema.TableColumn FcllclColumn
        {
            get { return Schema.Columns[58]; }
        }
        
        
        
        public static TableSchema.TableColumn Est20Column
        {
            get { return Schema.Columns[59]; }
        }
        
        
        
        public static TableSchema.TableColumn Est40Column
        {
            get { return Schema.Columns[60]; }
        }
        
        
        
        public static TableSchema.TableColumn EstLCLWtColumn
        {
            get { return Schema.Columns[61]; }
        }
        
        
        
        public static TableSchema.TableColumn EstLCLVolColumn
        {
            get { return Schema.Columns[62]; }
        }
        
        
        
        public static TableSchema.TableColumn No20Column
        {
            get { return Schema.Columns[63]; }
        }
        
        
        
        public static TableSchema.TableColumn No40Column
        {
            get { return Schema.Columns[64]; }
        }
        
        
        
        public static TableSchema.TableColumn LCLWtColumn
        {
            get { return Schema.Columns[65]; }
        }
        
        
        
        public static TableSchema.TableColumn LCLVolColumn
        {
            get { return Schema.Columns[66]; }
        }
        
        
        
        public static TableSchema.TableColumn RemarksColumn
        {
            get { return Schema.Columns[67]; }
        }
        
        
        
        public static TableSchema.TableColumn RemarksToCustomerColumn
        {
            get { return Schema.Columns[68]; }
        }
        
        
        
        public static TableSchema.TableColumn QuoteRefColumn
        {
            get { return Schema.Columns[69]; }
        }
        
        
        
        public static TableSchema.TableColumn SellingrateColumn
        {
            get { return Schema.Columns[70]; }
        }
        
        
        
        public static TableSchema.TableColumn SellingrateAgentColumn
        {
            get { return Schema.Columns[71]; }
        }
        
        
        
        public static TableSchema.TableColumn DocsRcdAndApprovedColumn
        {
            get { return Schema.Columns[72]; }
        }
        
        
        
        public static TableSchema.TableColumn DocsApprovedDateColumn
        {
            get { return Schema.Columns[73]; }
        }
        
        
        
        public static TableSchema.TableColumn JobClosureDateColumn
        {
            get { return Schema.Columns[74]; }
        }
        
        
        
        public static TableSchema.TableColumn JobClosedColumn
        {
            get { return Schema.Columns[75]; }
        }
        
        
        
        public static TableSchema.TableColumn ExpressBLColumn
        {
            get { return Schema.Columns[76]; }
        }
        
        
        
        public static TableSchema.TableColumn FumigationCertColumn
        {
            get { return Schema.Columns[77]; }
        }
        
        
        
        public static TableSchema.TableColumn GSPCertColumn
        {
            get { return Schema.Columns[78]; }
        }
        
        
        
        public static TableSchema.TableColumn COfOColumn
        {
            get { return Schema.Columns[79]; }
        }
        
        
        
        public static TableSchema.TableColumn PackingDeclarationColumn
        {
            get { return Schema.Columns[80]; }
        }
        
        
        
        public static TableSchema.TableColumn OtherDocsRequiredColumn
        {
            get { return Schema.Columns[81]; }
        }
        
        
        
        public static TableSchema.TableColumn IncotermsColumn
        {
            get { return Schema.Columns[82]; }
        }
        
        
        
        public static TableSchema.TableColumn PricePerCopyColumn
        {
            get { return Schema.Columns[83]; }
        }
        
        
        
        public static TableSchema.TableColumn CustomsColumn
        {
            get { return Schema.Columns[84]; }
        }
        
        
        
        public static TableSchema.TableColumn CurrencyColumn
        {
            get { return Schema.Columns[85]; }
        }
        
        
        
        public static TableSchema.TableColumn InvoiceAddresseeIDColumn
        {
            get { return Schema.Columns[86]; }
        }
        
        
        
        public static TableSchema.TableColumn ConsolNumberColumn
        {
            get { return Schema.Columns[87]; }
        }
        
        
        
        public static TableSchema.TableColumn UnitPricePerCopyColumn
        {
            get { return Schema.Columns[88]; }
        }
        
        
        
        public static TableSchema.TableColumn OnHoldColumn
        {
            get { return Schema.Columns[89]; }
        }
        
        
        
        public static TableSchema.TableColumn ContainerInfoColumn
        {
            get { return Schema.Columns[90]; }
        }
        
        
        
        public static TableSchema.TableColumn ClearedColumn
        {
            get { return Schema.Columns[91]; }
        }
        
        
        
        public static TableSchema.TableColumn HodderPricePerCopyColumn
        {
            get { return Schema.Columns[92]; }
        }
        
        
        
        public static TableSchema.TableColumn FileCoverPrintedOriginColumn
        {
            get { return Schema.Columns[93]; }
        }
        
        
        
        public static TableSchema.TableColumn FileCoverPrintedDestColumn
        {
            get { return Schema.Columns[94]; }
        }
        
        
        
        public static TableSchema.TableColumn ClientsTermsColumn
        {
            get { return Schema.Columns[95]; }
        }
        
        
        
        public static TableSchema.TableColumn OriginTruckingColumn
        {
            get { return Schema.Columns[96]; }
        }
        
        
        
        public static TableSchema.TableColumn OrignTHCColumn
        {
            get { return Schema.Columns[97]; }
        }
        
        
        
        public static TableSchema.TableColumn OriginDocsColumn
        {
            get { return Schema.Columns[98]; }
        }
        
        
        
        public static TableSchema.TableColumn FreightColumn
        {
            get { return Schema.Columns[99]; }
        }
        
        
        
        public static TableSchema.TableColumn DestTHCColumn
        {
            get { return Schema.Columns[100]; }
        }
        
        
        
        public static TableSchema.TableColumn DestPalletisationColumn
        {
            get { return Schema.Columns[101]; }
        }
        
        
        
        public static TableSchema.TableColumn CustomsClearanceColumn
        {
            get { return Schema.Columns[102]; }
        }
        
        
        
        public static TableSchema.TableColumn DeliveryChargesColumn
        {
            get { return Schema.Columns[103]; }
        }
        
        
        
        public static TableSchema.TableColumn CoLoaderCommentsColumn
        {
            get { return Schema.Columns[104]; }
        }
        
        
        
        public static TableSchema.TableColumn PdcidColumn
        {
            get { return Schema.Columns[105]; }
        }
        
        
        
        public static TableSchema.TableColumn HCCompositeRefColumn
        {
            get { return Schema.Columns[106]; }
        }
        
        
        
        public static TableSchema.TableColumn HCInvoiceAmountColumn
        {
            get { return Schema.Columns[107]; }
        }
        
        
        
        public static TableSchema.TableColumn ImpressionColumn
        {
            get { return Schema.Columns[108]; }
        }
        
        
        
        public static TableSchema.TableColumn InsuranceValueColumn
        {
            get { return Schema.Columns[109]; }
        }
        
        
        
        public static TableSchema.TableColumn InvoiceNumberColumn
        {
            get { return Schema.Columns[110]; }
        }
        
        
        
        public static TableSchema.TableColumn InvoiceDateColumn
        {
            get { return Schema.Columns[111]; }
        }
        
        
        
        public static TableSchema.TableColumn CancelRequestRcdColumn
        {
            get { return Schema.Columns[112]; }
        }
        
        
        
        public static TableSchema.TableColumn OrderCancelledColumn
        {
            get { return Schema.Columns[113]; }
        }
        
        
        
        public static TableSchema.TableColumn CancelDateColumn
        {
            get { return Schema.Columns[114]; }
        }
        
        
        
        public static TableSchema.TableColumn CancelledByColumn
        {
            get { return Schema.Columns[115]; }
        }
        
        
        
        public static TableSchema.TableColumn InvoiceToColumn
        {
            get { return Schema.Columns[116]; }
        }
        
        
        
        public static TableSchema.TableColumn HCInvoiceAmount2Column
        {
            get { return Schema.Columns[117]; }
        }
        
        
        
        public static TableSchema.TableColumn OrderAckSentColumn
        {
            get { return Schema.Columns[118]; }
        }
        
        
        
        public static TableSchema.TableColumn CargoUpdateIdColumn
        {
            get { return Schema.Columns[119]; }
        }
        
        
        
        public static TableSchema.TableColumn QuoteIdColumn
        {
            get { return Schema.Columns[120]; }
        }
        
        
        
        public static TableSchema.TableColumn DocumentFolderColumn
        {
            get { return Schema.Columns[121]; }
        }
        
        
        
        public static TableSchema.TableColumn InsuranceValuesColumn
        {
            get { return Schema.Columns[122]; }
        }
        
        
        
        public static TableSchema.TableColumn TsColumn
        {
            get { return Schema.Columns[123]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string OrderID = @"OrderID";
			 public static string OrderNumber = @"OrderNumber";
			 public static string OfficeIndicator = @"OfficeIndicator";
			 public static string PublishipOrder = @"PublishipOrder";
			 public static string DateOrderCreated = @"DateOrderCreated";
			 public static string HotJob = @"HotJob";
			 public static string CompanyID = @"CompanyID";
			 public static string ConsigneeID = @"ConsigneeID";
			 public static string NotifyPartyID = @"NotifyPartyID";
			 public static string AgentAtOriginID = @"AgentAtOriginID";
			 public static string AgentAtDestinationID = @"AgentAtDestinationID";
			 public static string PrinterID = @"PrinterID";
			 public static string ClearingAgentID = @"ClearingAgentID";
			 public static string OnCarriageID = @"OnCarriageID";
			 public static string OrderControllerID = @"OrderControllerID";
			 public static string OperationsControllerID = @"OperationsControllerID";
			 public static string OriginPortControllerID = @"OriginPortControllerID";
			 public static string DestinationPortControllerID = @"DestinationPortControllerID";
			 public static string CustomersRef = @"CustomersRef";
			 public static string ContactID = @"ContactID";
			 public static string ExWorksDate = @"ExWorksDate";
			 public static string EWDLastUpdated = @"EWDLastUpdated";
			 public static string CargoReady = @"CargoReady";
			 public static string WarehouseDate = @"WarehouseDate";
			 public static string OnTime = @"OnTime";
			 public static string BookingReceived = @"BookingReceived";
			 public static string OriginPointID = @"OriginPointID";
			 public static string PortID = @"PortID";
			 public static string DestinationPortID = @"DestinationPortID";
			 public static string FinalDestinationID = @"FinalDestinationID";
			 public static string CountryID = @"CountryID";
			 public static string OldVesselName = @"OldVesselName";
			 public static string DestinationCountryID = @"DestinationCountryID";
			 public static string VesselID = @"VesselID";
			 public static string VesselLastUpdated = @"VesselLastUpdated";
			 public static string Ets = @"ETS";
			 public static string Eta = @"ETA";
			 public static string PearsonDivCode = @"PearsonDivCode";
			 public static string PearsonSSRRef = @"PearsonSSRRef";
			 public static string HouseBLNUmber = @"HouseBLNUmber";
			 public static string HouseBLAdded = @"HouseBLAdded";
			 public static string ShippedOnBoard = @"ShippedOnBoard";
			 public static string EstCopies = @"EstCopies";
			 public static string CopiesLastUpdated = @"CopiesLastUpdated";
			 public static string EstCartons = @"EstCartons";
			 public static string EstPallets = @"EstPallets";
			 public static string EstWeight = @"EstWeight";
			 public static string EstVolume = @"EstVolume";
			 public static string Palletise = @"Palletise";
			 public static string PackageTypeID = @"PackageTypeID";
			 public static string NumberOfPackages = @"NumberOfPackages";
			 public static string ActualCartons = @"ActualCartons";
			 public static string ActualPallets = @"ActualPallets";
			 public static string Jackets = @"Jackets";
			 public static string ActualWeight = @"ActualWeight";
			 public static string WeightLastUpdated = @"WeightLastUpdated";
			 public static string ActualVolume = @"ActualVolume";
			 public static string VolumeLastUpdated = @"VolumeLastUpdated";
			 public static string Fcllcl = @"FCLLCL";
			 public static string Est20 = @"Est20";
			 public static string Est40 = @"Est40";
			 public static string EstLCLWt = @"EstLCLWt";
			 public static string EstLCLVol = @"EstLCLVol";
			 public static string No20 = @"No20";
			 public static string No40 = @"No40";
			 public static string LCLWt = @"LCLWt";
			 public static string LCLVol = @"LCLVol";
			 public static string Remarks = @"Remarks";
			 public static string RemarksToCustomer = @"RemarksToCustomer";
			 public static string QuoteRef = @"QuoteRef";
			 public static string Sellingrate = @"Sellingrate";
			 public static string SellingrateAgent = @"SellingrateAgent";
			 public static string DocsRcdAndApproved = @"DocsRcdAndApproved";
			 public static string DocsApprovedDate = @"DocsApprovedDate";
			 public static string JobClosureDate = @"JobClosureDate";
			 public static string JobClosed = @"JobClosed";
			 public static string ExpressBL = @"ExpressBL";
			 public static string FumigationCert = @"FumigationCert";
			 public static string GSPCert = @"GSPCert";
			 public static string COfO = @"COfO";
			 public static string PackingDeclaration = @"PackingDeclaration";
			 public static string OtherDocsRequired = @"OtherDocsRequired";
			 public static string Incoterms = @"Incoterms";
			 public static string PricePerCopy = @"PricePerCopy";
			 public static string Customs = @"Customs";
			 public static string Currency = @"Currency";
			 public static string InvoiceAddresseeID = @"InvoiceAddresseeID";
			 public static string ConsolNumber = @"ConsolNumber";
			 public static string UnitPricePerCopy = @"UnitPricePerCopy";
			 public static string OnHold = @"OnHold";
			 public static string ContainerInfo = @"ContainerInfo";
			 public static string Cleared = @"Cleared";
			 public static string HodderPricePerCopy = @"HodderPricePerCopy";
			 public static string FileCoverPrintedOrigin = @"FileCoverPrintedOrigin";
			 public static string FileCoverPrintedDest = @"FileCoverPrintedDest";
			 public static string ClientsTerms = @"ClientsTerms";
			 public static string OriginTrucking = @"OriginTrucking";
			 public static string OrignTHC = @"OrignTHC";
			 public static string OriginDocs = @"OriginDocs";
			 public static string Freight = @"Freight";
			 public static string DestTHC = @"DestTHC";
			 public static string DestPalletisation = @"DestPalletisation";
			 public static string CustomsClearance = @"CustomsClearance";
			 public static string DeliveryCharges = @"DeliveryCharges";
			 public static string CoLoaderComments = @"CoLoaderComments";
			 public static string Pdcid = @"PDCID";
			 public static string HCCompositeRef = @"HCCompositeRef";
			 public static string HCInvoiceAmount = @"HCInvoiceAmount";
			 public static string Impression = @"Impression";
			 public static string InsuranceValue = @"InsuranceValue";
			 public static string InvoiceNumber = @"InvoiceNumber";
			 public static string InvoiceDate = @"InvoiceDate";
			 public static string CancelRequestRcd = @"CancelRequestRcd";
			 public static string OrderCancelled = @"OrderCancelled";
			 public static string CancelDate = @"CancelDate";
			 public static string CancelledBy = @"CancelledBy";
			 public static string InvoiceTo = @"InvoiceTo";
			 public static string HCInvoiceAmount2 = @"HCInvoiceAmount2";
			 public static string OrderAckSent = @"OrderAckSent";
			 public static string CargoUpdateId = @"CargoUpdateId";
			 public static string QuoteId = @"quote_id";
			 public static string DocumentFolder = @"document_folder";
			 public static string InsuranceValues = @"InsuranceValues";
			 public static string Ts = @"TS";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
