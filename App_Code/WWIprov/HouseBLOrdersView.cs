using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DAL.Logistics{
    /// <summary>
    /// Strongly-typed collection for the HouseBLOrdersView class.
    /// </summary>
    [Serializable]
    public partial class HouseBLOrdersViewCollection : ReadOnlyList<HouseBLOrdersView, HouseBLOrdersViewCollection>
    {        
        public HouseBLOrdersViewCollection() {}
    }
    /// <summary>
    /// This is  Read-only wrapper class for the HouseBLOrdersView view.
    /// </summary>
    [Serializable]
    public partial class HouseBLOrdersView : ReadOnlyRecord<HouseBLOrdersView>, IReadOnlyRecord
    {
    
	    #region Default Settings
	    protected static void SetSQLProps() 
	    {
		    GetTableSchema();
	    }
	    #endregion
        #region Schema Accessor
	    public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                {
                    SetSQLProps();
                }
                return BaseSchema;
            }
        }
    	
        private static void GetTableSchema() 
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("HouseBLOrdersView", TableType.View, DataService.GetInstance("WWIprov"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns
                
                TableSchema.TableColumn colvarOrderID = new TableSchema.TableColumn(schema);
                colvarOrderID.ColumnName = "OrderID";
                colvarOrderID.DataType = DbType.Int32;
                colvarOrderID.MaxLength = 0;
                colvarOrderID.AutoIncrement = false;
                colvarOrderID.IsNullable = false;
                colvarOrderID.IsPrimaryKey = false;
                colvarOrderID.IsForeignKey = false;
                colvarOrderID.IsReadOnly = false;
                
                schema.Columns.Add(colvarOrderID);
                
                TableSchema.TableColumn colvarOrderNumber = new TableSchema.TableColumn(schema);
                colvarOrderNumber.ColumnName = "OrderNumber";
                colvarOrderNumber.DataType = DbType.Int32;
                colvarOrderNumber.MaxLength = 0;
                colvarOrderNumber.AutoIncrement = false;
                colvarOrderNumber.IsNullable = true;
                colvarOrderNumber.IsPrimaryKey = false;
                colvarOrderNumber.IsForeignKey = false;
                colvarOrderNumber.IsReadOnly = false;
                
                schema.Columns.Add(colvarOrderNumber);
                
                TableSchema.TableColumn colvarActualWeight = new TableSchema.TableColumn(schema);
                colvarActualWeight.ColumnName = "ActualWeight";
                colvarActualWeight.DataType = DbType.Int32;
                colvarActualWeight.MaxLength = 0;
                colvarActualWeight.AutoIncrement = false;
                colvarActualWeight.IsNullable = true;
                colvarActualWeight.IsPrimaryKey = false;
                colvarActualWeight.IsForeignKey = false;
                colvarActualWeight.IsReadOnly = false;
                
                schema.Columns.Add(colvarActualWeight);
                
                TableSchema.TableColumn colvarActualVolume = new TableSchema.TableColumn(schema);
                colvarActualVolume.ColumnName = "ActualVolume";
                colvarActualVolume.DataType = DbType.Single;
                colvarActualVolume.MaxLength = 0;
                colvarActualVolume.AutoIncrement = false;
                colvarActualVolume.IsNullable = true;
                colvarActualVolume.IsPrimaryKey = false;
                colvarActualVolume.IsForeignKey = false;
                colvarActualVolume.IsReadOnly = false;
                
                schema.Columns.Add(colvarActualVolume);
                
                TableSchema.TableColumn colvarPortID = new TableSchema.TableColumn(schema);
                colvarPortID.ColumnName = "PortID";
                colvarPortID.DataType = DbType.Int32;
                colvarPortID.MaxLength = 0;
                colvarPortID.AutoIncrement = false;
                colvarPortID.IsNullable = true;
                colvarPortID.IsPrimaryKey = false;
                colvarPortID.IsForeignKey = false;
                colvarPortID.IsReadOnly = false;
                
                schema.Columns.Add(colvarPortID);
                
                TableSchema.TableColumn colvarDestinationPortID = new TableSchema.TableColumn(schema);
                colvarDestinationPortID.ColumnName = "DestinationPortID";
                colvarDestinationPortID.DataType = DbType.Int32;
                colvarDestinationPortID.MaxLength = 0;
                colvarDestinationPortID.AutoIncrement = false;
                colvarDestinationPortID.IsNullable = true;
                colvarDestinationPortID.IsPrimaryKey = false;
                colvarDestinationPortID.IsForeignKey = false;
                colvarDestinationPortID.IsReadOnly = false;
                
                schema.Columns.Add(colvarDestinationPortID);
                
                TableSchema.TableColumn colvarConsigneeID = new TableSchema.TableColumn(schema);
                colvarConsigneeID.ColumnName = "ConsigneeID";
                colvarConsigneeID.DataType = DbType.Int32;
                colvarConsigneeID.MaxLength = 0;
                colvarConsigneeID.AutoIncrement = false;
                colvarConsigneeID.IsNullable = true;
                colvarConsigneeID.IsPrimaryKey = false;
                colvarConsigneeID.IsForeignKey = false;
                colvarConsigneeID.IsReadOnly = false;
                
                schema.Columns.Add(colvarConsigneeID);
                
                TableSchema.TableColumn colvarHouseBLAdded = new TableSchema.TableColumn(schema);
                colvarHouseBLAdded.ColumnName = "HouseBLAdded";
                colvarHouseBLAdded.DataType = DbType.Boolean;
                colvarHouseBLAdded.MaxLength = 0;
                colvarHouseBLAdded.AutoIncrement = false;
                colvarHouseBLAdded.IsNullable = true;
                colvarHouseBLAdded.IsPrimaryKey = false;
                colvarHouseBLAdded.IsForeignKey = false;
                colvarHouseBLAdded.IsReadOnly = false;
                
                schema.Columns.Add(colvarHouseBLAdded);
                
                TableSchema.TableColumn colvarHouseBLNUmber = new TableSchema.TableColumn(schema);
                colvarHouseBLNUmber.ColumnName = "HouseBLNUmber";
                colvarHouseBLNUmber.DataType = DbType.String;
                colvarHouseBLNUmber.MaxLength = 50;
                colvarHouseBLNUmber.AutoIncrement = false;
                colvarHouseBLNUmber.IsNullable = true;
                colvarHouseBLNUmber.IsPrimaryKey = false;
                colvarHouseBLNUmber.IsForeignKey = false;
                colvarHouseBLNUmber.IsReadOnly = false;
                
                schema.Columns.Add(colvarHouseBLNUmber);
                
                
                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["WWIprov"].AddSchema("HouseBLOrdersView",schema);
            }
        }
        #endregion
        
        #region Query Accessor
	    public static Query CreateQuery()
	    {
		    return new Query(Schema);
	    }
	    #endregion
	    
	    #region .ctors
	    public HouseBLOrdersView()
	    {
            SetSQLProps();
            SetDefaults();
            MarkNew();
        }
        public HouseBLOrdersView(bool useDatabaseDefaults)
	    {
		    SetSQLProps();
		    if(useDatabaseDefaults)
		    {
				ForceDefaults();
			}
			MarkNew();
	    }
	    
	    public HouseBLOrdersView(object keyID)
	    {
		    SetSQLProps();
		    LoadByKey(keyID);
	    }
    	 
	    public HouseBLOrdersView(string columnName, object columnValue)
        {
            SetSQLProps();
            LoadByParam(columnName,columnValue);
        }
        
	    #endregion
	    
	    #region Props
	    
          
        [XmlAttribute("OrderID")]
        [Bindable(true)]
        public int OrderID 
	    {
		    get
		    {
			    return GetColumnValue<int>("OrderID");
		    }
            set 
		    {
			    SetColumnValue("OrderID", value);
            }
        }
	      
        [XmlAttribute("OrderNumber")]
        [Bindable(true)]
        public int? OrderNumber 
	    {
		    get
		    {
			    return GetColumnValue<int?>("OrderNumber");
		    }
            set 
		    {
			    SetColumnValue("OrderNumber", value);
            }
        }
	      
        [XmlAttribute("ActualWeight")]
        [Bindable(true)]
        public int? ActualWeight 
	    {
		    get
		    {
			    return GetColumnValue<int?>("ActualWeight");
		    }
            set 
		    {
			    SetColumnValue("ActualWeight", value);
            }
        }
	      
        [XmlAttribute("ActualVolume")]
        [Bindable(true)]
        public float? ActualVolume 
	    {
		    get
		    {
			    return GetColumnValue<float?>("ActualVolume");
		    }
            set 
		    {
			    SetColumnValue("ActualVolume", value);
            }
        }
	      
        [XmlAttribute("PortID")]
        [Bindable(true)]
        public int? PortID 
	    {
		    get
		    {
			    return GetColumnValue<int?>("PortID");
		    }
            set 
		    {
			    SetColumnValue("PortID", value);
            }
        }
	      
        [XmlAttribute("DestinationPortID")]
        [Bindable(true)]
        public int? DestinationPortID 
	    {
		    get
		    {
			    return GetColumnValue<int?>("DestinationPortID");
		    }
            set 
		    {
			    SetColumnValue("DestinationPortID", value);
            }
        }
	      
        [XmlAttribute("ConsigneeID")]
        [Bindable(true)]
        public int? ConsigneeID 
	    {
		    get
		    {
			    return GetColumnValue<int?>("ConsigneeID");
		    }
            set 
		    {
			    SetColumnValue("ConsigneeID", value);
            }
        }
	      
        [XmlAttribute("HouseBLAdded")]
        [Bindable(true)]
        public bool? HouseBLAdded 
	    {
		    get
		    {
			    return GetColumnValue<bool?>("HouseBLAdded");
		    }
            set 
		    {
			    SetColumnValue("HouseBLAdded", value);
            }
        }
	      
        [XmlAttribute("HouseBLNUmber")]
        [Bindable(true)]
        public string HouseBLNUmber 
	    {
		    get
		    {
			    return GetColumnValue<string>("HouseBLNUmber");
		    }
            set 
		    {
			    SetColumnValue("HouseBLNUmber", value);
            }
        }
	    
	    #endregion
    
	    #region Columns Struct
	    public struct Columns
	    {
		    
		    
            public static string OrderID = @"OrderID";
            
            public static string OrderNumber = @"OrderNumber";
            
            public static string ActualWeight = @"ActualWeight";
            
            public static string ActualVolume = @"ActualVolume";
            
            public static string PortID = @"PortID";
            
            public static string DestinationPortID = @"DestinationPortID";
            
            public static string ConsigneeID = @"ConsigneeID";
            
            public static string HouseBLAdded = @"HouseBLAdded";
            
            public static string HouseBLNUmber = @"HouseBLNUmber";
            
	    }
	    #endregion
	    
	    
	    #region IAbstractRecord Members
        public new CT GetColumnValue<CT>(string columnName) {
            return base.GetColumnValue<CT>(columnName);
        }
        public object GetColumnValue(string columnName) {
            return base.GetColumnValue<object>(columnName);
        }
        #endregion
	    
    }
}
