using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DAL.Logistics{
    /// <summary>
    /// Strongly-typed collection for the ViewUser class.
    /// </summary>
    [Serializable]
    public partial class ViewUserCollection : ReadOnlyList<ViewUser, ViewUserCollection>
    {        
        public ViewUserCollection() {}
    }
    /// <summary>
    /// This is  Read-only wrapper class for the View_Users view.
    /// </summary>
    [Serializable]
    public partial class ViewUser : ReadOnlyRecord<ViewUser>, IReadOnlyRecord
    {
    
	    #region Default Settings
	    protected static void SetSQLProps() 
	    {
		    GetTableSchema();
	    }
	    #endregion
        #region Schema Accessor
	    public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                {
                    SetSQLProps();
                }
                return BaseSchema;
            }
        }
    	
        private static void GetTableSchema() 
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("View_Users", TableType.View, DataService.GetInstance("WWIprov"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns
                
                TableSchema.TableColumn colvarContactName = new TableSchema.TableColumn(schema);
                colvarContactName.ColumnName = "ContactName";
                colvarContactName.DataType = DbType.String;
                colvarContactName.MaxLength = 50;
                colvarContactName.AutoIncrement = false;
                colvarContactName.IsNullable = true;
                colvarContactName.IsPrimaryKey = false;
                colvarContactName.IsForeignKey = false;
                colvarContactName.IsReadOnly = false;
                
                schema.Columns.Add(colvarContactName);
                
                TableSchema.TableColumn colvarCompanyName = new TableSchema.TableColumn(schema);
                colvarCompanyName.ColumnName = "CompanyName";
                colvarCompanyName.DataType = DbType.String;
                colvarCompanyName.MaxLength = 50;
                colvarCompanyName.AutoIncrement = false;
                colvarCompanyName.IsNullable = true;
                colvarCompanyName.IsPrimaryKey = false;
                colvarCompanyName.IsForeignKey = false;
                colvarCompanyName.IsReadOnly = false;
                
                schema.Columns.Add(colvarCompanyName);
                
                TableSchema.TableColumn colvarPermission = new TableSchema.TableColumn(schema);
                colvarPermission.ColumnName = "Permission";
                colvarPermission.DataType = DbType.Int32;
                colvarPermission.MaxLength = 0;
                colvarPermission.AutoIncrement = false;
                colvarPermission.IsNullable = true;
                colvarPermission.IsPrimaryKey = false;
                colvarPermission.IsForeignKey = false;
                colvarPermission.IsReadOnly = false;
                
                schema.Columns.Add(colvarPermission);
                
                TableSchema.TableColumn colvarContactID = new TableSchema.TableColumn(schema);
                colvarContactID.ColumnName = "ContactID";
                colvarContactID.DataType = DbType.Int32;
                colvarContactID.MaxLength = 0;
                colvarContactID.AutoIncrement = false;
                colvarContactID.IsNullable = false;
                colvarContactID.IsPrimaryKey = false;
                colvarContactID.IsForeignKey = false;
                colvarContactID.IsReadOnly = false;
                
                schema.Columns.Add(colvarContactID);
                
                TableSchema.TableColumn colvarEXPR1 = new TableSchema.TableColumn(schema);
                colvarEXPR1.ColumnName = "EXPR1";
                colvarEXPR1.DataType = DbType.Int64;
                colvarEXPR1.MaxLength = 0;
                colvarEXPR1.AutoIncrement = false;
                colvarEXPR1.IsNullable = true;
                colvarEXPR1.IsPrimaryKey = false;
                colvarEXPR1.IsForeignKey = false;
                colvarEXPR1.IsReadOnly = false;
                
                schema.Columns.Add(colvarEXPR1);
                
                
                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["WWIprov"].AddSchema("View_Users",schema);
            }
        }
        #endregion
        
        #region Query Accessor
	    public static Query CreateQuery()
	    {
		    return new Query(Schema);
	    }
	    #endregion
	    
	    #region .ctors
	    public ViewUser()
	    {
            SetSQLProps();
            SetDefaults();
            MarkNew();
        }
        public ViewUser(bool useDatabaseDefaults)
	    {
		    SetSQLProps();
		    if(useDatabaseDefaults)
		    {
				ForceDefaults();
			}
			MarkNew();
	    }
	    
	    public ViewUser(object keyID)
	    {
		    SetSQLProps();
		    LoadByKey(keyID);
	    }
    	 
	    public ViewUser(string columnName, object columnValue)
        {
            SetSQLProps();
            LoadByParam(columnName,columnValue);
        }
        
	    #endregion
	    
	    #region Props
	    
          
        [XmlAttribute("ContactName")]
        [Bindable(true)]
        public string ContactName 
	    {
		    get
		    {
			    return GetColumnValue<string>("ContactName");
		    }
            set 
		    {
			    SetColumnValue("ContactName", value);
            }
        }
	      
        [XmlAttribute("CompanyName")]
        [Bindable(true)]
        public string CompanyName 
	    {
		    get
		    {
			    return GetColumnValue<string>("CompanyName");
		    }
            set 
		    {
			    SetColumnValue("CompanyName", value);
            }
        }
	      
        [XmlAttribute("Permission")]
        [Bindable(true)]
        public int? Permission 
	    {
		    get
		    {
			    return GetColumnValue<int?>("Permission");
		    }
            set 
		    {
			    SetColumnValue("Permission", value);
            }
        }
	      
        [XmlAttribute("ContactID")]
        [Bindable(true)]
        public int ContactID 
	    {
		    get
		    {
			    return GetColumnValue<int>("ContactID");
		    }
            set 
		    {
			    SetColumnValue("ContactID", value);
            }
        }
	      
        [XmlAttribute("EXPR1")]
        [Bindable(true)]
        public long? EXPR1 
	    {
		    get
		    {
			    return GetColumnValue<long?>("EXPR1");
		    }
            set 
		    {
			    SetColumnValue("EXPR1", value);
            }
        }
	    
	    #endregion
    
	    #region Columns Struct
	    public struct Columns
	    {
		    
		    
            public static string ContactName = @"ContactName";
            
            public static string CompanyName = @"CompanyName";
            
            public static string Permission = @"Permission";
            
            public static string ContactID = @"ContactID";
            
            public static string EXPR1 = @"EXPR1";
            
	    }
	    #endregion
	    
	    
	    #region IAbstractRecord Members
        public new CT GetColumnValue<CT>(string columnName) {
            return base.GetColumnValue<CT>(columnName);
        }
        public object GetColumnValue(string columnName) {
            return base.GetColumnValue<object>(columnName);
        }
        #endregion
	    
    }
}
