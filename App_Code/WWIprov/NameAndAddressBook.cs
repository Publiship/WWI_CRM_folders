using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DAL.Logistics
{
	/// <summary>
	/// Strongly-typed collection for the NameAndAddressBook class.
	/// </summary>
    [Serializable]
	public partial class NameAndAddressBookCollection : ActiveList<NameAndAddressBook, NameAndAddressBookCollection>
	{	   
		public NameAndAddressBookCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>NameAndAddressBookCollection</returns>
		public NameAndAddressBookCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                NameAndAddressBook o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the NameAndAddressBook table.
	/// </summary>
	[Serializable]
	public partial class NameAndAddressBook : ActiveRecord<NameAndAddressBook>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public NameAndAddressBook()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public NameAndAddressBook(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public NameAndAddressBook(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public NameAndAddressBook(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("NameAndAddressBook", TableType.Table, DataService.GetInstance("WWIprov"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarCompanyID = new TableSchema.TableColumn(schema);
				colvarCompanyID.ColumnName = "CompanyID";
				colvarCompanyID.DataType = DbType.Int32;
				colvarCompanyID.MaxLength = 0;
				colvarCompanyID.AutoIncrement = true;
				colvarCompanyID.IsNullable = false;
				colvarCompanyID.IsPrimaryKey = true;
				colvarCompanyID.IsForeignKey = false;
				colvarCompanyID.IsReadOnly = false;
				colvarCompanyID.DefaultSetting = @"";
				colvarCompanyID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCompanyID);
				
				TableSchema.TableColumn colvarCompanyName = new TableSchema.TableColumn(schema);
				colvarCompanyName.ColumnName = "CompanyName";
				colvarCompanyName.DataType = DbType.String;
				colvarCompanyName.MaxLength = 50;
				colvarCompanyName.AutoIncrement = false;
				colvarCompanyName.IsNullable = true;
				colvarCompanyName.IsPrimaryKey = false;
				colvarCompanyName.IsForeignKey = false;
				colvarCompanyName.IsReadOnly = false;
				colvarCompanyName.DefaultSetting = @"";
				colvarCompanyName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCompanyName);
				
				TableSchema.TableColumn colvarCustomer = new TableSchema.TableColumn(schema);
				colvarCustomer.ColumnName = "Customer";
				colvarCustomer.DataType = DbType.Boolean;
				colvarCustomer.MaxLength = 0;
				colvarCustomer.AutoIncrement = false;
				colvarCustomer.IsNullable = true;
				colvarCustomer.IsPrimaryKey = false;
				colvarCustomer.IsForeignKey = false;
				colvarCustomer.IsReadOnly = false;
				colvarCustomer.DefaultSetting = @"";
				colvarCustomer.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomer);
				
				TableSchema.TableColumn colvarAddress1 = new TableSchema.TableColumn(schema);
				colvarAddress1.ColumnName = "Address1";
				colvarAddress1.DataType = DbType.String;
				colvarAddress1.MaxLength = 40;
				colvarAddress1.AutoIncrement = false;
				colvarAddress1.IsNullable = true;
				colvarAddress1.IsPrimaryKey = false;
				colvarAddress1.IsForeignKey = false;
				colvarAddress1.IsReadOnly = false;
				colvarAddress1.DefaultSetting = @"";
				colvarAddress1.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAddress1);
				
				TableSchema.TableColumn colvarAddress2 = new TableSchema.TableColumn(schema);
				colvarAddress2.ColumnName = "Address2";
				colvarAddress2.DataType = DbType.String;
				colvarAddress2.MaxLength = 40;
				colvarAddress2.AutoIncrement = false;
				colvarAddress2.IsNullable = true;
				colvarAddress2.IsPrimaryKey = false;
				colvarAddress2.IsForeignKey = false;
				colvarAddress2.IsReadOnly = false;
				colvarAddress2.DefaultSetting = @"";
				colvarAddress2.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAddress2);
				
				TableSchema.TableColumn colvarAddress3 = new TableSchema.TableColumn(schema);
				colvarAddress3.ColumnName = "Address3";
				colvarAddress3.DataType = DbType.String;
				colvarAddress3.MaxLength = 40;
				colvarAddress3.AutoIncrement = false;
				colvarAddress3.IsNullable = true;
				colvarAddress3.IsPrimaryKey = false;
				colvarAddress3.IsForeignKey = false;
				colvarAddress3.IsReadOnly = false;
				colvarAddress3.DefaultSetting = @"";
				colvarAddress3.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAddress3);
				
				TableSchema.TableColumn colvarPostCode = new TableSchema.TableColumn(schema);
				colvarPostCode.ColumnName = "PostCode";
				colvarPostCode.DataType = DbType.String;
				colvarPostCode.MaxLength = 50;
				colvarPostCode.AutoIncrement = false;
				colvarPostCode.IsNullable = true;
				colvarPostCode.IsPrimaryKey = false;
				colvarPostCode.IsForeignKey = false;
				colvarPostCode.IsReadOnly = false;
				colvarPostCode.DefaultSetting = @"";
				colvarPostCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPostCode);
				
				TableSchema.TableColumn colvarCountryID = new TableSchema.TableColumn(schema);
				colvarCountryID.ColumnName = "CountryID";
				colvarCountryID.DataType = DbType.Int32;
				colvarCountryID.MaxLength = 0;
				colvarCountryID.AutoIncrement = false;
				colvarCountryID.IsNullable = true;
				colvarCountryID.IsPrimaryKey = false;
				colvarCountryID.IsForeignKey = false;
				colvarCountryID.IsReadOnly = false;
				colvarCountryID.DefaultSetting = @"";
				colvarCountryID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCountryID);
				
				TableSchema.TableColumn colvarTelNo = new TableSchema.TableColumn(schema);
				colvarTelNo.ColumnName = "TelNo";
				colvarTelNo.DataType = DbType.String;
				colvarTelNo.MaxLength = 20;
				colvarTelNo.AutoIncrement = false;
				colvarTelNo.IsNullable = true;
				colvarTelNo.IsPrimaryKey = false;
				colvarTelNo.IsForeignKey = false;
				colvarTelNo.IsReadOnly = false;
				colvarTelNo.DefaultSetting = @"";
				colvarTelNo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTelNo);
				
				TableSchema.TableColumn colvarFaxNo = new TableSchema.TableColumn(schema);
				colvarFaxNo.ColumnName = "FaxNo";
				colvarFaxNo.DataType = DbType.String;
				colvarFaxNo.MaxLength = 20;
				colvarFaxNo.AutoIncrement = false;
				colvarFaxNo.IsNullable = true;
				colvarFaxNo.IsPrimaryKey = false;
				colvarFaxNo.IsForeignKey = false;
				colvarFaxNo.IsReadOnly = false;
				colvarFaxNo.DefaultSetting = @"";
				colvarFaxNo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFaxNo);
				
				TableSchema.TableColumn colvarMainEmail = new TableSchema.TableColumn(schema);
				colvarMainEmail.ColumnName = "MainEmail";
				colvarMainEmail.DataType = DbType.String;
				colvarMainEmail.MaxLength = 50;
				colvarMainEmail.AutoIncrement = false;
				colvarMainEmail.IsNullable = true;
				colvarMainEmail.IsPrimaryKey = false;
				colvarMainEmail.IsForeignKey = false;
				colvarMainEmail.IsReadOnly = false;
				colvarMainEmail.DefaultSetting = @"";
				colvarMainEmail.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMainEmail);
				
				TableSchema.TableColumn colvarTypeID = new TableSchema.TableColumn(schema);
				colvarTypeID.ColumnName = "TypeID";
				colvarTypeID.DataType = DbType.Int32;
				colvarTypeID.MaxLength = 0;
				colvarTypeID.AutoIncrement = false;
				colvarTypeID.IsNullable = true;
				colvarTypeID.IsPrimaryKey = false;
				colvarTypeID.IsForeignKey = false;
				colvarTypeID.IsReadOnly = false;
				colvarTypeID.DefaultSetting = @"";
				colvarTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTypeID);
				
				TableSchema.TableColumn colvarConsignee = new TableSchema.TableColumn(schema);
				colvarConsignee.ColumnName = "Consignee";
				colvarConsignee.DataType = DbType.Boolean;
				colvarConsignee.MaxLength = 0;
				colvarConsignee.AutoIncrement = false;
				colvarConsignee.IsNullable = true;
				colvarConsignee.IsPrimaryKey = false;
				colvarConsignee.IsForeignKey = false;
				colvarConsignee.IsReadOnly = false;
				colvarConsignee.DefaultSetting = @"";
				colvarConsignee.ForeignKeyTableName = "";
				schema.Columns.Add(colvarConsignee);
				
				TableSchema.TableColumn colvarInsurance = new TableSchema.TableColumn(schema);
				colvarInsurance.ColumnName = "Insurance";
				colvarInsurance.DataType = DbType.Boolean;
				colvarInsurance.MaxLength = 0;
				colvarInsurance.AutoIncrement = false;
				colvarInsurance.IsNullable = true;
				colvarInsurance.IsPrimaryKey = false;
				colvarInsurance.IsForeignKey = false;
				colvarInsurance.IsReadOnly = false;
				colvarInsurance.DefaultSetting = @"";
				colvarInsurance.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInsurance);
				
				TableSchema.TableColumn colvarSalesModule = new TableSchema.TableColumn(schema);
				colvarSalesModule.ColumnName = "SalesModule";
				colvarSalesModule.DataType = DbType.Boolean;
				colvarSalesModule.MaxLength = 0;
				colvarSalesModule.AutoIncrement = false;
				colvarSalesModule.IsNullable = true;
				colvarSalesModule.IsPrimaryKey = false;
				colvarSalesModule.IsForeignKey = false;
				colvarSalesModule.IsReadOnly = false;
				colvarSalesModule.DefaultSetting = @"";
				colvarSalesModule.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSalesModule);
				
				TableSchema.TableColumn colvarExporter = new TableSchema.TableColumn(schema);
				colvarExporter.ColumnName = "Exporter";
				colvarExporter.DataType = DbType.Boolean;
				colvarExporter.MaxLength = 0;
				colvarExporter.AutoIncrement = false;
				colvarExporter.IsNullable = true;
				colvarExporter.IsPrimaryKey = false;
				colvarExporter.IsForeignKey = false;
				colvarExporter.IsReadOnly = false;
				colvarExporter.DefaultSetting = @"";
				colvarExporter.ForeignKeyTableName = "";
				schema.Columns.Add(colvarExporter);
				
				TableSchema.TableColumn colvarVATNumber = new TableSchema.TableColumn(schema);
				colvarVATNumber.ColumnName = "VATNumber";
				colvarVATNumber.DataType = DbType.String;
				colvarVATNumber.MaxLength = 50;
				colvarVATNumber.AutoIncrement = false;
				colvarVATNumber.IsNullable = true;
				colvarVATNumber.IsPrimaryKey = false;
				colvarVATNumber.IsForeignKey = false;
				colvarVATNumber.IsReadOnly = false;
				colvarVATNumber.DefaultSetting = @"";
				colvarVATNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarVATNumber);
				
				TableSchema.TableColumn colvarDefermentNumber = new TableSchema.TableColumn(schema);
				colvarDefermentNumber.ColumnName = "DefermentNumber";
				colvarDefermentNumber.DataType = DbType.String;
				colvarDefermentNumber.MaxLength = 8;
				colvarDefermentNumber.AutoIncrement = false;
				colvarDefermentNumber.IsNullable = true;
				colvarDefermentNumber.IsPrimaryKey = false;
				colvarDefermentNumber.IsForeignKey = false;
				colvarDefermentNumber.IsReadOnly = false;
				colvarDefermentNumber.DefaultSetting = @"";
				colvarDefermentNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDefermentNumber);
				
				TableSchema.TableColumn colvarDateRecordAdded = new TableSchema.TableColumn(schema);
				colvarDateRecordAdded.ColumnName = "DateRecordAdded";
				colvarDateRecordAdded.DataType = DbType.DateTime;
				colvarDateRecordAdded.MaxLength = 0;
				colvarDateRecordAdded.AutoIncrement = false;
				colvarDateRecordAdded.IsNullable = true;
				colvarDateRecordAdded.IsPrimaryKey = false;
				colvarDateRecordAdded.IsForeignKey = false;
				colvarDateRecordAdded.IsReadOnly = false;
				colvarDateRecordAdded.DefaultSetting = @"";
				colvarDateRecordAdded.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDateRecordAdded);
				
				TableSchema.TableColumn colvarRecordAddedBY = new TableSchema.TableColumn(schema);
				colvarRecordAddedBY.ColumnName = "RecordAddedBY";
				colvarRecordAddedBY.DataType = DbType.Int32;
				colvarRecordAddedBY.MaxLength = 0;
				colvarRecordAddedBY.AutoIncrement = false;
				colvarRecordAddedBY.IsNullable = true;
				colvarRecordAddedBY.IsPrimaryKey = false;
				colvarRecordAddedBY.IsForeignKey = false;
				colvarRecordAddedBY.IsReadOnly = false;
				colvarRecordAddedBY.DefaultSetting = @"";
				colvarRecordAddedBY.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRecordAddedBY);
				
				TableSchema.TableColumn colvarSalesBy = new TableSchema.TableColumn(schema);
				colvarSalesBy.ColumnName = "SalesBy";
				colvarSalesBy.DataType = DbType.Int32;
				colvarSalesBy.MaxLength = 0;
				colvarSalesBy.AutoIncrement = false;
				colvarSalesBy.IsNullable = true;
				colvarSalesBy.IsPrimaryKey = false;
				colvarSalesBy.IsForeignKey = false;
				colvarSalesBy.IsReadOnly = false;
				colvarSalesBy.DefaultSetting = @"";
				colvarSalesBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSalesBy);
				
				TableSchema.TableColumn colvarPalletDims = new TableSchema.TableColumn(schema);
				colvarPalletDims.ColumnName = "PalletDims";
				colvarPalletDims.DataType = DbType.String;
				colvarPalletDims.MaxLength = 50;
				colvarPalletDims.AutoIncrement = false;
				colvarPalletDims.IsNullable = true;
				colvarPalletDims.IsPrimaryKey = false;
				colvarPalletDims.IsForeignKey = false;
				colvarPalletDims.IsReadOnly = false;
				colvarPalletDims.DefaultSetting = @"";
				colvarPalletDims.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPalletDims);
				
				TableSchema.TableColumn colvarMaxPalletWeight = new TableSchema.TableColumn(schema);
				colvarMaxPalletWeight.ColumnName = "MaxPalletWeight";
				colvarMaxPalletWeight.DataType = DbType.Int32;
				colvarMaxPalletWeight.MaxLength = 0;
				colvarMaxPalletWeight.AutoIncrement = false;
				colvarMaxPalletWeight.IsNullable = true;
				colvarMaxPalletWeight.IsPrimaryKey = false;
				colvarMaxPalletWeight.IsForeignKey = false;
				colvarMaxPalletWeight.IsReadOnly = false;
				colvarMaxPalletWeight.DefaultSetting = @"";
				colvarMaxPalletWeight.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaxPalletWeight);
				
				TableSchema.TableColumn colvarMaxPalletHeight = new TableSchema.TableColumn(schema);
				colvarMaxPalletHeight.ColumnName = "MaxPalletHeight";
				colvarMaxPalletHeight.DataType = DbType.Int32;
				colvarMaxPalletHeight.MaxLength = 0;
				colvarMaxPalletHeight.AutoIncrement = false;
				colvarMaxPalletHeight.IsNullable = true;
				colvarMaxPalletHeight.IsPrimaryKey = false;
				colvarMaxPalletHeight.IsForeignKey = false;
				colvarMaxPalletHeight.IsReadOnly = false;
				colvarMaxPalletHeight.DefaultSetting = @"";
				colvarMaxPalletHeight.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaxPalletHeight);
				
				TableSchema.TableColumn colvarSpecialDeliveryInstructions = new TableSchema.TableColumn(schema);
				colvarSpecialDeliveryInstructions.ColumnName = "SpecialDeliveryInstructions";
				colvarSpecialDeliveryInstructions.DataType = DbType.String;
				colvarSpecialDeliveryInstructions.MaxLength = 50;
				colvarSpecialDeliveryInstructions.AutoIncrement = false;
				colvarSpecialDeliveryInstructions.IsNullable = true;
				colvarSpecialDeliveryInstructions.IsPrimaryKey = false;
				colvarSpecialDeliveryInstructions.IsForeignKey = false;
				colvarSpecialDeliveryInstructions.IsReadOnly = false;
				colvarSpecialDeliveryInstructions.DefaultSetting = @"";
				colvarSpecialDeliveryInstructions.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSpecialDeliveryInstructions);
				
				TableSchema.TableColumn colvarPricerGroup = new TableSchema.TableColumn(schema);
				colvarPricerGroup.ColumnName = "Pricer_Group";
				colvarPricerGroup.DataType = DbType.Int32;
				colvarPricerGroup.MaxLength = 0;
				colvarPricerGroup.AutoIncrement = false;
				colvarPricerGroup.IsNullable = true;
				colvarPricerGroup.IsPrimaryKey = false;
				colvarPricerGroup.IsForeignKey = false;
				colvarPricerGroup.IsReadOnly = false;
				
						colvarPricerGroup.DefaultSetting = @"((0))";
				colvarPricerGroup.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPricerGroup);
				
				TableSchema.TableColumn colvarTs = new TableSchema.TableColumn(schema);
				colvarTs.ColumnName = "TS";
				colvarTs.DataType = DbType.Binary;
				colvarTs.MaxLength = 0;
				colvarTs.AutoIncrement = false;
				colvarTs.IsNullable = true;
				colvarTs.IsPrimaryKey = false;
				colvarTs.IsForeignKey = false;
				colvarTs.IsReadOnly = true;
				colvarTs.DefaultSetting = @"";
				colvarTs.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTs);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["WWIprov"].AddSchema("NameAndAddressBook",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("CompanyID")]
		[Bindable(true)]
		public int CompanyID 
		{
			get { return GetColumnValue<int>(Columns.CompanyID); }
			set { SetColumnValue(Columns.CompanyID, value); }
		}
		  
		[XmlAttribute("CompanyName")]
		[Bindable(true)]
		public string CompanyName 
		{
			get { return GetColumnValue<string>(Columns.CompanyName); }
			set { SetColumnValue(Columns.CompanyName, value); }
		}
		  
		[XmlAttribute("Customer")]
		[Bindable(true)]
		public bool? Customer 
		{
			get { return GetColumnValue<bool?>(Columns.Customer); }
			set { SetColumnValue(Columns.Customer, value); }
		}
		  
		[XmlAttribute("Address1")]
		[Bindable(true)]
		public string Address1 
		{
			get { return GetColumnValue<string>(Columns.Address1); }
			set { SetColumnValue(Columns.Address1, value); }
		}
		  
		[XmlAttribute("Address2")]
		[Bindable(true)]
		public string Address2 
		{
			get { return GetColumnValue<string>(Columns.Address2); }
			set { SetColumnValue(Columns.Address2, value); }
		}
		  
		[XmlAttribute("Address3")]
		[Bindable(true)]
		public string Address3 
		{
			get { return GetColumnValue<string>(Columns.Address3); }
			set { SetColumnValue(Columns.Address3, value); }
		}
		  
		[XmlAttribute("PostCode")]
		[Bindable(true)]
		public string PostCode 
		{
			get { return GetColumnValue<string>(Columns.PostCode); }
			set { SetColumnValue(Columns.PostCode, value); }
		}
		  
		[XmlAttribute("CountryID")]
		[Bindable(true)]
		public int? CountryID 
		{
			get { return GetColumnValue<int?>(Columns.CountryID); }
			set { SetColumnValue(Columns.CountryID, value); }
		}
		  
		[XmlAttribute("TelNo")]
		[Bindable(true)]
		public string TelNo 
		{
			get { return GetColumnValue<string>(Columns.TelNo); }
			set { SetColumnValue(Columns.TelNo, value); }
		}
		  
		[XmlAttribute("FaxNo")]
		[Bindable(true)]
		public string FaxNo 
		{
			get { return GetColumnValue<string>(Columns.FaxNo); }
			set { SetColumnValue(Columns.FaxNo, value); }
		}
		  
		[XmlAttribute("MainEmail")]
		[Bindable(true)]
		public string MainEmail 
		{
			get { return GetColumnValue<string>(Columns.MainEmail); }
			set { SetColumnValue(Columns.MainEmail, value); }
		}
		  
		[XmlAttribute("TypeID")]
		[Bindable(true)]
		public int? TypeID 
		{
			get { return GetColumnValue<int?>(Columns.TypeID); }
			set { SetColumnValue(Columns.TypeID, value); }
		}
		  
		[XmlAttribute("Consignee")]
		[Bindable(true)]
		public bool? Consignee 
		{
			get { return GetColumnValue<bool?>(Columns.Consignee); }
			set { SetColumnValue(Columns.Consignee, value); }
		}
		  
		[XmlAttribute("Insurance")]
		[Bindable(true)]
		public bool? Insurance 
		{
			get { return GetColumnValue<bool?>(Columns.Insurance); }
			set { SetColumnValue(Columns.Insurance, value); }
		}
		  
		[XmlAttribute("SalesModule")]
		[Bindable(true)]
		public bool? SalesModule 
		{
			get { return GetColumnValue<bool?>(Columns.SalesModule); }
			set { SetColumnValue(Columns.SalesModule, value); }
		}
		  
		[XmlAttribute("Exporter")]
		[Bindable(true)]
		public bool? Exporter 
		{
			get { return GetColumnValue<bool?>(Columns.Exporter); }
			set { SetColumnValue(Columns.Exporter, value); }
		}
		  
		[XmlAttribute("VATNumber")]
		[Bindable(true)]
		public string VATNumber 
		{
			get { return GetColumnValue<string>(Columns.VATNumber); }
			set { SetColumnValue(Columns.VATNumber, value); }
		}
		  
		[XmlAttribute("DefermentNumber")]
		[Bindable(true)]
		public string DefermentNumber 
		{
			get { return GetColumnValue<string>(Columns.DefermentNumber); }
			set { SetColumnValue(Columns.DefermentNumber, value); }
		}
		  
		[XmlAttribute("DateRecordAdded")]
		[Bindable(true)]
		public DateTime? DateRecordAdded 
		{
			get { return GetColumnValue<DateTime?>(Columns.DateRecordAdded); }
			set { SetColumnValue(Columns.DateRecordAdded, value); }
		}
		  
		[XmlAttribute("RecordAddedBY")]
		[Bindable(true)]
		public int? RecordAddedBY 
		{
			get { return GetColumnValue<int?>(Columns.RecordAddedBY); }
			set { SetColumnValue(Columns.RecordAddedBY, value); }
		}
		  
		[XmlAttribute("SalesBy")]
		[Bindable(true)]
		public int? SalesBy 
		{
			get { return GetColumnValue<int?>(Columns.SalesBy); }
			set { SetColumnValue(Columns.SalesBy, value); }
		}
		  
		[XmlAttribute("PalletDims")]
		[Bindable(true)]
		public string PalletDims 
		{
			get { return GetColumnValue<string>(Columns.PalletDims); }
			set { SetColumnValue(Columns.PalletDims, value); }
		}
		  
		[XmlAttribute("MaxPalletWeight")]
		[Bindable(true)]
		public int? MaxPalletWeight 
		{
			get { return GetColumnValue<int?>(Columns.MaxPalletWeight); }
			set { SetColumnValue(Columns.MaxPalletWeight, value); }
		}
		  
		[XmlAttribute("MaxPalletHeight")]
		[Bindable(true)]
		public int? MaxPalletHeight 
		{
			get { return GetColumnValue<int?>(Columns.MaxPalletHeight); }
			set { SetColumnValue(Columns.MaxPalletHeight, value); }
		}
		  
		[XmlAttribute("SpecialDeliveryInstructions")]
		[Bindable(true)]
		public string SpecialDeliveryInstructions 
		{
			get { return GetColumnValue<string>(Columns.SpecialDeliveryInstructions); }
			set { SetColumnValue(Columns.SpecialDeliveryInstructions, value); }
		}
		  
		[XmlAttribute("PricerGroup")]
		[Bindable(true)]
		public int? PricerGroup 
		{
			get { return GetColumnValue<int?>(Columns.PricerGroup); }
			set { SetColumnValue(Columns.PricerGroup, value); }
		}
		  
		[XmlAttribute("Ts")]
		[Bindable(true)]
		public byte[] Ts 
		{
			get { return GetColumnValue<byte[]>(Columns.Ts); }
			set { SetColumnValue(Columns.Ts, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varCompanyName,bool? varCustomer,string varAddress1,string varAddress2,string varAddress3,string varPostCode,int? varCountryID,string varTelNo,string varFaxNo,string varMainEmail,int? varTypeID,bool? varConsignee,bool? varInsurance,bool? varSalesModule,bool? varExporter,string varVATNumber,string varDefermentNumber,DateTime? varDateRecordAdded,int? varRecordAddedBY,int? varSalesBy,string varPalletDims,int? varMaxPalletWeight,int? varMaxPalletHeight,string varSpecialDeliveryInstructions,int? varPricerGroup,byte[] varTs)
		{
			NameAndAddressBook item = new NameAndAddressBook();
			
			item.CompanyName = varCompanyName;
			
			item.Customer = varCustomer;
			
			item.Address1 = varAddress1;
			
			item.Address2 = varAddress2;
			
			item.Address3 = varAddress3;
			
			item.PostCode = varPostCode;
			
			item.CountryID = varCountryID;
			
			item.TelNo = varTelNo;
			
			item.FaxNo = varFaxNo;
			
			item.MainEmail = varMainEmail;
			
			item.TypeID = varTypeID;
			
			item.Consignee = varConsignee;
			
			item.Insurance = varInsurance;
			
			item.SalesModule = varSalesModule;
			
			item.Exporter = varExporter;
			
			item.VATNumber = varVATNumber;
			
			item.DefermentNumber = varDefermentNumber;
			
			item.DateRecordAdded = varDateRecordAdded;
			
			item.RecordAddedBY = varRecordAddedBY;
			
			item.SalesBy = varSalesBy;
			
			item.PalletDims = varPalletDims;
			
			item.MaxPalletWeight = varMaxPalletWeight;
			
			item.MaxPalletHeight = varMaxPalletHeight;
			
			item.SpecialDeliveryInstructions = varSpecialDeliveryInstructions;
			
			item.PricerGroup = varPricerGroup;
			
			item.Ts = varTs;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varCompanyID,string varCompanyName,bool? varCustomer,string varAddress1,string varAddress2,string varAddress3,string varPostCode,int? varCountryID,string varTelNo,string varFaxNo,string varMainEmail,int? varTypeID,bool? varConsignee,bool? varInsurance,bool? varSalesModule,bool? varExporter,string varVATNumber,string varDefermentNumber,DateTime? varDateRecordAdded,int? varRecordAddedBY,int? varSalesBy,string varPalletDims,int? varMaxPalletWeight,int? varMaxPalletHeight,string varSpecialDeliveryInstructions,int? varPricerGroup,byte[] varTs)
		{
			NameAndAddressBook item = new NameAndAddressBook();
			
				item.CompanyID = varCompanyID;
			
				item.CompanyName = varCompanyName;
			
				item.Customer = varCustomer;
			
				item.Address1 = varAddress1;
			
				item.Address2 = varAddress2;
			
				item.Address3 = varAddress3;
			
				item.PostCode = varPostCode;
			
				item.CountryID = varCountryID;
			
				item.TelNo = varTelNo;
			
				item.FaxNo = varFaxNo;
			
				item.MainEmail = varMainEmail;
			
				item.TypeID = varTypeID;
			
				item.Consignee = varConsignee;
			
				item.Insurance = varInsurance;
			
				item.SalesModule = varSalesModule;
			
				item.Exporter = varExporter;
			
				item.VATNumber = varVATNumber;
			
				item.DefermentNumber = varDefermentNumber;
			
				item.DateRecordAdded = varDateRecordAdded;
			
				item.RecordAddedBY = varRecordAddedBY;
			
				item.SalesBy = varSalesBy;
			
				item.PalletDims = varPalletDims;
			
				item.MaxPalletWeight = varMaxPalletWeight;
			
				item.MaxPalletHeight = varMaxPalletHeight;
			
				item.SpecialDeliveryInstructions = varSpecialDeliveryInstructions;
			
				item.PricerGroup = varPricerGroup;
			
				item.Ts = varTs;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn CompanyIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn CompanyNameColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn CustomerColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn Address1Column
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn Address2Column
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn Address3Column
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn PostCodeColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn CountryIDColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn TelNoColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn FaxNoColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn MainEmailColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn TypeIDColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn ConsigneeColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn InsuranceColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn SalesModuleColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn ExporterColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        public static TableSchema.TableColumn VATNumberColumn
        {
            get { return Schema.Columns[16]; }
        }
        
        
        
        public static TableSchema.TableColumn DefermentNumberColumn
        {
            get { return Schema.Columns[17]; }
        }
        
        
        
        public static TableSchema.TableColumn DateRecordAddedColumn
        {
            get { return Schema.Columns[18]; }
        }
        
        
        
        public static TableSchema.TableColumn RecordAddedBYColumn
        {
            get { return Schema.Columns[19]; }
        }
        
        
        
        public static TableSchema.TableColumn SalesByColumn
        {
            get { return Schema.Columns[20]; }
        }
        
        
        
        public static TableSchema.TableColumn PalletDimsColumn
        {
            get { return Schema.Columns[21]; }
        }
        
        
        
        public static TableSchema.TableColumn MaxPalletWeightColumn
        {
            get { return Schema.Columns[22]; }
        }
        
        
        
        public static TableSchema.TableColumn MaxPalletHeightColumn
        {
            get { return Schema.Columns[23]; }
        }
        
        
        
        public static TableSchema.TableColumn SpecialDeliveryInstructionsColumn
        {
            get { return Schema.Columns[24]; }
        }
        
        
        
        public static TableSchema.TableColumn PricerGroupColumn
        {
            get { return Schema.Columns[25]; }
        }
        
        
        
        public static TableSchema.TableColumn TsColumn
        {
            get { return Schema.Columns[26]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string CompanyID = @"CompanyID";
			 public static string CompanyName = @"CompanyName";
			 public static string Customer = @"Customer";
			 public static string Address1 = @"Address1";
			 public static string Address2 = @"Address2";
			 public static string Address3 = @"Address3";
			 public static string PostCode = @"PostCode";
			 public static string CountryID = @"CountryID";
			 public static string TelNo = @"TelNo";
			 public static string FaxNo = @"FaxNo";
			 public static string MainEmail = @"MainEmail";
			 public static string TypeID = @"TypeID";
			 public static string Consignee = @"Consignee";
			 public static string Insurance = @"Insurance";
			 public static string SalesModule = @"SalesModule";
			 public static string Exporter = @"Exporter";
			 public static string VATNumber = @"VATNumber";
			 public static string DefermentNumber = @"DefermentNumber";
			 public static string DateRecordAdded = @"DateRecordAdded";
			 public static string RecordAddedBY = @"RecordAddedBY";
			 public static string SalesBy = @"SalesBy";
			 public static string PalletDims = @"PalletDims";
			 public static string MaxPalletWeight = @"MaxPalletWeight";
			 public static string MaxPalletHeight = @"MaxPalletHeight";
			 public static string SpecialDeliveryInstructions = @"SpecialDeliveryInstructions";
			 public static string PricerGroup = @"Pricer_Group";
			 public static string Ts = @"TS";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
