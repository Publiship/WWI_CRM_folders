using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DAL.Logistics
{
	/// <summary>
	/// Strongly-typed collection for the CloneOrderTable class.
	/// </summary>
    [Serializable]
	public partial class CloneOrderTableCollection : ActiveList<CloneOrderTable, CloneOrderTableCollection>
	{	   
		public CloneOrderTableCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>CloneOrderTableCollection</returns>
		public CloneOrderTableCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                CloneOrderTable o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the CloneOrderTable table.
	/// </summary>
	[Serializable]
	public partial class CloneOrderTable : ActiveRecord<CloneOrderTable>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public CloneOrderTable()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public CloneOrderTable(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public CloneOrderTable(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public CloneOrderTable(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("CloneOrderTable", TableType.Table, DataService.GetInstance("WWIprov"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarOrderNumber = new TableSchema.TableColumn(schema);
				colvarOrderNumber.ColumnName = "OrderNumber";
				colvarOrderNumber.DataType = DbType.Int32;
				colvarOrderNumber.MaxLength = 0;
				colvarOrderNumber.AutoIncrement = false;
				colvarOrderNumber.IsNullable = false;
				colvarOrderNumber.IsPrimaryKey = true;
				colvarOrderNumber.IsForeignKey = false;
				colvarOrderNumber.IsReadOnly = false;
				colvarOrderNumber.DefaultSetting = @"";
				colvarOrderNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOrderNumber);
				
				TableSchema.TableColumn colvarOfficeIndicator = new TableSchema.TableColumn(schema);
				colvarOfficeIndicator.ColumnName = "OfficeIndicator";
				colvarOfficeIndicator.DataType = DbType.String;
				colvarOfficeIndicator.MaxLength = 50;
				colvarOfficeIndicator.AutoIncrement = false;
				colvarOfficeIndicator.IsNullable = true;
				colvarOfficeIndicator.IsPrimaryKey = false;
				colvarOfficeIndicator.IsForeignKey = false;
				colvarOfficeIndicator.IsReadOnly = false;
				colvarOfficeIndicator.DefaultSetting = @"";
				colvarOfficeIndicator.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOfficeIndicator);
				
				TableSchema.TableColumn colvarDateOrderCreated = new TableSchema.TableColumn(schema);
				colvarDateOrderCreated.ColumnName = "DateOrderCreated";
				colvarDateOrderCreated.DataType = DbType.DateTime;
				colvarDateOrderCreated.MaxLength = 0;
				colvarDateOrderCreated.AutoIncrement = false;
				colvarDateOrderCreated.IsNullable = true;
				colvarDateOrderCreated.IsPrimaryKey = false;
				colvarDateOrderCreated.IsForeignKey = false;
				colvarDateOrderCreated.IsReadOnly = false;
				colvarDateOrderCreated.DefaultSetting = @"";
				colvarDateOrderCreated.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDateOrderCreated);
				
				TableSchema.TableColumn colvarPublishipOrder = new TableSchema.TableColumn(schema);
				colvarPublishipOrder.ColumnName = "PublishipOrder";
				colvarPublishipOrder.DataType = DbType.Boolean;
				colvarPublishipOrder.MaxLength = 0;
				colvarPublishipOrder.AutoIncrement = false;
				colvarPublishipOrder.IsNullable = true;
				colvarPublishipOrder.IsPrimaryKey = false;
				colvarPublishipOrder.IsForeignKey = false;
				colvarPublishipOrder.IsReadOnly = false;
				
						colvarPublishipOrder.DefaultSetting = @"(1)";
				colvarPublishipOrder.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPublishipOrder);
				
				TableSchema.TableColumn colvarCompanyID = new TableSchema.TableColumn(schema);
				colvarCompanyID.ColumnName = "CompanyID";
				colvarCompanyID.DataType = DbType.Int32;
				colvarCompanyID.MaxLength = 0;
				colvarCompanyID.AutoIncrement = false;
				colvarCompanyID.IsNullable = true;
				colvarCompanyID.IsPrimaryKey = false;
				colvarCompanyID.IsForeignKey = false;
				colvarCompanyID.IsReadOnly = false;
				colvarCompanyID.DefaultSetting = @"";
				colvarCompanyID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCompanyID);
				
				TableSchema.TableColumn colvarConsigneeID = new TableSchema.TableColumn(schema);
				colvarConsigneeID.ColumnName = "ConsigneeID";
				colvarConsigneeID.DataType = DbType.Int32;
				colvarConsigneeID.MaxLength = 0;
				colvarConsigneeID.AutoIncrement = false;
				colvarConsigneeID.IsNullable = true;
				colvarConsigneeID.IsPrimaryKey = false;
				colvarConsigneeID.IsForeignKey = false;
				colvarConsigneeID.IsReadOnly = false;
				colvarConsigneeID.DefaultSetting = @"";
				colvarConsigneeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarConsigneeID);
				
				TableSchema.TableColumn colvarNotifyPartyID = new TableSchema.TableColumn(schema);
				colvarNotifyPartyID.ColumnName = "NotifyPartyID";
				colvarNotifyPartyID.DataType = DbType.Int32;
				colvarNotifyPartyID.MaxLength = 0;
				colvarNotifyPartyID.AutoIncrement = false;
				colvarNotifyPartyID.IsNullable = true;
				colvarNotifyPartyID.IsPrimaryKey = false;
				colvarNotifyPartyID.IsForeignKey = false;
				colvarNotifyPartyID.IsReadOnly = false;
				colvarNotifyPartyID.DefaultSetting = @"";
				colvarNotifyPartyID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNotifyPartyID);
				
				TableSchema.TableColumn colvarAgentAtOriginID = new TableSchema.TableColumn(schema);
				colvarAgentAtOriginID.ColumnName = "AgentAtOriginID";
				colvarAgentAtOriginID.DataType = DbType.Int32;
				colvarAgentAtOriginID.MaxLength = 0;
				colvarAgentAtOriginID.AutoIncrement = false;
				colvarAgentAtOriginID.IsNullable = true;
				colvarAgentAtOriginID.IsPrimaryKey = false;
				colvarAgentAtOriginID.IsForeignKey = false;
				colvarAgentAtOriginID.IsReadOnly = false;
				colvarAgentAtOriginID.DefaultSetting = @"";
				colvarAgentAtOriginID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAgentAtOriginID);
				
				TableSchema.TableColumn colvarAgentAtDestinationID = new TableSchema.TableColumn(schema);
				colvarAgentAtDestinationID.ColumnName = "AgentAtDestinationID";
				colvarAgentAtDestinationID.DataType = DbType.Int32;
				colvarAgentAtDestinationID.MaxLength = 0;
				colvarAgentAtDestinationID.AutoIncrement = false;
				colvarAgentAtDestinationID.IsNullable = true;
				colvarAgentAtDestinationID.IsPrimaryKey = false;
				colvarAgentAtDestinationID.IsForeignKey = false;
				colvarAgentAtDestinationID.IsReadOnly = false;
				colvarAgentAtDestinationID.DefaultSetting = @"";
				colvarAgentAtDestinationID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAgentAtDestinationID);
				
				TableSchema.TableColumn colvarPrinterID = new TableSchema.TableColumn(schema);
				colvarPrinterID.ColumnName = "PrinterID";
				colvarPrinterID.DataType = DbType.Int32;
				colvarPrinterID.MaxLength = 0;
				colvarPrinterID.AutoIncrement = false;
				colvarPrinterID.IsNullable = true;
				colvarPrinterID.IsPrimaryKey = false;
				colvarPrinterID.IsForeignKey = false;
				colvarPrinterID.IsReadOnly = false;
				colvarPrinterID.DefaultSetting = @"";
				colvarPrinterID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPrinterID);
				
				TableSchema.TableColumn colvarClearingAgentID = new TableSchema.TableColumn(schema);
				colvarClearingAgentID.ColumnName = "ClearingAgentID";
				colvarClearingAgentID.DataType = DbType.Int32;
				colvarClearingAgentID.MaxLength = 0;
				colvarClearingAgentID.AutoIncrement = false;
				colvarClearingAgentID.IsNullable = true;
				colvarClearingAgentID.IsPrimaryKey = false;
				colvarClearingAgentID.IsForeignKey = false;
				colvarClearingAgentID.IsReadOnly = false;
				colvarClearingAgentID.DefaultSetting = @"";
				colvarClearingAgentID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarClearingAgentID);
				
				TableSchema.TableColumn colvarOnCarriageID = new TableSchema.TableColumn(schema);
				colvarOnCarriageID.ColumnName = "OnCarriageID";
				colvarOnCarriageID.DataType = DbType.Int32;
				colvarOnCarriageID.MaxLength = 0;
				colvarOnCarriageID.AutoIncrement = false;
				colvarOnCarriageID.IsNullable = true;
				colvarOnCarriageID.IsPrimaryKey = false;
				colvarOnCarriageID.IsForeignKey = false;
				colvarOnCarriageID.IsReadOnly = false;
				colvarOnCarriageID.DefaultSetting = @"";
				colvarOnCarriageID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOnCarriageID);
				
				TableSchema.TableColumn colvarOrderControllerID = new TableSchema.TableColumn(schema);
				colvarOrderControllerID.ColumnName = "OrderControllerID";
				colvarOrderControllerID.DataType = DbType.Int32;
				colvarOrderControllerID.MaxLength = 0;
				colvarOrderControllerID.AutoIncrement = false;
				colvarOrderControllerID.IsNullable = true;
				colvarOrderControllerID.IsPrimaryKey = false;
				colvarOrderControllerID.IsForeignKey = false;
				colvarOrderControllerID.IsReadOnly = false;
				colvarOrderControllerID.DefaultSetting = @"";
				colvarOrderControllerID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOrderControllerID);
				
				TableSchema.TableColumn colvarOperationsControllerID = new TableSchema.TableColumn(schema);
				colvarOperationsControllerID.ColumnName = "OperationsControllerID";
				colvarOperationsControllerID.DataType = DbType.Int32;
				colvarOperationsControllerID.MaxLength = 0;
				colvarOperationsControllerID.AutoIncrement = false;
				colvarOperationsControllerID.IsNullable = true;
				colvarOperationsControllerID.IsPrimaryKey = false;
				colvarOperationsControllerID.IsForeignKey = false;
				colvarOperationsControllerID.IsReadOnly = false;
				colvarOperationsControllerID.DefaultSetting = @"";
				colvarOperationsControllerID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOperationsControllerID);
				
				TableSchema.TableColumn colvarOriginPortControllerID = new TableSchema.TableColumn(schema);
				colvarOriginPortControllerID.ColumnName = "OriginPortControllerID";
				colvarOriginPortControllerID.DataType = DbType.Int32;
				colvarOriginPortControllerID.MaxLength = 0;
				colvarOriginPortControllerID.AutoIncrement = false;
				colvarOriginPortControllerID.IsNullable = true;
				colvarOriginPortControllerID.IsPrimaryKey = false;
				colvarOriginPortControllerID.IsForeignKey = false;
				colvarOriginPortControllerID.IsReadOnly = false;
				colvarOriginPortControllerID.DefaultSetting = @"";
				colvarOriginPortControllerID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOriginPortControllerID);
				
				TableSchema.TableColumn colvarDestinationPortControllerID = new TableSchema.TableColumn(schema);
				colvarDestinationPortControllerID.ColumnName = "DestinationPortControllerID";
				colvarDestinationPortControllerID.DataType = DbType.Int32;
				colvarDestinationPortControllerID.MaxLength = 0;
				colvarDestinationPortControllerID.AutoIncrement = false;
				colvarDestinationPortControllerID.IsNullable = true;
				colvarDestinationPortControllerID.IsPrimaryKey = false;
				colvarDestinationPortControllerID.IsForeignKey = false;
				colvarDestinationPortControllerID.IsReadOnly = false;
				colvarDestinationPortControllerID.DefaultSetting = @"";
				colvarDestinationPortControllerID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDestinationPortControllerID);
				
				TableSchema.TableColumn colvarCustomersRef = new TableSchema.TableColumn(schema);
				colvarCustomersRef.ColumnName = "CustomersRef";
				colvarCustomersRef.DataType = DbType.String;
				colvarCustomersRef.MaxLength = 20;
				colvarCustomersRef.AutoIncrement = false;
				colvarCustomersRef.IsNullable = true;
				colvarCustomersRef.IsPrimaryKey = false;
				colvarCustomersRef.IsForeignKey = false;
				colvarCustomersRef.IsReadOnly = false;
				colvarCustomersRef.DefaultSetting = @"";
				colvarCustomersRef.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomersRef);
				
				TableSchema.TableColumn colvarContactID = new TableSchema.TableColumn(schema);
				colvarContactID.ColumnName = "ContactID";
				colvarContactID.DataType = DbType.Int32;
				colvarContactID.MaxLength = 0;
				colvarContactID.AutoIncrement = false;
				colvarContactID.IsNullable = true;
				colvarContactID.IsPrimaryKey = false;
				colvarContactID.IsForeignKey = false;
				colvarContactID.IsReadOnly = false;
				colvarContactID.DefaultSetting = @"";
				colvarContactID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarContactID);
				
				TableSchema.TableColumn colvarOriginPointID = new TableSchema.TableColumn(schema);
				colvarOriginPointID.ColumnName = "OriginPointID";
				colvarOriginPointID.DataType = DbType.Int32;
				colvarOriginPointID.MaxLength = 0;
				colvarOriginPointID.AutoIncrement = false;
				colvarOriginPointID.IsNullable = true;
				colvarOriginPointID.IsPrimaryKey = false;
				colvarOriginPointID.IsForeignKey = false;
				colvarOriginPointID.IsReadOnly = false;
				colvarOriginPointID.DefaultSetting = @"";
				colvarOriginPointID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOriginPointID);
				
				TableSchema.TableColumn colvarPortID = new TableSchema.TableColumn(schema);
				colvarPortID.ColumnName = "PortID";
				colvarPortID.DataType = DbType.Int32;
				colvarPortID.MaxLength = 0;
				colvarPortID.AutoIncrement = false;
				colvarPortID.IsNullable = true;
				colvarPortID.IsPrimaryKey = false;
				colvarPortID.IsForeignKey = false;
				colvarPortID.IsReadOnly = false;
				colvarPortID.DefaultSetting = @"";
				colvarPortID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPortID);
				
				TableSchema.TableColumn colvarDestinationPortID = new TableSchema.TableColumn(schema);
				colvarDestinationPortID.ColumnName = "DestinationPortID";
				colvarDestinationPortID.DataType = DbType.Int32;
				colvarDestinationPortID.MaxLength = 0;
				colvarDestinationPortID.AutoIncrement = false;
				colvarDestinationPortID.IsNullable = true;
				colvarDestinationPortID.IsPrimaryKey = false;
				colvarDestinationPortID.IsForeignKey = false;
				colvarDestinationPortID.IsReadOnly = false;
				colvarDestinationPortID.DefaultSetting = @"";
				colvarDestinationPortID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDestinationPortID);
				
				TableSchema.TableColumn colvarFinalDestinationID = new TableSchema.TableColumn(schema);
				colvarFinalDestinationID.ColumnName = "FinalDestinationID";
				colvarFinalDestinationID.DataType = DbType.Int32;
				colvarFinalDestinationID.MaxLength = 0;
				colvarFinalDestinationID.AutoIncrement = false;
				colvarFinalDestinationID.IsNullable = true;
				colvarFinalDestinationID.IsPrimaryKey = false;
				colvarFinalDestinationID.IsForeignKey = false;
				colvarFinalDestinationID.IsReadOnly = false;
				colvarFinalDestinationID.DefaultSetting = @"";
				colvarFinalDestinationID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFinalDestinationID);
				
				TableSchema.TableColumn colvarCountryID = new TableSchema.TableColumn(schema);
				colvarCountryID.ColumnName = "CountryID";
				colvarCountryID.DataType = DbType.Int32;
				colvarCountryID.MaxLength = 0;
				colvarCountryID.AutoIncrement = false;
				colvarCountryID.IsNullable = true;
				colvarCountryID.IsPrimaryKey = false;
				colvarCountryID.IsForeignKey = false;
				colvarCountryID.IsReadOnly = false;
				colvarCountryID.DefaultSetting = @"";
				colvarCountryID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCountryID);
				
				TableSchema.TableColumn colvarDestinationCountryID = new TableSchema.TableColumn(schema);
				colvarDestinationCountryID.ColumnName = "DestinationCountryID";
				colvarDestinationCountryID.DataType = DbType.Int32;
				colvarDestinationCountryID.MaxLength = 0;
				colvarDestinationCountryID.AutoIncrement = false;
				colvarDestinationCountryID.IsNullable = true;
				colvarDestinationCountryID.IsPrimaryKey = false;
				colvarDestinationCountryID.IsForeignKey = false;
				colvarDestinationCountryID.IsReadOnly = false;
				colvarDestinationCountryID.DefaultSetting = @"";
				colvarDestinationCountryID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDestinationCountryID);
				
				TableSchema.TableColumn colvarTs = new TableSchema.TableColumn(schema);
				colvarTs.ColumnName = "TS";
				colvarTs.DataType = DbType.Binary;
				colvarTs.MaxLength = 0;
				colvarTs.AutoIncrement = false;
				colvarTs.IsNullable = true;
				colvarTs.IsPrimaryKey = false;
				colvarTs.IsForeignKey = false;
				colvarTs.IsReadOnly = true;
				colvarTs.DefaultSetting = @"";
				colvarTs.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTs);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["WWIprov"].AddSchema("CloneOrderTable",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("OrderNumber")]
		[Bindable(true)]
		public int OrderNumber 
		{
			get { return GetColumnValue<int>(Columns.OrderNumber); }
			set { SetColumnValue(Columns.OrderNumber, value); }
		}
		  
		[XmlAttribute("OfficeIndicator")]
		[Bindable(true)]
		public string OfficeIndicator 
		{
			get { return GetColumnValue<string>(Columns.OfficeIndicator); }
			set { SetColumnValue(Columns.OfficeIndicator, value); }
		}
		  
		[XmlAttribute("DateOrderCreated")]
		[Bindable(true)]
		public DateTime? DateOrderCreated 
		{
			get { return GetColumnValue<DateTime?>(Columns.DateOrderCreated); }
			set { SetColumnValue(Columns.DateOrderCreated, value); }
		}
		  
		[XmlAttribute("PublishipOrder")]
		[Bindable(true)]
		public bool? PublishipOrder 
		{
			get { return GetColumnValue<bool?>(Columns.PublishipOrder); }
			set { SetColumnValue(Columns.PublishipOrder, value); }
		}
		  
		[XmlAttribute("CompanyID")]
		[Bindable(true)]
		public int? CompanyID 
		{
			get { return GetColumnValue<int?>(Columns.CompanyID); }
			set { SetColumnValue(Columns.CompanyID, value); }
		}
		  
		[XmlAttribute("ConsigneeID")]
		[Bindable(true)]
		public int? ConsigneeID 
		{
			get { return GetColumnValue<int?>(Columns.ConsigneeID); }
			set { SetColumnValue(Columns.ConsigneeID, value); }
		}
		  
		[XmlAttribute("NotifyPartyID")]
		[Bindable(true)]
		public int? NotifyPartyID 
		{
			get { return GetColumnValue<int?>(Columns.NotifyPartyID); }
			set { SetColumnValue(Columns.NotifyPartyID, value); }
		}
		  
		[XmlAttribute("AgentAtOriginID")]
		[Bindable(true)]
		public int? AgentAtOriginID 
		{
			get { return GetColumnValue<int?>(Columns.AgentAtOriginID); }
			set { SetColumnValue(Columns.AgentAtOriginID, value); }
		}
		  
		[XmlAttribute("AgentAtDestinationID")]
		[Bindable(true)]
		public int? AgentAtDestinationID 
		{
			get { return GetColumnValue<int?>(Columns.AgentAtDestinationID); }
			set { SetColumnValue(Columns.AgentAtDestinationID, value); }
		}
		  
		[XmlAttribute("PrinterID")]
		[Bindable(true)]
		public int? PrinterID 
		{
			get { return GetColumnValue<int?>(Columns.PrinterID); }
			set { SetColumnValue(Columns.PrinterID, value); }
		}
		  
		[XmlAttribute("ClearingAgentID")]
		[Bindable(true)]
		public int? ClearingAgentID 
		{
			get { return GetColumnValue<int?>(Columns.ClearingAgentID); }
			set { SetColumnValue(Columns.ClearingAgentID, value); }
		}
		  
		[XmlAttribute("OnCarriageID")]
		[Bindable(true)]
		public int? OnCarriageID 
		{
			get { return GetColumnValue<int?>(Columns.OnCarriageID); }
			set { SetColumnValue(Columns.OnCarriageID, value); }
		}
		  
		[XmlAttribute("OrderControllerID")]
		[Bindable(true)]
		public int? OrderControllerID 
		{
			get { return GetColumnValue<int?>(Columns.OrderControllerID); }
			set { SetColumnValue(Columns.OrderControllerID, value); }
		}
		  
		[XmlAttribute("OperationsControllerID")]
		[Bindable(true)]
		public int? OperationsControllerID 
		{
			get { return GetColumnValue<int?>(Columns.OperationsControllerID); }
			set { SetColumnValue(Columns.OperationsControllerID, value); }
		}
		  
		[XmlAttribute("OriginPortControllerID")]
		[Bindable(true)]
		public int? OriginPortControllerID 
		{
			get { return GetColumnValue<int?>(Columns.OriginPortControllerID); }
			set { SetColumnValue(Columns.OriginPortControllerID, value); }
		}
		  
		[XmlAttribute("DestinationPortControllerID")]
		[Bindable(true)]
		public int? DestinationPortControllerID 
		{
			get { return GetColumnValue<int?>(Columns.DestinationPortControllerID); }
			set { SetColumnValue(Columns.DestinationPortControllerID, value); }
		}
		  
		[XmlAttribute("CustomersRef")]
		[Bindable(true)]
		public string CustomersRef 
		{
			get { return GetColumnValue<string>(Columns.CustomersRef); }
			set { SetColumnValue(Columns.CustomersRef, value); }
		}
		  
		[XmlAttribute("ContactID")]
		[Bindable(true)]
		public int? ContactID 
		{
			get { return GetColumnValue<int?>(Columns.ContactID); }
			set { SetColumnValue(Columns.ContactID, value); }
		}
		  
		[XmlAttribute("OriginPointID")]
		[Bindable(true)]
		public int? OriginPointID 
		{
			get { return GetColumnValue<int?>(Columns.OriginPointID); }
			set { SetColumnValue(Columns.OriginPointID, value); }
		}
		  
		[XmlAttribute("PortID")]
		[Bindable(true)]
		public int? PortID 
		{
			get { return GetColumnValue<int?>(Columns.PortID); }
			set { SetColumnValue(Columns.PortID, value); }
		}
		  
		[XmlAttribute("DestinationPortID")]
		[Bindable(true)]
		public int? DestinationPortID 
		{
			get { return GetColumnValue<int?>(Columns.DestinationPortID); }
			set { SetColumnValue(Columns.DestinationPortID, value); }
		}
		  
		[XmlAttribute("FinalDestinationID")]
		[Bindable(true)]
		public int? FinalDestinationID 
		{
			get { return GetColumnValue<int?>(Columns.FinalDestinationID); }
			set { SetColumnValue(Columns.FinalDestinationID, value); }
		}
		  
		[XmlAttribute("CountryID")]
		[Bindable(true)]
		public int? CountryID 
		{
			get { return GetColumnValue<int?>(Columns.CountryID); }
			set { SetColumnValue(Columns.CountryID, value); }
		}
		  
		[XmlAttribute("DestinationCountryID")]
		[Bindable(true)]
		public int? DestinationCountryID 
		{
			get { return GetColumnValue<int?>(Columns.DestinationCountryID); }
			set { SetColumnValue(Columns.DestinationCountryID, value); }
		}
		  
		[XmlAttribute("Ts")]
		[Bindable(true)]
		public byte[] Ts 
		{
			get { return GetColumnValue<byte[]>(Columns.Ts); }
			set { SetColumnValue(Columns.Ts, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int varOrderNumber,string varOfficeIndicator,DateTime? varDateOrderCreated,bool? varPublishipOrder,int? varCompanyID,int? varConsigneeID,int? varNotifyPartyID,int? varAgentAtOriginID,int? varAgentAtDestinationID,int? varPrinterID,int? varClearingAgentID,int? varOnCarriageID,int? varOrderControllerID,int? varOperationsControllerID,int? varOriginPortControllerID,int? varDestinationPortControllerID,string varCustomersRef,int? varContactID,int? varOriginPointID,int? varPortID,int? varDestinationPortID,int? varFinalDestinationID,int? varCountryID,int? varDestinationCountryID,byte[] varTs)
		{
			CloneOrderTable item = new CloneOrderTable();
			
			item.OrderNumber = varOrderNumber;
			
			item.OfficeIndicator = varOfficeIndicator;
			
			item.DateOrderCreated = varDateOrderCreated;
			
			item.PublishipOrder = varPublishipOrder;
			
			item.CompanyID = varCompanyID;
			
			item.ConsigneeID = varConsigneeID;
			
			item.NotifyPartyID = varNotifyPartyID;
			
			item.AgentAtOriginID = varAgentAtOriginID;
			
			item.AgentAtDestinationID = varAgentAtDestinationID;
			
			item.PrinterID = varPrinterID;
			
			item.ClearingAgentID = varClearingAgentID;
			
			item.OnCarriageID = varOnCarriageID;
			
			item.OrderControllerID = varOrderControllerID;
			
			item.OperationsControllerID = varOperationsControllerID;
			
			item.OriginPortControllerID = varOriginPortControllerID;
			
			item.DestinationPortControllerID = varDestinationPortControllerID;
			
			item.CustomersRef = varCustomersRef;
			
			item.ContactID = varContactID;
			
			item.OriginPointID = varOriginPointID;
			
			item.PortID = varPortID;
			
			item.DestinationPortID = varDestinationPortID;
			
			item.FinalDestinationID = varFinalDestinationID;
			
			item.CountryID = varCountryID;
			
			item.DestinationCountryID = varDestinationCountryID;
			
			item.Ts = varTs;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varOrderNumber,string varOfficeIndicator,DateTime? varDateOrderCreated,bool? varPublishipOrder,int? varCompanyID,int? varConsigneeID,int? varNotifyPartyID,int? varAgentAtOriginID,int? varAgentAtDestinationID,int? varPrinterID,int? varClearingAgentID,int? varOnCarriageID,int? varOrderControllerID,int? varOperationsControllerID,int? varOriginPortControllerID,int? varDestinationPortControllerID,string varCustomersRef,int? varContactID,int? varOriginPointID,int? varPortID,int? varDestinationPortID,int? varFinalDestinationID,int? varCountryID,int? varDestinationCountryID,byte[] varTs)
		{
			CloneOrderTable item = new CloneOrderTable();
			
				item.OrderNumber = varOrderNumber;
			
				item.OfficeIndicator = varOfficeIndicator;
			
				item.DateOrderCreated = varDateOrderCreated;
			
				item.PublishipOrder = varPublishipOrder;
			
				item.CompanyID = varCompanyID;
			
				item.ConsigneeID = varConsigneeID;
			
				item.NotifyPartyID = varNotifyPartyID;
			
				item.AgentAtOriginID = varAgentAtOriginID;
			
				item.AgentAtDestinationID = varAgentAtDestinationID;
			
				item.PrinterID = varPrinterID;
			
				item.ClearingAgentID = varClearingAgentID;
			
				item.OnCarriageID = varOnCarriageID;
			
				item.OrderControllerID = varOrderControllerID;
			
				item.OperationsControllerID = varOperationsControllerID;
			
				item.OriginPortControllerID = varOriginPortControllerID;
			
				item.DestinationPortControllerID = varDestinationPortControllerID;
			
				item.CustomersRef = varCustomersRef;
			
				item.ContactID = varContactID;
			
				item.OriginPointID = varOriginPointID;
			
				item.PortID = varPortID;
			
				item.DestinationPortID = varDestinationPortID;
			
				item.FinalDestinationID = varFinalDestinationID;
			
				item.CountryID = varCountryID;
			
				item.DestinationCountryID = varDestinationCountryID;
			
				item.Ts = varTs;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn OrderNumberColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn OfficeIndicatorColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn DateOrderCreatedColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn PublishipOrderColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn CompanyIDColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn ConsigneeIDColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn NotifyPartyIDColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn AgentAtOriginIDColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn AgentAtDestinationIDColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn PrinterIDColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn ClearingAgentIDColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn OnCarriageIDColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn OrderControllerIDColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn OperationsControllerIDColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn OriginPortControllerIDColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn DestinationPortControllerIDColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        public static TableSchema.TableColumn CustomersRefColumn
        {
            get { return Schema.Columns[16]; }
        }
        
        
        
        public static TableSchema.TableColumn ContactIDColumn
        {
            get { return Schema.Columns[17]; }
        }
        
        
        
        public static TableSchema.TableColumn OriginPointIDColumn
        {
            get { return Schema.Columns[18]; }
        }
        
        
        
        public static TableSchema.TableColumn PortIDColumn
        {
            get { return Schema.Columns[19]; }
        }
        
        
        
        public static TableSchema.TableColumn DestinationPortIDColumn
        {
            get { return Schema.Columns[20]; }
        }
        
        
        
        public static TableSchema.TableColumn FinalDestinationIDColumn
        {
            get { return Schema.Columns[21]; }
        }
        
        
        
        public static TableSchema.TableColumn CountryIDColumn
        {
            get { return Schema.Columns[22]; }
        }
        
        
        
        public static TableSchema.TableColumn DestinationCountryIDColumn
        {
            get { return Schema.Columns[23]; }
        }
        
        
        
        public static TableSchema.TableColumn TsColumn
        {
            get { return Schema.Columns[24]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string OrderNumber = @"OrderNumber";
			 public static string OfficeIndicator = @"OfficeIndicator";
			 public static string DateOrderCreated = @"DateOrderCreated";
			 public static string PublishipOrder = @"PublishipOrder";
			 public static string CompanyID = @"CompanyID";
			 public static string ConsigneeID = @"ConsigneeID";
			 public static string NotifyPartyID = @"NotifyPartyID";
			 public static string AgentAtOriginID = @"AgentAtOriginID";
			 public static string AgentAtDestinationID = @"AgentAtDestinationID";
			 public static string PrinterID = @"PrinterID";
			 public static string ClearingAgentID = @"ClearingAgentID";
			 public static string OnCarriageID = @"OnCarriageID";
			 public static string OrderControllerID = @"OrderControllerID";
			 public static string OperationsControllerID = @"OperationsControllerID";
			 public static string OriginPortControllerID = @"OriginPortControllerID";
			 public static string DestinationPortControllerID = @"DestinationPortControllerID";
			 public static string CustomersRef = @"CustomersRef";
			 public static string ContactID = @"ContactID";
			 public static string OriginPointID = @"OriginPointID";
			 public static string PortID = @"PortID";
			 public static string DestinationPortID = @"DestinationPortID";
			 public static string FinalDestinationID = @"FinalDestinationID";
			 public static string CountryID = @"CountryID";
			 public static string DestinationCountryID = @"DestinationCountryID";
			 public static string Ts = @"TS";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
