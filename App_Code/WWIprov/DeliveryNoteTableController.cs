using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DAL.Logistics
{
    /// <summary>
    /// Controller class for DeliveryNoteTable
    /// </summary>
    [System.ComponentModel.DataObject]
    public partial class DeliveryNoteTableController
    {
        // Preload our schema..
        DeliveryNoteTable thisSchemaLoad = new DeliveryNoteTable();
        private string userName = String.Empty;
        protected string UserName
        {
            get
            {
				if (userName.Length == 0) 
				{
    				if (System.Web.HttpContext.Current != null)
    				{
						userName=System.Web.HttpContext.Current.User.Identity.Name;
					}
					else
					{
						userName=System.Threading.Thread.CurrentPrincipal.Identity.Name;
					}
				}
				return userName;
            }
        }
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public DeliveryNoteTableCollection FetchAll()
        {
            DeliveryNoteTableCollection coll = new DeliveryNoteTableCollection();
            Query qry = new Query(DeliveryNoteTable.Schema);
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public DeliveryNoteTableCollection FetchByID(object DeliveryNoteID)
        {
            DeliveryNoteTableCollection coll = new DeliveryNoteTableCollection().Where("DeliveryNoteID", DeliveryNoteID).Load();
            return coll;
        }
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
        public DeliveryNoteTableCollection FetchByQuery(Query qry)
        {
            DeliveryNoteTableCollection coll = new DeliveryNoteTableCollection();
            coll.LoadAndCloseReader(qry.ExecuteReader()); 
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool Delete(object DeliveryNoteID)
        {
            return (DeliveryNoteTable.Delete(DeliveryNoteID) == 1);
        }
        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public bool Destroy(object DeliveryNoteID)
        {
            return (DeliveryNoteTable.Destroy(DeliveryNoteID) == 1);
        }
        
        
    	
	    /// <summary>
	    /// Inserts a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
	    public void Insert(int? DeliveryPointID,int? Publisher,string BookingReference,int? HaulierID,string RegNumber,DateTime? BookingDate,string BookingTime,int? TotalPackages,int? TotalWeight,decimal? TotalCube,string SignedFor,string Notes,int? UKZone,int? PalletSpec,byte[] Ts)
	    {
		    DeliveryNoteTable item = new DeliveryNoteTable();
		    
            item.DeliveryPointID = DeliveryPointID;
            
            item.Publisher = Publisher;
            
            item.BookingReference = BookingReference;
            
            item.HaulierID = HaulierID;
            
            item.RegNumber = RegNumber;
            
            item.BookingDate = BookingDate;
            
            item.BookingTime = BookingTime;
            
            item.TotalPackages = TotalPackages;
            
            item.TotalWeight = TotalWeight;
            
            item.TotalCube = TotalCube;
            
            item.SignedFor = SignedFor;
            
            item.Notes = Notes;
            
            item.UKZone = UKZone;
            
            item.PalletSpec = PalletSpec;
            
            item.Ts = Ts;
            
	    
		    item.Save(UserName);
	    }
    	
	    /// <summary>
	    /// Updates a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
	    public void Update(int DeliveryNoteID,int? DeliveryPointID,int? Publisher,string BookingReference,int? HaulierID,string RegNumber,DateTime? BookingDate,string BookingTime,int? TotalPackages,int? TotalWeight,decimal? TotalCube,string SignedFor,string Notes,int? UKZone,int? PalletSpec,byte[] Ts)
	    {
		    DeliveryNoteTable item = new DeliveryNoteTable();
	        item.MarkOld();
	        item.IsLoaded = true;
		    
			item.DeliveryNoteID = DeliveryNoteID;
				
			item.DeliveryPointID = DeliveryPointID;
				
			item.Publisher = Publisher;
				
			item.BookingReference = BookingReference;
				
			item.HaulierID = HaulierID;
				
			item.RegNumber = RegNumber;
				
			item.BookingDate = BookingDate;
				
			item.BookingTime = BookingTime;
				
			item.TotalPackages = TotalPackages;
				
			item.TotalWeight = TotalWeight;
				
			item.TotalCube = TotalCube;
				
			item.SignedFor = SignedFor;
				
			item.Notes = Notes;
				
			item.UKZone = UKZone;
				
			item.PalletSpec = PalletSpec;
				
			item.Ts = Ts;
				
	        item.Save(UserName);
	    }
    }
}
