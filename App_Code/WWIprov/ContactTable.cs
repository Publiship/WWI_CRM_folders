using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DAL.Logistics
{
	/// <summary>
	/// Strongly-typed collection for the ContactTable class.
	/// </summary>
    [Serializable]
	public partial class ContactTableCollection : ActiveList<ContactTable, ContactTableCollection>
	{	   
		public ContactTableCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>ContactTableCollection</returns>
		public ContactTableCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                ContactTable o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the ContactTable table.
	/// </summary>
	[Serializable]
	public partial class ContactTable : ActiveRecord<ContactTable>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public ContactTable()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public ContactTable(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public ContactTable(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public ContactTable(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("ContactTable", TableType.Table, DataService.GetInstance("WWIprov"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarContactID = new TableSchema.TableColumn(schema);
				colvarContactID.ColumnName = "ContactID";
				colvarContactID.DataType = DbType.Int32;
				colvarContactID.MaxLength = 0;
				colvarContactID.AutoIncrement = true;
				colvarContactID.IsNullable = false;
				colvarContactID.IsPrimaryKey = true;
				colvarContactID.IsForeignKey = false;
				colvarContactID.IsReadOnly = false;
				colvarContactID.DefaultSetting = @"";
				colvarContactID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarContactID);
				
				TableSchema.TableColumn colvarContactName = new TableSchema.TableColumn(schema);
				colvarContactName.ColumnName = "ContactName";
				colvarContactName.DataType = DbType.String;
				colvarContactName.MaxLength = 50;
				colvarContactName.AutoIncrement = false;
				colvarContactName.IsNullable = true;
				colvarContactName.IsPrimaryKey = false;
				colvarContactName.IsForeignKey = false;
				colvarContactName.IsReadOnly = false;
				colvarContactName.DefaultSetting = @"";
				colvarContactName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarContactName);
				
				TableSchema.TableColumn colvarContactInitials = new TableSchema.TableColumn(schema);
				colvarContactInitials.ColumnName = "ContactInitials";
				colvarContactInitials.DataType = DbType.String;
				colvarContactInitials.MaxLength = 5;
				colvarContactInitials.AutoIncrement = false;
				colvarContactInitials.IsNullable = true;
				colvarContactInitials.IsPrimaryKey = false;
				colvarContactInitials.IsForeignKey = false;
				colvarContactInitials.IsReadOnly = false;
				colvarContactInitials.DefaultSetting = @"";
				colvarContactInitials.ForeignKeyTableName = "";
				schema.Columns.Add(colvarContactInitials);
				
				TableSchema.TableColumn colvarCompanyID = new TableSchema.TableColumn(schema);
				colvarCompanyID.ColumnName = "CompanyID";
				colvarCompanyID.DataType = DbType.Int32;
				colvarCompanyID.MaxLength = 0;
				colvarCompanyID.AutoIncrement = false;
				colvarCompanyID.IsNullable = true;
				colvarCompanyID.IsPrimaryKey = false;
				colvarCompanyID.IsForeignKey = false;
				colvarCompanyID.IsReadOnly = false;
				colvarCompanyID.DefaultSetting = @"";
				colvarCompanyID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCompanyID);
				
				TableSchema.TableColumn colvarEMail = new TableSchema.TableColumn(schema);
				colvarEMail.ColumnName = "EMail";
				colvarEMail.DataType = DbType.String;
				colvarEMail.MaxLength = 50;
				colvarEMail.AutoIncrement = false;
				colvarEMail.IsNullable = true;
				colvarEMail.IsPrimaryKey = false;
				colvarEMail.IsForeignKey = false;
				colvarEMail.IsReadOnly = false;
				colvarEMail.DefaultSetting = @"";
				colvarEMail.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEMail);
				
				TableSchema.TableColumn colvarNewsletter = new TableSchema.TableColumn(schema);
				colvarNewsletter.ColumnName = "Newsletter";
				colvarNewsletter.DataType = DbType.Boolean;
				colvarNewsletter.MaxLength = 0;
				colvarNewsletter.AutoIncrement = false;
				colvarNewsletter.IsNullable = true;
				colvarNewsletter.IsPrimaryKey = false;
				colvarNewsletter.IsForeignKey = false;
				colvarNewsletter.IsReadOnly = false;
				
						colvarNewsletter.DefaultSetting = @"((0))";
				colvarNewsletter.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNewsletter);
				
				TableSchema.TableColumn colvarSalesMainContact = new TableSchema.TableColumn(schema);
				colvarSalesMainContact.ColumnName = "Sales Main Contact";
				colvarSalesMainContact.DataType = DbType.Boolean;
				colvarSalesMainContact.MaxLength = 0;
				colvarSalesMainContact.AutoIncrement = false;
				colvarSalesMainContact.IsNullable = true;
				colvarSalesMainContact.IsPrimaryKey = false;
				colvarSalesMainContact.IsForeignKey = false;
				colvarSalesMainContact.IsReadOnly = false;
				
						colvarSalesMainContact.DefaultSetting = @"((0))";
				colvarSalesMainContact.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSalesMainContact);
				
				TableSchema.TableColumn colvarOrderAck = new TableSchema.TableColumn(schema);
				colvarOrderAck.ColumnName = "OrderAck";
				colvarOrderAck.DataType = DbType.Boolean;
				colvarOrderAck.MaxLength = 0;
				colvarOrderAck.AutoIncrement = false;
				colvarOrderAck.IsNullable = true;
				colvarOrderAck.IsPrimaryKey = false;
				colvarOrderAck.IsForeignKey = false;
				colvarOrderAck.IsReadOnly = false;
				colvarOrderAck.DefaultSetting = @"";
				colvarOrderAck.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOrderAck);
				
				TableSchema.TableColumn colvarName = new TableSchema.TableColumn(schema);
				colvarName.ColumnName = "Name";
				colvarName.DataType = DbType.String;
				colvarName.MaxLength = 50;
				colvarName.AutoIncrement = false;
				colvarName.IsNullable = true;
				colvarName.IsPrimaryKey = false;
				colvarName.IsForeignKey = false;
				colvarName.IsReadOnly = false;
				colvarName.DefaultSetting = @"";
				colvarName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarName);
				
				TableSchema.TableColumn colvarPassword = new TableSchema.TableColumn(schema);
				colvarPassword.ColumnName = "Password";
				colvarPassword.DataType = DbType.String;
				colvarPassword.MaxLength = 50;
				colvarPassword.AutoIncrement = false;
				colvarPassword.IsNullable = true;
				colvarPassword.IsPrimaryKey = false;
				colvarPassword.IsForeignKey = false;
				colvarPassword.IsReadOnly = false;
				colvarPassword.DefaultSetting = @"";
				colvarPassword.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPassword);
				
				TableSchema.TableColumn colvarLive = new TableSchema.TableColumn(schema);
				colvarLive.ColumnName = "Live";
				colvarLive.DataType = DbType.Boolean;
				colvarLive.MaxLength = 0;
				colvarLive.AutoIncrement = false;
				colvarLive.IsNullable = true;
				colvarLive.IsPrimaryKey = false;
				colvarLive.IsForeignKey = false;
				colvarLive.IsReadOnly = false;
				
						colvarLive.DefaultSetting = @"((0))";
				colvarLive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLive);
				
				TableSchema.TableColumn colvarPermission = new TableSchema.TableColumn(schema);
				colvarPermission.ColumnName = "Permission";
				colvarPermission.DataType = DbType.Int32;
				colvarPermission.MaxLength = 0;
				colvarPermission.AutoIncrement = false;
				colvarPermission.IsNullable = true;
				colvarPermission.IsPrimaryKey = false;
				colvarPermission.IsForeignKey = false;
				colvarPermission.IsReadOnly = false;
				colvarPermission.DefaultSetting = @"";
				colvarPermission.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPermission);
				
				TableSchema.TableColumn colvarAgentContactID = new TableSchema.TableColumn(schema);
				colvarAgentContactID.ColumnName = "AgentContactID";
				colvarAgentContactID.DataType = DbType.Int32;
				colvarAgentContactID.MaxLength = 0;
				colvarAgentContactID.AutoIncrement = false;
				colvarAgentContactID.IsNullable = true;
				colvarAgentContactID.IsPrimaryKey = false;
				colvarAgentContactID.IsForeignKey = false;
				colvarAgentContactID.IsReadOnly = false;
				colvarAgentContactID.DefaultSetting = @"";
				colvarAgentContactID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAgentContactID);
				
				TableSchema.TableColumn colvarDefaultView = new TableSchema.TableColumn(schema);
				colvarDefaultView.ColumnName = "DefaultView";
				colvarDefaultView.DataType = DbType.Int32;
				colvarDefaultView.MaxLength = 0;
				colvarDefaultView.AutoIncrement = false;
				colvarDefaultView.IsNullable = true;
				colvarDefaultView.IsPrimaryKey = false;
				colvarDefaultView.IsForeignKey = false;
				colvarDefaultView.IsReadOnly = false;
				
						colvarDefaultView.DefaultSetting = @"((0))";
				colvarDefaultView.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDefaultView);
				
				TableSchema.TableColumn colvarIsEditor = new TableSchema.TableColumn(schema);
				colvarIsEditor.ColumnName = "IsEditor";
				colvarIsEditor.DataType = DbType.Byte;
				colvarIsEditor.MaxLength = 0;
				colvarIsEditor.AutoIncrement = false;
				colvarIsEditor.IsNullable = false;
				colvarIsEditor.IsPrimaryKey = false;
				colvarIsEditor.IsForeignKey = false;
				colvarIsEditor.IsReadOnly = false;
				
						colvarIsEditor.DefaultSetting = @"((0))";
				colvarIsEditor.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsEditor);
				
				TableSchema.TableColumn colvarControllingOfficeID = new TableSchema.TableColumn(schema);
				colvarControllingOfficeID.ColumnName = "ControllingOfficeID";
				colvarControllingOfficeID.DataType = DbType.Int32;
				colvarControllingOfficeID.MaxLength = 0;
				colvarControllingOfficeID.AutoIncrement = false;
				colvarControllingOfficeID.IsNullable = true;
				colvarControllingOfficeID.IsPrimaryKey = false;
				colvarControllingOfficeID.IsForeignKey = false;
				colvarControllingOfficeID.IsReadOnly = false;
				
						colvarControllingOfficeID.DefaultSetting = @"((1))";
				colvarControllingOfficeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarControllingOfficeID);
				
				TableSchema.TableColumn colvarTme = new TableSchema.TableColumn(schema);
				colvarTme.ColumnName = "Tme";
				colvarTme.DataType = DbType.Binary;
				colvarTme.MaxLength = 0;
				colvarTme.AutoIncrement = false;
				colvarTme.IsNullable = true;
				colvarTme.IsPrimaryKey = false;
				colvarTme.IsForeignKey = false;
				colvarTme.IsReadOnly = true;
				colvarTme.DefaultSetting = @"";
				colvarTme.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTme);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["WWIprov"].AddSchema("ContactTable",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("ContactID")]
		[Bindable(true)]
		public int ContactID 
		{
			get { return GetColumnValue<int>(Columns.ContactID); }
			set { SetColumnValue(Columns.ContactID, value); }
		}
		  
		[XmlAttribute("ContactName")]
		[Bindable(true)]
		public string ContactName 
		{
			get { return GetColumnValue<string>(Columns.ContactName); }
			set { SetColumnValue(Columns.ContactName, value); }
		}
		  
		[XmlAttribute("ContactInitials")]
		[Bindable(true)]
		public string ContactInitials 
		{
			get { return GetColumnValue<string>(Columns.ContactInitials); }
			set { SetColumnValue(Columns.ContactInitials, value); }
		}
		  
		[XmlAttribute("CompanyID")]
		[Bindable(true)]
		public int? CompanyID 
		{
			get { return GetColumnValue<int?>(Columns.CompanyID); }
			set { SetColumnValue(Columns.CompanyID, value); }
		}
		  
		[XmlAttribute("EMail")]
		[Bindable(true)]
		public string EMail 
		{
			get { return GetColumnValue<string>(Columns.EMail); }
			set { SetColumnValue(Columns.EMail, value); }
		}
		  
		[XmlAttribute("Newsletter")]
		[Bindable(true)]
		public bool? Newsletter 
		{
			get { return GetColumnValue<bool?>(Columns.Newsletter); }
			set { SetColumnValue(Columns.Newsletter, value); }
		}
		  
		[XmlAttribute("SalesMainContact")]
		[Bindable(true)]
		public bool? SalesMainContact 
		{
			get { return GetColumnValue<bool?>(Columns.SalesMainContact); }
			set { SetColumnValue(Columns.SalesMainContact, value); }
		}
		  
		[XmlAttribute("OrderAck")]
		[Bindable(true)]
		public bool? OrderAck 
		{
			get { return GetColumnValue<bool?>(Columns.OrderAck); }
			set { SetColumnValue(Columns.OrderAck, value); }
		}
		  
		[XmlAttribute("Name")]
		[Bindable(true)]
		public string Name 
		{
			get { return GetColumnValue<string>(Columns.Name); }
			set { SetColumnValue(Columns.Name, value); }
		}
		  
		[XmlAttribute("Password")]
		[Bindable(true)]
		public string Password 
		{
			get { return GetColumnValue<string>(Columns.Password); }
			set { SetColumnValue(Columns.Password, value); }
		}
		  
		[XmlAttribute("Live")]
		[Bindable(true)]
		public bool? Live 
		{
			get { return GetColumnValue<bool?>(Columns.Live); }
			set { SetColumnValue(Columns.Live, value); }
		}
		  
		[XmlAttribute("Permission")]
		[Bindable(true)]
		public int? Permission 
		{
			get { return GetColumnValue<int?>(Columns.Permission); }
			set { SetColumnValue(Columns.Permission, value); }
		}
		  
		[XmlAttribute("AgentContactID")]
		[Bindable(true)]
		public int? AgentContactID 
		{
			get { return GetColumnValue<int?>(Columns.AgentContactID); }
			set { SetColumnValue(Columns.AgentContactID, value); }
		}
		  
		[XmlAttribute("DefaultView")]
		[Bindable(true)]
		public int? DefaultView 
		{
			get { return GetColumnValue<int?>(Columns.DefaultView); }
			set { SetColumnValue(Columns.DefaultView, value); }
		}
		  
		[XmlAttribute("IsEditor")]
		[Bindable(true)]
		public byte IsEditor 
		{
			get { return GetColumnValue<byte>(Columns.IsEditor); }
			set { SetColumnValue(Columns.IsEditor, value); }
		}
		  
		[XmlAttribute("ControllingOfficeID")]
		[Bindable(true)]
		public int? ControllingOfficeID 
		{
			get { return GetColumnValue<int?>(Columns.ControllingOfficeID); }
			set { SetColumnValue(Columns.ControllingOfficeID, value); }
		}
		  
		[XmlAttribute("Tme")]
		[Bindable(true)]
		public byte[] Tme 
		{
			get { return GetColumnValue<byte[]>(Columns.Tme); }
			set { SetColumnValue(Columns.Tme, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varContactName,string varContactInitials,int? varCompanyID,string varEMail,bool? varNewsletter,bool? varSalesMainContact,bool? varOrderAck,string varName,string varPassword,bool? varLive,int? varPermission,int? varAgentContactID,int? varDefaultView,byte varIsEditor,int? varControllingOfficeID,byte[] varTme)
		{
			ContactTable item = new ContactTable();
			
			item.ContactName = varContactName;
			
			item.ContactInitials = varContactInitials;
			
			item.CompanyID = varCompanyID;
			
			item.EMail = varEMail;
			
			item.Newsletter = varNewsletter;
			
			item.SalesMainContact = varSalesMainContact;
			
			item.OrderAck = varOrderAck;
			
			item.Name = varName;
			
			item.Password = varPassword;
			
			item.Live = varLive;
			
			item.Permission = varPermission;
			
			item.AgentContactID = varAgentContactID;
			
			item.DefaultView = varDefaultView;
			
			item.IsEditor = varIsEditor;
			
			item.ControllingOfficeID = varControllingOfficeID;
			
			item.Tme = varTme;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varContactID,string varContactName,string varContactInitials,int? varCompanyID,string varEMail,bool? varNewsletter,bool? varSalesMainContact,bool? varOrderAck,string varName,string varPassword,bool? varLive,int? varPermission,int? varAgentContactID,int? varDefaultView,byte varIsEditor,int? varControllingOfficeID,byte[] varTme)
		{
			ContactTable item = new ContactTable();
			
				item.ContactID = varContactID;
			
				item.ContactName = varContactName;
			
				item.ContactInitials = varContactInitials;
			
				item.CompanyID = varCompanyID;
			
				item.EMail = varEMail;
			
				item.Newsletter = varNewsletter;
			
				item.SalesMainContact = varSalesMainContact;
			
				item.OrderAck = varOrderAck;
			
				item.Name = varName;
			
				item.Password = varPassword;
			
				item.Live = varLive;
			
				item.Permission = varPermission;
			
				item.AgentContactID = varAgentContactID;
			
				item.DefaultView = varDefaultView;
			
				item.IsEditor = varIsEditor;
			
				item.ControllingOfficeID = varControllingOfficeID;
			
				item.Tme = varTme;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn ContactIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn ContactNameColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn ContactInitialsColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn CompanyIDColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn EMailColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn NewsletterColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn SalesMainContactColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn OrderAckColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn NameColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn PasswordColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn LiveColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn PermissionColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn AgentContactIDColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn DefaultViewColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn IsEditorColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn ControllingOfficeIDColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        public static TableSchema.TableColumn TmeColumn
        {
            get { return Schema.Columns[16]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string ContactID = @"ContactID";
			 public static string ContactName = @"ContactName";
			 public static string ContactInitials = @"ContactInitials";
			 public static string CompanyID = @"CompanyID";
			 public static string EMail = @"EMail";
			 public static string Newsletter = @"Newsletter";
			 public static string SalesMainContact = @"Sales Main Contact";
			 public static string OrderAck = @"OrderAck";
			 public static string Name = @"Name";
			 public static string Password = @"Password";
			 public static string Live = @"Live";
			 public static string Permission = @"Permission";
			 public static string AgentContactID = @"AgentContactID";
			 public static string DefaultView = @"DefaultView";
			 public static string IsEditor = @"IsEditor";
			 public static string ControllingOfficeID = @"ControllingOfficeID";
			 public static string Tme = @"Tme";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
