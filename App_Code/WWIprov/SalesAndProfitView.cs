using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DAL.Logistics{
    /// <summary>
    /// Strongly-typed collection for the SalesAndProfitView class.
    /// </summary>
    [Serializable]
    public partial class SalesAndProfitViewCollection : ReadOnlyList<SalesAndProfitView, SalesAndProfitViewCollection>
    {        
        public SalesAndProfitViewCollection() {}
    }
    /// <summary>
    /// This is  Read-only wrapper class for the SalesAndProfitView view.
    /// </summary>
    [Serializable]
    public partial class SalesAndProfitView : ReadOnlyRecord<SalesAndProfitView>, IReadOnlyRecord
    {
    
	    #region Default Settings
	    protected static void SetSQLProps() 
	    {
		    GetTableSchema();
	    }
	    #endregion
        #region Schema Accessor
	    public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                {
                    SetSQLProps();
                }
                return BaseSchema;
            }
        }
    	
        private static void GetTableSchema() 
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("SalesAndProfitView", TableType.View, DataService.GetInstance("WWIprov"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns
                
                TableSchema.TableColumn colvarInvoiceNumber = new TableSchema.TableColumn(schema);
                colvarInvoiceNumber.ColumnName = "InvoiceNumber";
                colvarInvoiceNumber.DataType = DbType.Int32;
                colvarInvoiceNumber.MaxLength = 0;
                colvarInvoiceNumber.AutoIncrement = false;
                colvarInvoiceNumber.IsNullable = false;
                colvarInvoiceNumber.IsPrimaryKey = false;
                colvarInvoiceNumber.IsForeignKey = false;
                colvarInvoiceNumber.IsReadOnly = false;
                
                schema.Columns.Add(colvarInvoiceNumber);
                
                TableSchema.TableColumn colvarCustomer = new TableSchema.TableColumn(schema);
                colvarCustomer.ColumnName = "Customer";
                colvarCustomer.DataType = DbType.Int32;
                colvarCustomer.MaxLength = 0;
                colvarCustomer.AutoIncrement = false;
                colvarCustomer.IsNullable = true;
                colvarCustomer.IsPrimaryKey = false;
                colvarCustomer.IsForeignKey = false;
                colvarCustomer.IsReadOnly = false;
                
                schema.Columns.Add(colvarCustomer);
                
                TableSchema.TableColumn colvarCompanyName = new TableSchema.TableColumn(schema);
                colvarCompanyName.ColumnName = "CompanyName";
                colvarCompanyName.DataType = DbType.String;
                colvarCompanyName.MaxLength = 50;
                colvarCompanyName.AutoIncrement = false;
                colvarCompanyName.IsNullable = true;
                colvarCompanyName.IsPrimaryKey = false;
                colvarCompanyName.IsForeignKey = false;
                colvarCompanyName.IsReadOnly = false;
                
                schema.Columns.Add(colvarCompanyName);
                
                TableSchema.TableColumn colvarInvoiceDate = new TableSchema.TableColumn(schema);
                colvarInvoiceDate.ColumnName = "InvoiceDate";
                colvarInvoiceDate.DataType = DbType.DateTime;
                colvarInvoiceDate.MaxLength = 0;
                colvarInvoiceDate.AutoIncrement = false;
                colvarInvoiceDate.IsNullable = true;
                colvarInvoiceDate.IsPrimaryKey = false;
                colvarInvoiceDate.IsForeignKey = false;
                colvarInvoiceDate.IsReadOnly = false;
                
                schema.Columns.Add(colvarInvoiceDate);
                
                TableSchema.TableColumn colvarPortName = new TableSchema.TableColumn(schema);
                colvarPortName.ColumnName = "PortName";
                colvarPortName.DataType = DbType.String;
                colvarPortName.MaxLength = 30;
                colvarPortName.AutoIncrement = false;
                colvarPortName.IsNullable = true;
                colvarPortName.IsPrimaryKey = false;
                colvarPortName.IsForeignKey = false;
                colvarPortName.IsReadOnly = false;
                
                schema.Columns.Add(colvarPortName);
                
                TableSchema.TableColumn colvarDestPort = new TableSchema.TableColumn(schema);
                colvarDestPort.ColumnName = "DestPort";
                colvarDestPort.DataType = DbType.String;
                colvarDestPort.MaxLength = 30;
                colvarDestPort.AutoIncrement = false;
                colvarDestPort.IsNullable = true;
                colvarDestPort.IsPrimaryKey = false;
                colvarDestPort.IsForeignKey = false;
                colvarDestPort.IsReadOnly = false;
                
                schema.Columns.Add(colvarDestPort);
                
                TableSchema.TableColumn colvarSterlingValue = new TableSchema.TableColumn(schema);
                colvarSterlingValue.ColumnName = "SterlingValue";
                colvarSterlingValue.DataType = DbType.Currency;
                colvarSterlingValue.MaxLength = 0;
                colvarSterlingValue.AutoIncrement = false;
                colvarSterlingValue.IsNullable = true;
                colvarSterlingValue.IsPrimaryKey = false;
                colvarSterlingValue.IsForeignKey = false;
                colvarSterlingValue.IsReadOnly = false;
                
                schema.Columns.Add(colvarSterlingValue);
                
                TableSchema.TableColumn colvarValueForProfit = new TableSchema.TableColumn(schema);
                colvarValueForProfit.ColumnName = "ValueForProfit";
                colvarValueForProfit.DataType = DbType.Currency;
                colvarValueForProfit.MaxLength = 0;
                colvarValueForProfit.AutoIncrement = false;
                colvarValueForProfit.IsNullable = true;
                colvarValueForProfit.IsPrimaryKey = false;
                colvarValueForProfit.IsForeignKey = false;
                colvarValueForProfit.IsReadOnly = false;
                
                schema.Columns.Add(colvarValueForProfit);
                
                TableSchema.TableColumn colvarDepartmentID = new TableSchema.TableColumn(schema);
                colvarDepartmentID.ColumnName = "DepartmentID";
                colvarDepartmentID.DataType = DbType.Int32;
                colvarDepartmentID.MaxLength = 0;
                colvarDepartmentID.AutoIncrement = false;
                colvarDepartmentID.IsNullable = true;
                colvarDepartmentID.IsPrimaryKey = false;
                colvarDepartmentID.IsForeignKey = false;
                colvarDepartmentID.IsReadOnly = false;
                
                schema.Columns.Add(colvarDepartmentID);
                
                
                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["WWIprov"].AddSchema("SalesAndProfitView",schema);
            }
        }
        #endregion
        
        #region Query Accessor
	    public static Query CreateQuery()
	    {
		    return new Query(Schema);
	    }
	    #endregion
	    
	    #region .ctors
	    public SalesAndProfitView()
	    {
            SetSQLProps();
            SetDefaults();
            MarkNew();
        }
        public SalesAndProfitView(bool useDatabaseDefaults)
	    {
		    SetSQLProps();
		    if(useDatabaseDefaults)
		    {
				ForceDefaults();
			}
			MarkNew();
	    }
	    
	    public SalesAndProfitView(object keyID)
	    {
		    SetSQLProps();
		    LoadByKey(keyID);
	    }
    	 
	    public SalesAndProfitView(string columnName, object columnValue)
        {
            SetSQLProps();
            LoadByParam(columnName,columnValue);
        }
        
	    #endregion
	    
	    #region Props
	    
          
        [XmlAttribute("InvoiceNumber")]
        [Bindable(true)]
        public int InvoiceNumber 
	    {
		    get
		    {
			    return GetColumnValue<int>("InvoiceNumber");
		    }
            set 
		    {
			    SetColumnValue("InvoiceNumber", value);
            }
        }
	      
        [XmlAttribute("Customer")]
        [Bindable(true)]
        public int? Customer 
	    {
		    get
		    {
			    return GetColumnValue<int?>("Customer");
		    }
            set 
		    {
			    SetColumnValue("Customer", value);
            }
        }
	      
        [XmlAttribute("CompanyName")]
        [Bindable(true)]
        public string CompanyName 
	    {
		    get
		    {
			    return GetColumnValue<string>("CompanyName");
		    }
            set 
		    {
			    SetColumnValue("CompanyName", value);
            }
        }
	      
        [XmlAttribute("InvoiceDate")]
        [Bindable(true)]
        public DateTime? InvoiceDate 
	    {
		    get
		    {
			    return GetColumnValue<DateTime?>("InvoiceDate");
		    }
            set 
		    {
			    SetColumnValue("InvoiceDate", value);
            }
        }
	      
        [XmlAttribute("PortName")]
        [Bindable(true)]
        public string PortName 
	    {
		    get
		    {
			    return GetColumnValue<string>("PortName");
		    }
            set 
		    {
			    SetColumnValue("PortName", value);
            }
        }
	      
        [XmlAttribute("DestPort")]
        [Bindable(true)]
        public string DestPort 
	    {
		    get
		    {
			    return GetColumnValue<string>("DestPort");
		    }
            set 
		    {
			    SetColumnValue("DestPort", value);
            }
        }
	      
        [XmlAttribute("SterlingValue")]
        [Bindable(true)]
        public decimal? SterlingValue 
	    {
		    get
		    {
			    return GetColumnValue<decimal?>("SterlingValue");
		    }
            set 
		    {
			    SetColumnValue("SterlingValue", value);
            }
        }
	      
        [XmlAttribute("ValueForProfit")]
        [Bindable(true)]
        public decimal? ValueForProfit 
	    {
		    get
		    {
			    return GetColumnValue<decimal?>("ValueForProfit");
		    }
            set 
		    {
			    SetColumnValue("ValueForProfit", value);
            }
        }
	      
        [XmlAttribute("DepartmentID")]
        [Bindable(true)]
        public int? DepartmentID 
	    {
		    get
		    {
			    return GetColumnValue<int?>("DepartmentID");
		    }
            set 
		    {
			    SetColumnValue("DepartmentID", value);
            }
        }
	    
	    #endregion
    
	    #region Columns Struct
	    public struct Columns
	    {
		    
		    
            public static string InvoiceNumber = @"InvoiceNumber";
            
            public static string Customer = @"Customer";
            
            public static string CompanyName = @"CompanyName";
            
            public static string InvoiceDate = @"InvoiceDate";
            
            public static string PortName = @"PortName";
            
            public static string DestPort = @"DestPort";
            
            public static string SterlingValue = @"SterlingValue";
            
            public static string ValueForProfit = @"ValueForProfit";
            
            public static string DepartmentID = @"DepartmentID";
            
	    }
	    #endregion
	    
	    
	    #region IAbstractRecord Members
        public new CT GetColumnValue<CT>(string columnName) {
            return base.GetColumnValue<CT>(columnName);
        }
        public object GetColumnValue(string columnName) {
            return base.GetColumnValue<object>(columnName);
        }
        #endregion
	    
    }
}
