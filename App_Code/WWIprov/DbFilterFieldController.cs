using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DAL.Logistics
{
    /// <summary>
    /// Controller class for db_filter_fields
    /// </summary>
    [System.ComponentModel.DataObject]
    public partial class DbFilterFieldController
    {
        // Preload our schema..
        DbFilterField thisSchemaLoad = new DbFilterField();
        private string userName = String.Empty;
        protected string UserName
        {
            get
            {
				if (userName.Length == 0) 
				{
    				if (System.Web.HttpContext.Current != null)
    				{
						userName=System.Web.HttpContext.Current.User.Identity.Name;
					}
					else
					{
						userName=System.Threading.Thread.CurrentPrincipal.Identity.Name;
					}
				}
				return userName;
            }
        }
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public DbFilterFieldCollection FetchAll()
        {
            DbFilterFieldCollection coll = new DbFilterFieldCollection();
            Query qry = new Query(DbFilterField.Schema);
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public DbFilterFieldCollection FetchByID(object FilterFieldId)
        {
            DbFilterFieldCollection coll = new DbFilterFieldCollection().Where("filter_field_ID", FilterFieldId).Load();
            return coll;
        }
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
        public DbFilterFieldCollection FetchByQuery(Query qry)
        {
            DbFilterFieldCollection coll = new DbFilterFieldCollection();
            coll.LoadAndCloseReader(qry.ExecuteReader()); 
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool Delete(object FilterFieldId)
        {
            return (DbFilterField.Delete(FilterFieldId) == 1);
        }
        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public bool Destroy(object FilterFieldId)
        {
            return (DbFilterField.Destroy(FilterFieldId) == 1);
        }
        
        
    	
	    /// <summary>
	    /// Inserts a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
	    public void Insert(string FilterCaption,string FieldName,string FieldSource,string ColumnType,string CriteriaString,string AppliesToDeprecated,string AppliesTo,bool? IsActive,bool? IsQuickFilter,bool? LoginRequired,int? SortOrder,string CreatedBy,DateTime? CreatedOn,byte[] MsTimestamp)
	    {
		    DbFilterField item = new DbFilterField();
		    
            item.FilterCaption = FilterCaption;
            
            item.FieldName = FieldName;
            
            item.FieldSource = FieldSource;
            
            item.ColumnType = ColumnType;
            
            item.CriteriaString = CriteriaString;
            
            item.AppliesToDeprecated = AppliesToDeprecated;
            
            item.AppliesTo = AppliesTo;
            
            item.IsActive = IsActive;
            
            item.IsQuickFilter = IsQuickFilter;
            
            item.LoginRequired = LoginRequired;
            
            item.SortOrder = SortOrder;
            
            item.CreatedBy = CreatedBy;
            
            item.CreatedOn = CreatedOn;
            
            item.MsTimestamp = MsTimestamp;
            
	    
		    item.Save(UserName);
	    }
    	
	    /// <summary>
	    /// Updates a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
	    public void Update(int FilterFieldId,string FilterCaption,string FieldName,string FieldSource,string ColumnType,string CriteriaString,string AppliesToDeprecated,string AppliesTo,bool? IsActive,bool? IsQuickFilter,bool? LoginRequired,int? SortOrder,string CreatedBy,DateTime? CreatedOn,byte[] MsTimestamp)
	    {
		    DbFilterField item = new DbFilterField();
	        item.MarkOld();
	        item.IsLoaded = true;
		    
			item.FilterFieldId = FilterFieldId;
				
			item.FilterCaption = FilterCaption;
				
			item.FieldName = FieldName;
				
			item.FieldSource = FieldSource;
				
			item.ColumnType = ColumnType;
				
			item.CriteriaString = CriteriaString;
				
			item.AppliesToDeprecated = AppliesToDeprecated;
				
			item.AppliesTo = AppliesTo;
				
			item.IsActive = IsActive;
				
			item.IsQuickFilter = IsQuickFilter;
				
			item.LoginRequired = LoginRequired;
				
			item.SortOrder = SortOrder;
				
			item.CreatedBy = CreatedBy;
				
			item.CreatedOn = CreatedOn;
				
			item.MsTimestamp = MsTimestamp;
				
	        item.Save(UserName);
	    }
    }
}
