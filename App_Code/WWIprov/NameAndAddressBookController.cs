using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DAL.Logistics
{
    /// <summary>
    /// Controller class for NameAndAddressBook
    /// </summary>
    [System.ComponentModel.DataObject]
    public partial class NameAndAddressBookController
    {
        // Preload our schema..
        NameAndAddressBook thisSchemaLoad = new NameAndAddressBook();
        private string userName = String.Empty;
        protected string UserName
        {
            get
            {
				if (userName.Length == 0) 
				{
    				if (System.Web.HttpContext.Current != null)
    				{
						userName=System.Web.HttpContext.Current.User.Identity.Name;
					}
					else
					{
						userName=System.Threading.Thread.CurrentPrincipal.Identity.Name;
					}
				}
				return userName;
            }
        }
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public NameAndAddressBookCollection FetchAll()
        {
            NameAndAddressBookCollection coll = new NameAndAddressBookCollection();
            Query qry = new Query(NameAndAddressBook.Schema);
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public NameAndAddressBookCollection FetchByID(object CompanyID)
        {
            NameAndAddressBookCollection coll = new NameAndAddressBookCollection().Where("CompanyID", CompanyID).Load();
            return coll;
        }
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
        public NameAndAddressBookCollection FetchByQuery(Query qry)
        {
            NameAndAddressBookCollection coll = new NameAndAddressBookCollection();
            coll.LoadAndCloseReader(qry.ExecuteReader()); 
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool Delete(object CompanyID)
        {
            return (NameAndAddressBook.Delete(CompanyID) == 1);
        }
        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public bool Destroy(object CompanyID)
        {
            return (NameAndAddressBook.Destroy(CompanyID) == 1);
        }
        
        
    	
	    /// <summary>
	    /// Inserts a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
	    public void Insert(string CompanyName,bool? Customer,string Address1,string Address2,string Address3,string PostCode,int? CountryID,string TelNo,string FaxNo,string MainEmail,int? TypeID,bool? Consignee,bool? Insurance,bool? SalesModule,bool? Exporter,string VATNumber,string DefermentNumber,DateTime? DateRecordAdded,int? RecordAddedBY,int? SalesBy,string PalletDims,int? MaxPalletWeight,int? MaxPalletHeight,string SpecialDeliveryInstructions,int? PricerGroup,byte[] Ts)
	    {
		    NameAndAddressBook item = new NameAndAddressBook();
		    
            item.CompanyName = CompanyName;
            
            item.Customer = Customer;
            
            item.Address1 = Address1;
            
            item.Address2 = Address2;
            
            item.Address3 = Address3;
            
            item.PostCode = PostCode;
            
            item.CountryID = CountryID;
            
            item.TelNo = TelNo;
            
            item.FaxNo = FaxNo;
            
            item.MainEmail = MainEmail;
            
            item.TypeID = TypeID;
            
            item.Consignee = Consignee;
            
            item.Insurance = Insurance;
            
            item.SalesModule = SalesModule;
            
            item.Exporter = Exporter;
            
            item.VATNumber = VATNumber;
            
            item.DefermentNumber = DefermentNumber;
            
            item.DateRecordAdded = DateRecordAdded;
            
            item.RecordAddedBY = RecordAddedBY;
            
            item.SalesBy = SalesBy;
            
            item.PalletDims = PalletDims;
            
            item.MaxPalletWeight = MaxPalletWeight;
            
            item.MaxPalletHeight = MaxPalletHeight;
            
            item.SpecialDeliveryInstructions = SpecialDeliveryInstructions;
            
            item.PricerGroup = PricerGroup;
            
            item.Ts = Ts;
            
	    
		    item.Save(UserName);
	    }
    	
	    /// <summary>
	    /// Updates a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
	    public void Update(int CompanyID,string CompanyName,bool? Customer,string Address1,string Address2,string Address3,string PostCode,int? CountryID,string TelNo,string FaxNo,string MainEmail,int? TypeID,bool? Consignee,bool? Insurance,bool? SalesModule,bool? Exporter,string VATNumber,string DefermentNumber,DateTime? DateRecordAdded,int? RecordAddedBY,int? SalesBy,string PalletDims,int? MaxPalletWeight,int? MaxPalletHeight,string SpecialDeliveryInstructions,int? PricerGroup,byte[] Ts)
	    {
		    NameAndAddressBook item = new NameAndAddressBook();
	        item.MarkOld();
	        item.IsLoaded = true;
		    
			item.CompanyID = CompanyID;
				
			item.CompanyName = CompanyName;
				
			item.Customer = Customer;
				
			item.Address1 = Address1;
				
			item.Address2 = Address2;
				
			item.Address3 = Address3;
				
			item.PostCode = PostCode;
				
			item.CountryID = CountryID;
				
			item.TelNo = TelNo;
				
			item.FaxNo = FaxNo;
				
			item.MainEmail = MainEmail;
				
			item.TypeID = TypeID;
				
			item.Consignee = Consignee;
				
			item.Insurance = Insurance;
				
			item.SalesModule = SalesModule;
				
			item.Exporter = Exporter;
				
			item.VATNumber = VATNumber;
				
			item.DefermentNumber = DefermentNumber;
				
			item.DateRecordAdded = DateRecordAdded;
				
			item.RecordAddedBY = RecordAddedBY;
				
			item.SalesBy = SalesBy;
				
			item.PalletDims = PalletDims;
				
			item.MaxPalletWeight = MaxPalletWeight;
				
			item.MaxPalletHeight = MaxPalletHeight;
				
			item.SpecialDeliveryInstructions = SpecialDeliveryInstructions;
				
			item.PricerGroup = PricerGroup;
				
			item.Ts = Ts;
				
	        item.Save(UserName);
	    }
    }
}
