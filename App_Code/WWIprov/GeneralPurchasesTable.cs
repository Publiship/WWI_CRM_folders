using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DAL.Logistics
{
	/// <summary>
	/// Strongly-typed collection for the GeneralPurchasesTable class.
	/// </summary>
    [Serializable]
	public partial class GeneralPurchasesTableCollection : ActiveList<GeneralPurchasesTable, GeneralPurchasesTableCollection>
	{	   
		public GeneralPurchasesTableCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>GeneralPurchasesTableCollection</returns>
		public GeneralPurchasesTableCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                GeneralPurchasesTable o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the GeneralPurchasesTable table.
	/// </summary>
	[Serializable]
	public partial class GeneralPurchasesTable : ActiveRecord<GeneralPurchasesTable>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public GeneralPurchasesTable()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public GeneralPurchasesTable(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public GeneralPurchasesTable(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public GeneralPurchasesTable(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("GeneralPurchasesTable", TableType.Table, DataService.GetInstance("WWIprov"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarGenPurchaseID = new TableSchema.TableColumn(schema);
				colvarGenPurchaseID.ColumnName = "GenPurchaseID";
				colvarGenPurchaseID.DataType = DbType.Int32;
				colvarGenPurchaseID.MaxLength = 0;
				colvarGenPurchaseID.AutoIncrement = true;
				colvarGenPurchaseID.IsNullable = false;
				colvarGenPurchaseID.IsPrimaryKey = true;
				colvarGenPurchaseID.IsForeignKey = false;
				colvarGenPurchaseID.IsReadOnly = false;
				colvarGenPurchaseID.DefaultSetting = @"";
				colvarGenPurchaseID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGenPurchaseID);
				
				TableSchema.TableColumn colvarSupplierID = new TableSchema.TableColumn(schema);
				colvarSupplierID.ColumnName = "SupplierID";
				colvarSupplierID.DataType = DbType.Int32;
				colvarSupplierID.MaxLength = 0;
				colvarSupplierID.AutoIncrement = false;
				colvarSupplierID.IsNullable = true;
				colvarSupplierID.IsPrimaryKey = false;
				colvarSupplierID.IsForeignKey = false;
				colvarSupplierID.IsReadOnly = false;
				colvarSupplierID.DefaultSetting = @"";
				colvarSupplierID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSupplierID);
				
				TableSchema.TableColumn colvarInvoiceNo = new TableSchema.TableColumn(schema);
				colvarInvoiceNo.ColumnName = "InvoiceNo";
				colvarInvoiceNo.DataType = DbType.String;
				colvarInvoiceNo.MaxLength = 50;
				colvarInvoiceNo.AutoIncrement = false;
				colvarInvoiceNo.IsNullable = true;
				colvarInvoiceNo.IsPrimaryKey = false;
				colvarInvoiceNo.IsForeignKey = false;
				colvarInvoiceNo.IsReadOnly = false;
				colvarInvoiceNo.DefaultSetting = @"";
				colvarInvoiceNo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInvoiceNo);
				
				TableSchema.TableColumn colvarInvDate = new TableSchema.TableColumn(schema);
				colvarInvDate.ColumnName = "InvDate";
				colvarInvDate.DataType = DbType.DateTime;
				colvarInvDate.MaxLength = 0;
				colvarInvDate.AutoIncrement = false;
				colvarInvDate.IsNullable = true;
				colvarInvDate.IsPrimaryKey = false;
				colvarInvDate.IsForeignKey = false;
				colvarInvDate.IsReadOnly = false;
				colvarInvDate.DefaultSetting = @"";
				colvarInvDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInvDate);
				
				TableSchema.TableColumn colvarCodeID = new TableSchema.TableColumn(schema);
				colvarCodeID.ColumnName = "CodeID";
				colvarCodeID.DataType = DbType.Int32;
				colvarCodeID.MaxLength = 0;
				colvarCodeID.AutoIncrement = false;
				colvarCodeID.IsNullable = true;
				colvarCodeID.IsPrimaryKey = false;
				colvarCodeID.IsForeignKey = false;
				colvarCodeID.IsReadOnly = false;
				colvarCodeID.DefaultSetting = @"";
				colvarCodeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCodeID);
				
				TableSchema.TableColumn colvarAmount = new TableSchema.TableColumn(schema);
				colvarAmount.ColumnName = "Amount";
				colvarAmount.DataType = DbType.Decimal;
				colvarAmount.MaxLength = 0;
				colvarAmount.AutoIncrement = false;
				colvarAmount.IsNullable = true;
				colvarAmount.IsPrimaryKey = false;
				colvarAmount.IsForeignKey = false;
				colvarAmount.IsReadOnly = false;
				colvarAmount.DefaultSetting = @"";
				colvarAmount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAmount);
				
				TableSchema.TableColumn colvarVATAmount = new TableSchema.TableColumn(schema);
				colvarVATAmount.ColumnName = "VATAmount";
				colvarVATAmount.DataType = DbType.Decimal;
				colvarVATAmount.MaxLength = 0;
				colvarVATAmount.AutoIncrement = false;
				colvarVATAmount.IsNullable = true;
				colvarVATAmount.IsPrimaryKey = false;
				colvarVATAmount.IsForeignKey = false;
				colvarVATAmount.IsReadOnly = false;
				colvarVATAmount.DefaultSetting = @"";
				colvarVATAmount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarVATAmount);
				
				TableSchema.TableColumn colvarDatePassed = new TableSchema.TableColumn(schema);
				colvarDatePassed.ColumnName = "DatePassed";
				colvarDatePassed.DataType = DbType.DateTime;
				colvarDatePassed.MaxLength = 0;
				colvarDatePassed.AutoIncrement = false;
				colvarDatePassed.IsNullable = true;
				colvarDatePassed.IsPrimaryKey = false;
				colvarDatePassed.IsForeignKey = false;
				colvarDatePassed.IsReadOnly = false;
				colvarDatePassed.DefaultSetting = @"";
				colvarDatePassed.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDatePassed);
				
				TableSchema.TableColumn colvarPassedBy = new TableSchema.TableColumn(schema);
				colvarPassedBy.ColumnName = "PassedBy";
				colvarPassedBy.DataType = DbType.Int32;
				colvarPassedBy.MaxLength = 0;
				colvarPassedBy.AutoIncrement = false;
				colvarPassedBy.IsNullable = true;
				colvarPassedBy.IsPrimaryKey = false;
				colvarPassedBy.IsForeignKey = false;
				colvarPassedBy.IsReadOnly = false;
				colvarPassedBy.DefaultSetting = @"";
				colvarPassedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPassedBy);
				
				TableSchema.TableColumn colvarReChargeInvNo = new TableSchema.TableColumn(schema);
				colvarReChargeInvNo.ColumnName = "ReChargeInvNo";
				colvarReChargeInvNo.DataType = DbType.Int32;
				colvarReChargeInvNo.MaxLength = 0;
				colvarReChargeInvNo.AutoIncrement = false;
				colvarReChargeInvNo.IsNullable = true;
				colvarReChargeInvNo.IsPrimaryKey = false;
				colvarReChargeInvNo.IsForeignKey = false;
				colvarReChargeInvNo.IsReadOnly = false;
				colvarReChargeInvNo.DefaultSetting = @"";
				colvarReChargeInvNo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarReChargeInvNo);
				
				TableSchema.TableColumn colvarRemarks = new TableSchema.TableColumn(schema);
				colvarRemarks.ColumnName = "Remarks";
				colvarRemarks.DataType = DbType.String;
				colvarRemarks.MaxLength = 200;
				colvarRemarks.AutoIncrement = false;
				colvarRemarks.IsNullable = true;
				colvarRemarks.IsPrimaryKey = false;
				colvarRemarks.IsForeignKey = false;
				colvarRemarks.IsReadOnly = false;
				colvarRemarks.DefaultSetting = @"";
				colvarRemarks.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRemarks);
				
				TableSchema.TableColumn colvarTs = new TableSchema.TableColumn(schema);
				colvarTs.ColumnName = "TS";
				colvarTs.DataType = DbType.Binary;
				colvarTs.MaxLength = 0;
				colvarTs.AutoIncrement = false;
				colvarTs.IsNullable = true;
				colvarTs.IsPrimaryKey = false;
				colvarTs.IsForeignKey = false;
				colvarTs.IsReadOnly = true;
				colvarTs.DefaultSetting = @"";
				colvarTs.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTs);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["WWIprov"].AddSchema("GeneralPurchasesTable",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("GenPurchaseID")]
		[Bindable(true)]
		public int GenPurchaseID 
		{
			get { return GetColumnValue<int>(Columns.GenPurchaseID); }
			set { SetColumnValue(Columns.GenPurchaseID, value); }
		}
		  
		[XmlAttribute("SupplierID")]
		[Bindable(true)]
		public int? SupplierID 
		{
			get { return GetColumnValue<int?>(Columns.SupplierID); }
			set { SetColumnValue(Columns.SupplierID, value); }
		}
		  
		[XmlAttribute("InvoiceNo")]
		[Bindable(true)]
		public string InvoiceNo 
		{
			get { return GetColumnValue<string>(Columns.InvoiceNo); }
			set { SetColumnValue(Columns.InvoiceNo, value); }
		}
		  
		[XmlAttribute("InvDate")]
		[Bindable(true)]
		public DateTime? InvDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.InvDate); }
			set { SetColumnValue(Columns.InvDate, value); }
		}
		  
		[XmlAttribute("CodeID")]
		[Bindable(true)]
		public int? CodeID 
		{
			get { return GetColumnValue<int?>(Columns.CodeID); }
			set { SetColumnValue(Columns.CodeID, value); }
		}
		  
		[XmlAttribute("Amount")]
		[Bindable(true)]
		public decimal? Amount 
		{
			get { return GetColumnValue<decimal?>(Columns.Amount); }
			set { SetColumnValue(Columns.Amount, value); }
		}
		  
		[XmlAttribute("VATAmount")]
		[Bindable(true)]
		public decimal? VATAmount 
		{
			get { return GetColumnValue<decimal?>(Columns.VATAmount); }
			set { SetColumnValue(Columns.VATAmount, value); }
		}
		  
		[XmlAttribute("DatePassed")]
		[Bindable(true)]
		public DateTime? DatePassed 
		{
			get { return GetColumnValue<DateTime?>(Columns.DatePassed); }
			set { SetColumnValue(Columns.DatePassed, value); }
		}
		  
		[XmlAttribute("PassedBy")]
		[Bindable(true)]
		public int? PassedBy 
		{
			get { return GetColumnValue<int?>(Columns.PassedBy); }
			set { SetColumnValue(Columns.PassedBy, value); }
		}
		  
		[XmlAttribute("ReChargeInvNo")]
		[Bindable(true)]
		public int? ReChargeInvNo 
		{
			get { return GetColumnValue<int?>(Columns.ReChargeInvNo); }
			set { SetColumnValue(Columns.ReChargeInvNo, value); }
		}
		  
		[XmlAttribute("Remarks")]
		[Bindable(true)]
		public string Remarks 
		{
			get { return GetColumnValue<string>(Columns.Remarks); }
			set { SetColumnValue(Columns.Remarks, value); }
		}
		  
		[XmlAttribute("Ts")]
		[Bindable(true)]
		public byte[] Ts 
		{
			get { return GetColumnValue<byte[]>(Columns.Ts); }
			set { SetColumnValue(Columns.Ts, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int? varSupplierID,string varInvoiceNo,DateTime? varInvDate,int? varCodeID,decimal? varAmount,decimal? varVATAmount,DateTime? varDatePassed,int? varPassedBy,int? varReChargeInvNo,string varRemarks,byte[] varTs)
		{
			GeneralPurchasesTable item = new GeneralPurchasesTable();
			
			item.SupplierID = varSupplierID;
			
			item.InvoiceNo = varInvoiceNo;
			
			item.InvDate = varInvDate;
			
			item.CodeID = varCodeID;
			
			item.Amount = varAmount;
			
			item.VATAmount = varVATAmount;
			
			item.DatePassed = varDatePassed;
			
			item.PassedBy = varPassedBy;
			
			item.ReChargeInvNo = varReChargeInvNo;
			
			item.Remarks = varRemarks;
			
			item.Ts = varTs;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varGenPurchaseID,int? varSupplierID,string varInvoiceNo,DateTime? varInvDate,int? varCodeID,decimal? varAmount,decimal? varVATAmount,DateTime? varDatePassed,int? varPassedBy,int? varReChargeInvNo,string varRemarks,byte[] varTs)
		{
			GeneralPurchasesTable item = new GeneralPurchasesTable();
			
				item.GenPurchaseID = varGenPurchaseID;
			
				item.SupplierID = varSupplierID;
			
				item.InvoiceNo = varInvoiceNo;
			
				item.InvDate = varInvDate;
			
				item.CodeID = varCodeID;
			
				item.Amount = varAmount;
			
				item.VATAmount = varVATAmount;
			
				item.DatePassed = varDatePassed;
			
				item.PassedBy = varPassedBy;
			
				item.ReChargeInvNo = varReChargeInvNo;
			
				item.Remarks = varRemarks;
			
				item.Ts = varTs;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn GenPurchaseIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn SupplierIDColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn InvoiceNoColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn InvDateColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn CodeIDColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn AmountColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn VATAmountColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn DatePassedColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn PassedByColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn ReChargeInvNoColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn RemarksColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn TsColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string GenPurchaseID = @"GenPurchaseID";
			 public static string SupplierID = @"SupplierID";
			 public static string InvoiceNo = @"InvoiceNo";
			 public static string InvDate = @"InvDate";
			 public static string CodeID = @"CodeID";
			 public static string Amount = @"Amount";
			 public static string VATAmount = @"VATAmount";
			 public static string DatePassed = @"DatePassed";
			 public static string PassedBy = @"PassedBy";
			 public static string ReChargeInvNo = @"ReChargeInvNo";
			 public static string Remarks = @"Remarks";
			 public static string Ts = @"TS";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
