using System;
using System.Text;
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration;
using System.Xml;
using System.Xml.Serialization;
using SubSonic;
using SubSonic.Utilities;
// <auto-generated />
namespace DAL.Logistics
{
    /// <summary>
    /// CUSTOM Controller class for PublishipAdvanceCartonTable
    /// we have a couple of extra fetch options but we also need to keep the CRUD operations in the same class
    /// so we can use it with an objectdatasource
    /// </summary>
    [System.ComponentModel.DataObject]
    public partial class PublishipAdvanceCartonTableCustomcontroller
    {
        // Preload our schema..
        PublishipAdvanceCartonTable thisSchemaLoad = new PublishipAdvanceCartonTable();
        private string userName = String.Empty;
        protected string UserName
        {
            get
            {
                if (userName.Length == 0)
                {
                    if (System.Web.HttpContext.Current != null)
                    {
                        userName = System.Web.HttpContext.Current.User.Identity.Name;
                    }
                    else
                    {
                        userName = System.Threading.Thread.CurrentPrincipal.Identity.Name;
                    }
                }
                return userName;
            }
        }
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public PublishipAdvanceCartonTableCollection CartonsFetchAll()
        {
            PublishipAdvanceCartonTableCollection coll = new PublishipAdvanceCartonTableCollection();
            Query qry = new Query(PublishipAdvanceCartonTable.Schema);
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public PublishipAdvanceCartonTableCollection CartonsFetchByID(object PubAdvCartonID)
        {
            PublishipAdvanceCartonTableCollection coll = new PublishipAdvanceCartonTableCollection().Where("PubAdvCartonID", PubAdvCartonID).Load();
            return coll;
        }

        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public PublishipAdvanceCartonTableCollection CartonsFetchByPATitleID(object PATitleID)
        {
            PublishipAdvanceCartonTableCollection coll = new PublishipAdvanceCartonTableCollection().Where("PATitleID", PATitleID).Load();
            return coll;
        }

        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public PublishipAdvanceCartonTableCollection CartonsFetchByQuery(Query qry)
        {
            PublishipAdvanceCartonTableCollection coll = new PublishipAdvanceCartonTableCollection();
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool CartonDelete(object PubAdvCartonID)
        {
            return (PublishipAdvanceCartonTable.Delete(PubAdvCartonID) == 1);
        }
        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public bool CartonDestroy(object PubAdvCartonID)
        {
            return (PublishipAdvanceCartonTable.Destroy(PubAdvCartonID) == 1);
        }



        /// <summary>
        /// Inserts a record, can be used with the Object Data Source
        /// </summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
        public void CartonInsert(int PATitleID, decimal? CartonLength, decimal? CartonWidth, decimal? CartonHeight, decimal? CartonWeight)
        {
            PublishipAdvanceCartonTable item = new PublishipAdvanceCartonTable();

            item.PATitleID = PATitleID;

            item.CartonLength = CartonLength;

            item.CartonWidth = CartonWidth;

            item.CartonHeight = CartonHeight;

            item.CartonWeight = CartonWeight;


            item.Save(UserName);
        }

        /// <summary>
        /// Updates a record, can be used with the Object Data Source
        /// </summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
        public void CartonUpdate(int PubAdvCartonID, int PATitleID, decimal? CartonLength, decimal? CartonWidth, decimal? CartonHeight, decimal? CartonWeight)
        {
            PublishipAdvanceCartonTable item = new PublishipAdvanceCartonTable();
            item.MarkOld();
            item.IsLoaded = true;

            item.PubAdvCartonID = PubAdvCartonID;

            item.PATitleID = PATitleID;

            item.CartonLength = CartonLength;

            item.CartonWidth = CartonWidth;

            item.CartonHeight = CartonHeight;

            item.CartonWeight = CartonWeight;

            item.Save(UserName);
        }
    }
}
