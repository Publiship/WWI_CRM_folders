using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DAL.Logistics
{
    /// <summary>
    /// Controller class for DeliverySubSubTable
    /// </summary>
    [System.ComponentModel.DataObject]
    public partial class DeliverySubSubTableController
    {
        // Preload our schema..
        DeliverySubSubTable thisSchemaLoad = new DeliverySubSubTable();
        private string userName = String.Empty;
        protected string UserName
        {
            get
            {
				if (userName.Length == 0) 
				{
    				if (System.Web.HttpContext.Current != null)
    				{
						userName=System.Web.HttpContext.Current.User.Identity.Name;
					}
					else
					{
						userName=System.Threading.Thread.CurrentPrincipal.Identity.Name;
					}
				}
				return userName;
            }
        }
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public DeliverySubSubTableCollection FetchAll()
        {
            DeliverySubSubTableCollection coll = new DeliverySubSubTableCollection();
            Query qry = new Query(DeliverySubSubTable.Schema);
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public DeliverySubSubTableCollection FetchByID(object SubDeliveryID)
        {
            DeliverySubSubTableCollection coll = new DeliverySubSubTableCollection().Where("SubDeliveryID", SubDeliveryID).Load();
            return coll;
        }
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
        public DeliverySubSubTableCollection FetchByQuery(Query qry)
        {
            DeliverySubSubTableCollection coll = new DeliverySubSubTableCollection();
            coll.LoadAndCloseReader(qry.ExecuteReader()); 
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool Delete(object SubDeliveryID)
        {
            return (DeliverySubSubTable.Delete(SubDeliveryID) == 1);
        }
        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public bool Destroy(object SubDeliveryID)
        {
            return (DeliverySubSubTable.Destroy(SubDeliveryID) == 1);
        }
        
        
    	
	    /// <summary>
	    /// Inserts a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
	    public void Insert(int? DeliveryID,int? TitleID,string Title,int? Copies,int? CurrentStatusID,string Remarks,int? CopiesPerCarton,float? TotalConsignmentWeight,float? TotalConsignmentCube,decimal? CartonLength,decimal? CartonDepth,decimal? CartonHeight,int? TotalCartons,float? CartonWeight,float? LastCarton,int? Jackets,int? FullPallets,int? CartonsPerFullPallet,int? PartPallets,int? CartonsPerPartPallet,decimal? ActualPPC,byte[] Ts,decimal? EstimatedPPC,decimal? BookLength,decimal? BookWidth,decimal? BookDepth,decimal? BookWeight)
	    {
		    DeliverySubSubTable item = new DeliverySubSubTable();
		    
            item.DeliveryID = DeliveryID;
            
            item.TitleID = TitleID;
            
            item.Title = Title;
            
            item.Copies = Copies;
            
            item.CurrentStatusID = CurrentStatusID;
            
            item.Remarks = Remarks;
            
            item.CopiesPerCarton = CopiesPerCarton;
            
            item.TotalConsignmentWeight = TotalConsignmentWeight;
            
            item.TotalConsignmentCube = TotalConsignmentCube;
            
            item.CartonLength = CartonLength;
            
            item.CartonDepth = CartonDepth;
            
            item.CartonHeight = CartonHeight;
            
            item.TotalCartons = TotalCartons;
            
            item.CartonWeight = CartonWeight;
            
            item.LastCarton = LastCarton;
            
            item.Jackets = Jackets;
            
            item.FullPallets = FullPallets;
            
            item.CartonsPerFullPallet = CartonsPerFullPallet;
            
            item.PartPallets = PartPallets;
            
            item.CartonsPerPartPallet = CartonsPerPartPallet;
            
            item.ActualPPC = ActualPPC;
            
            item.Ts = Ts;
            
            item.EstimatedPPC = EstimatedPPC;
            
            item.BookLength = BookLength;
            
            item.BookWidth = BookWidth;
            
            item.BookDepth = BookDepth;
            
            item.BookWeight = BookWeight;
            
	    
		    item.Save(UserName);
	    }
    	
	    /// <summary>
	    /// Updates a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
	    public void Update(int SubDeliveryID,int? DeliveryID,int? TitleID,string Title,int? Copies,int? CurrentStatusID,string Remarks,int? CopiesPerCarton,float? TotalConsignmentWeight,float? TotalConsignmentCube,decimal? CartonLength,decimal? CartonDepth,decimal? CartonHeight,int? TotalCartons,float? CartonWeight,float? LastCarton,int? Jackets,int? FullPallets,int? CartonsPerFullPallet,int? PartPallets,int? CartonsPerPartPallet,decimal? ActualPPC,byte[] Ts,decimal? EstimatedPPC,decimal? BookLength,decimal? BookWidth,decimal? BookDepth,decimal? BookWeight)
	    {
		    DeliverySubSubTable item = new DeliverySubSubTable();
	        item.MarkOld();
	        item.IsLoaded = true;
		    
			item.SubDeliveryID = SubDeliveryID;
				
			item.DeliveryID = DeliveryID;
				
			item.TitleID = TitleID;
				
			item.Title = Title;
				
			item.Copies = Copies;
				
			item.CurrentStatusID = CurrentStatusID;
				
			item.Remarks = Remarks;
				
			item.CopiesPerCarton = CopiesPerCarton;
				
			item.TotalConsignmentWeight = TotalConsignmentWeight;
				
			item.TotalConsignmentCube = TotalConsignmentCube;
				
			item.CartonLength = CartonLength;
				
			item.CartonDepth = CartonDepth;
				
			item.CartonHeight = CartonHeight;
				
			item.TotalCartons = TotalCartons;
				
			item.CartonWeight = CartonWeight;
				
			item.LastCarton = LastCarton;
				
			item.Jackets = Jackets;
				
			item.FullPallets = FullPallets;
				
			item.CartonsPerFullPallet = CartonsPerFullPallet;
				
			item.PartPallets = PartPallets;
				
			item.CartonsPerPartPallet = CartonsPerPartPallet;
				
			item.ActualPPC = ActualPPC;
				
			item.Ts = Ts;
				
			item.EstimatedPPC = EstimatedPPC;
				
			item.BookLength = BookLength;
				
			item.BookWidth = BookWidth;
				
			item.BookDepth = BookDepth;
				
			item.BookWeight = BookWeight;
				
	        item.Save(UserName);
	    }
    }
}
