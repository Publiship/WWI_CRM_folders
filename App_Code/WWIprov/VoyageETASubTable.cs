using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DAL.Logistics
{
	/// <summary>
	/// Strongly-typed collection for the VoyageETASubTable class.
	/// </summary>
    [Serializable]
	public partial class VoyageETASubTableCollection : ActiveList<VoyageETASubTable, VoyageETASubTableCollection>
	{	   
		public VoyageETASubTableCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>VoyageETASubTableCollection</returns>
		public VoyageETASubTableCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                VoyageETASubTable o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the VoyageETASubTable table.
	/// </summary>
	[Serializable]
	public partial class VoyageETASubTable : ActiveRecord<VoyageETASubTable>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public VoyageETASubTable()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public VoyageETASubTable(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public VoyageETASubTable(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public VoyageETASubTable(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("VoyageETASubTable", TableType.Table, DataService.GetInstance("WWIprov"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarVoyageETASubID = new TableSchema.TableColumn(schema);
				colvarVoyageETASubID.ColumnName = "VoyageETASubID";
				colvarVoyageETASubID.DataType = DbType.Int32;
				colvarVoyageETASubID.MaxLength = 0;
				colvarVoyageETASubID.AutoIncrement = true;
				colvarVoyageETASubID.IsNullable = false;
				colvarVoyageETASubID.IsPrimaryKey = true;
				colvarVoyageETASubID.IsForeignKey = false;
				colvarVoyageETASubID.IsReadOnly = false;
				colvarVoyageETASubID.DefaultSetting = @"";
				colvarVoyageETASubID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarVoyageETASubID);
				
				TableSchema.TableColumn colvarVoyageID = new TableSchema.TableColumn(schema);
				colvarVoyageID.ColumnName = "VoyageID";
				colvarVoyageID.DataType = DbType.Int32;
				colvarVoyageID.MaxLength = 0;
				colvarVoyageID.AutoIncrement = false;
				colvarVoyageID.IsNullable = true;
				colvarVoyageID.IsPrimaryKey = false;
				colvarVoyageID.IsForeignKey = true;
				colvarVoyageID.IsReadOnly = false;
				colvarVoyageID.DefaultSetting = @"";
				
					colvarVoyageID.ForeignKeyTableName = "VoyageTable";
				schema.Columns.Add(colvarVoyageID);
				
				TableSchema.TableColumn colvarDestinationPortID = new TableSchema.TableColumn(schema);
				colvarDestinationPortID.ColumnName = "DestinationPortID";
				colvarDestinationPortID.DataType = DbType.Int32;
				colvarDestinationPortID.MaxLength = 0;
				colvarDestinationPortID.AutoIncrement = false;
				colvarDestinationPortID.IsNullable = true;
				colvarDestinationPortID.IsPrimaryKey = false;
				colvarDestinationPortID.IsForeignKey = true;
				colvarDestinationPortID.IsReadOnly = false;
				colvarDestinationPortID.DefaultSetting = @"";
				
					colvarDestinationPortID.ForeignKeyTableName = "PortTable";
				schema.Columns.Add(colvarDestinationPortID);
				
				TableSchema.TableColumn colvarEta = new TableSchema.TableColumn(schema);
				colvarEta.ColumnName = "ETA";
				colvarEta.DataType = DbType.DateTime;
				colvarEta.MaxLength = 0;
				colvarEta.AutoIncrement = false;
				colvarEta.IsNullable = true;
				colvarEta.IsPrimaryKey = false;
				colvarEta.IsForeignKey = false;
				colvarEta.IsReadOnly = false;
				colvarEta.DefaultSetting = @"";
				colvarEta.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEta);
				
				TableSchema.TableColumn colvarTs = new TableSchema.TableColumn(schema);
				colvarTs.ColumnName = "TS";
				colvarTs.DataType = DbType.Binary;
				colvarTs.MaxLength = 0;
				colvarTs.AutoIncrement = false;
				colvarTs.IsNullable = true;
				colvarTs.IsPrimaryKey = false;
				colvarTs.IsForeignKey = false;
				colvarTs.IsReadOnly = true;
				colvarTs.DefaultSetting = @"";
				colvarTs.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTs);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["WWIprov"].AddSchema("VoyageETASubTable",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("VoyageETASubID")]
		[Bindable(true)]
		public int VoyageETASubID 
		{
			get { return GetColumnValue<int>(Columns.VoyageETASubID); }
			set { SetColumnValue(Columns.VoyageETASubID, value); }
		}
		  
		[XmlAttribute("VoyageID")]
		[Bindable(true)]
		public int? VoyageID 
		{
			get { return GetColumnValue<int?>(Columns.VoyageID); }
			set { SetColumnValue(Columns.VoyageID, value); }
		}
		  
		[XmlAttribute("DestinationPortID")]
		[Bindable(true)]
		public int? DestinationPortID 
		{
			get { return GetColumnValue<int?>(Columns.DestinationPortID); }
			set { SetColumnValue(Columns.DestinationPortID, value); }
		}
		  
		[XmlAttribute("Eta")]
		[Bindable(true)]
		public DateTime? Eta 
		{
			get { return GetColumnValue<DateTime?>(Columns.Eta); }
			set { SetColumnValue(Columns.Eta, value); }
		}
		  
		[XmlAttribute("Ts")]
		[Bindable(true)]
		public byte[] Ts 
		{
			get { return GetColumnValue<byte[]>(Columns.Ts); }
			set { SetColumnValue(Columns.Ts, value); }
		}
		
		#endregion
		
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a PortTable ActiveRecord object related to this VoyageETASubTable
		/// 
		/// </summary>
		public DAL.Logistics.PortTable PortTable
		{
			get { return DAL.Logistics.PortTable.FetchByID(this.DestinationPortID); }
			set { SetColumnValue("DestinationPortID", value.PortID); }
		}
		
		
		/// <summary>
		/// Returns a VoyageTable ActiveRecord object related to this VoyageETASubTable
		/// 
		/// </summary>
		public DAL.Logistics.VoyageTable VoyageTable
		{
			get { return DAL.Logistics.VoyageTable.FetchByID(this.VoyageID); }
			set { SetColumnValue("VoyageID", value.VoyageID); }
		}
		
		
		#endregion
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int? varVoyageID,int? varDestinationPortID,DateTime? varEta,byte[] varTs)
		{
			VoyageETASubTable item = new VoyageETASubTable();
			
			item.VoyageID = varVoyageID;
			
			item.DestinationPortID = varDestinationPortID;
			
			item.Eta = varEta;
			
			item.Ts = varTs;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varVoyageETASubID,int? varVoyageID,int? varDestinationPortID,DateTime? varEta,byte[] varTs)
		{
			VoyageETASubTable item = new VoyageETASubTable();
			
				item.VoyageETASubID = varVoyageETASubID;
			
				item.VoyageID = varVoyageID;
			
				item.DestinationPortID = varDestinationPortID;
			
				item.Eta = varEta;
			
				item.Ts = varTs;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn VoyageETASubIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn VoyageIDColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn DestinationPortIDColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn EtaColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn TsColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string VoyageETASubID = @"VoyageETASubID";
			 public static string VoyageID = @"VoyageID";
			 public static string DestinationPortID = @"DestinationPortID";
			 public static string Eta = @"ETA";
			 public static string Ts = @"TS";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
