using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DAL.Logistics
{
	/// <summary>
	/// Strongly-typed collection for the PublishipAdvanceCartonTable class.
	/// </summary>
    [Serializable]
	public partial class PublishipAdvanceCartonTableCollection : ActiveList<PublishipAdvanceCartonTable, PublishipAdvanceCartonTableCollection>
	{	   
		public PublishipAdvanceCartonTableCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>PublishipAdvanceCartonTableCollection</returns>
		public PublishipAdvanceCartonTableCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                PublishipAdvanceCartonTable o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the PublishipAdvanceCartonTable table.
	/// </summary>
	[Serializable]
	public partial class PublishipAdvanceCartonTable : ActiveRecord<PublishipAdvanceCartonTable>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public PublishipAdvanceCartonTable()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public PublishipAdvanceCartonTable(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public PublishipAdvanceCartonTable(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public PublishipAdvanceCartonTable(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("PublishipAdvanceCartonTable", TableType.Table, DataService.GetInstance("WWIprov"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarPubAdvCartonID = new TableSchema.TableColumn(schema);
				colvarPubAdvCartonID.ColumnName = "PubAdvCartonID";
				colvarPubAdvCartonID.DataType = DbType.Int32;
				colvarPubAdvCartonID.MaxLength = 0;
				colvarPubAdvCartonID.AutoIncrement = true;
				colvarPubAdvCartonID.IsNullable = false;
				colvarPubAdvCartonID.IsPrimaryKey = true;
				colvarPubAdvCartonID.IsForeignKey = false;
				colvarPubAdvCartonID.IsReadOnly = false;
				colvarPubAdvCartonID.DefaultSetting = @"";
				colvarPubAdvCartonID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPubAdvCartonID);
				
				TableSchema.TableColumn colvarPATitleID = new TableSchema.TableColumn(schema);
				colvarPATitleID.ColumnName = "PATitleID";
				colvarPATitleID.DataType = DbType.Int32;
				colvarPATitleID.MaxLength = 0;
				colvarPATitleID.AutoIncrement = false;
				colvarPATitleID.IsNullable = false;
				colvarPATitleID.IsPrimaryKey = false;
				colvarPATitleID.IsForeignKey = true;
				colvarPATitleID.IsReadOnly = false;
				colvarPATitleID.DefaultSetting = @"";
				
					colvarPATitleID.ForeignKeyTableName = "PublishipAdvanceTitleTable";
				schema.Columns.Add(colvarPATitleID);
				
				TableSchema.TableColumn colvarCartonLength = new TableSchema.TableColumn(schema);
				colvarCartonLength.ColumnName = "CartonLength";
				colvarCartonLength.DataType = DbType.Decimal;
				colvarCartonLength.MaxLength = 0;
				colvarCartonLength.AutoIncrement = false;
				colvarCartonLength.IsNullable = true;
				colvarCartonLength.IsPrimaryKey = false;
				colvarCartonLength.IsForeignKey = false;
				colvarCartonLength.IsReadOnly = false;
				colvarCartonLength.DefaultSetting = @"";
				colvarCartonLength.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCartonLength);
				
				TableSchema.TableColumn colvarCartonWidth = new TableSchema.TableColumn(schema);
				colvarCartonWidth.ColumnName = "CartonWidth";
				colvarCartonWidth.DataType = DbType.Decimal;
				colvarCartonWidth.MaxLength = 0;
				colvarCartonWidth.AutoIncrement = false;
				colvarCartonWidth.IsNullable = true;
				colvarCartonWidth.IsPrimaryKey = false;
				colvarCartonWidth.IsForeignKey = false;
				colvarCartonWidth.IsReadOnly = false;
				colvarCartonWidth.DefaultSetting = @"";
				colvarCartonWidth.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCartonWidth);
				
				TableSchema.TableColumn colvarCartonHeight = new TableSchema.TableColumn(schema);
				colvarCartonHeight.ColumnName = "CartonHeight";
				colvarCartonHeight.DataType = DbType.Decimal;
				colvarCartonHeight.MaxLength = 0;
				colvarCartonHeight.AutoIncrement = false;
				colvarCartonHeight.IsNullable = true;
				colvarCartonHeight.IsPrimaryKey = false;
				colvarCartonHeight.IsForeignKey = false;
				colvarCartonHeight.IsReadOnly = false;
				colvarCartonHeight.DefaultSetting = @"";
				colvarCartonHeight.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCartonHeight);
				
				TableSchema.TableColumn colvarCartonWeight = new TableSchema.TableColumn(schema);
				colvarCartonWeight.ColumnName = "CartonWeight";
				colvarCartonWeight.DataType = DbType.Decimal;
				colvarCartonWeight.MaxLength = 0;
				colvarCartonWeight.AutoIncrement = false;
				colvarCartonWeight.IsNullable = true;
				colvarCartonWeight.IsPrimaryKey = false;
				colvarCartonWeight.IsForeignKey = false;
				colvarCartonWeight.IsReadOnly = false;
				colvarCartonWeight.DefaultSetting = @"";
				colvarCartonWeight.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCartonWeight);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["WWIprov"].AddSchema("PublishipAdvanceCartonTable",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("PubAdvCartonID")]
		[Bindable(true)]
		public int PubAdvCartonID 
		{
			get { return GetColumnValue<int>(Columns.PubAdvCartonID); }
			set { SetColumnValue(Columns.PubAdvCartonID, value); }
		}
		  
		[XmlAttribute("PATitleID")]
		[Bindable(true)]
		public int PATitleID 
		{
			get { return GetColumnValue<int>(Columns.PATitleID); }
			set { SetColumnValue(Columns.PATitleID, value); }
		}
		  
		[XmlAttribute("CartonLength")]
		[Bindable(true)]
		public decimal? CartonLength 
		{
			get { return GetColumnValue<decimal?>(Columns.CartonLength); }
			set { SetColumnValue(Columns.CartonLength, value); }
		}
		  
		[XmlAttribute("CartonWidth")]
		[Bindable(true)]
		public decimal? CartonWidth 
		{
			get { return GetColumnValue<decimal?>(Columns.CartonWidth); }
			set { SetColumnValue(Columns.CartonWidth, value); }
		}
		  
		[XmlAttribute("CartonHeight")]
		[Bindable(true)]
		public decimal? CartonHeight 
		{
			get { return GetColumnValue<decimal?>(Columns.CartonHeight); }
			set { SetColumnValue(Columns.CartonHeight, value); }
		}
		  
		[XmlAttribute("CartonWeight")]
		[Bindable(true)]
		public decimal? CartonWeight 
		{
			get { return GetColumnValue<decimal?>(Columns.CartonWeight); }
			set { SetColumnValue(Columns.CartonWeight, value); }
		}
		
		#endregion
		
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a PublishipAdvanceTitleTable ActiveRecord object related to this PublishipAdvanceCartonTable
		/// 
		/// </summary>
		public DAL.Logistics.PublishipAdvanceTitleTable PublishipAdvanceTitleTable
		{
			get { return DAL.Logistics.PublishipAdvanceTitleTable.FetchByID(this.PATitleID); }
			set { SetColumnValue("PATitleID", value.PATitleID); }
		}
		
		
		#endregion
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int varPATitleID,decimal? varCartonLength,decimal? varCartonWidth,decimal? varCartonHeight,decimal? varCartonWeight)
		{
			PublishipAdvanceCartonTable item = new PublishipAdvanceCartonTable();
			
			item.PATitleID = varPATitleID;
			
			item.CartonLength = varCartonLength;
			
			item.CartonWidth = varCartonWidth;
			
			item.CartonHeight = varCartonHeight;
			
			item.CartonWeight = varCartonWeight;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varPubAdvCartonID,int varPATitleID,decimal? varCartonLength,decimal? varCartonWidth,decimal? varCartonHeight,decimal? varCartonWeight)
		{
			PublishipAdvanceCartonTable item = new PublishipAdvanceCartonTable();
			
				item.PubAdvCartonID = varPubAdvCartonID;
			
				item.PATitleID = varPATitleID;
			
				item.CartonLength = varCartonLength;
			
				item.CartonWidth = varCartonWidth;
			
				item.CartonHeight = varCartonHeight;
			
				item.CartonWeight = varCartonWeight;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn PubAdvCartonIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn PATitleIDColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn CartonLengthColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn CartonWidthColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn CartonHeightColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn CartonWeightColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string PubAdvCartonID = @"PubAdvCartonID";
			 public static string PATitleID = @"PATitleID";
			 public static string CartonLength = @"CartonLength";
			 public static string CartonWidth = @"CartonWidth";
			 public static string CartonHeight = @"CartonHeight";
			 public static string CartonWeight = @"CartonWeight";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
