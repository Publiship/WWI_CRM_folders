using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DAL.Logistics
{
	/// <summary>
	/// Strongly-typed collection for the InvoiceTable class.
	/// </summary>
    [Serializable]
	public partial class InvoiceTableCollection : ActiveList<InvoiceTable, InvoiceTableCollection>
	{	   
		public InvoiceTableCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>InvoiceTableCollection</returns>
		public InvoiceTableCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                InvoiceTable o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the InvoiceTable table.
	/// </summary>
	[Serializable]
	public partial class InvoiceTable : ActiveRecord<InvoiceTable>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public InvoiceTable()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public InvoiceTable(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public InvoiceTable(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public InvoiceTable(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("InvoiceTable", TableType.Table, DataService.GetInstance("WWIprov"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarInvoiceNumber = new TableSchema.TableColumn(schema);
				colvarInvoiceNumber.ColumnName = "InvoiceNumber";
				colvarInvoiceNumber.DataType = DbType.Int32;
				colvarInvoiceNumber.MaxLength = 0;
				colvarInvoiceNumber.AutoIncrement = true;
				colvarInvoiceNumber.IsNullable = false;
				colvarInvoiceNumber.IsPrimaryKey = true;
				colvarInvoiceNumber.IsForeignKey = false;
				colvarInvoiceNumber.IsReadOnly = false;
				colvarInvoiceNumber.DefaultSetting = @"";
				colvarInvoiceNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInvoiceNumber);
				
				TableSchema.TableColumn colvarOrderNumber = new TableSchema.TableColumn(schema);
				colvarOrderNumber.ColumnName = "OrderNumber";
				colvarOrderNumber.DataType = DbType.Int32;
				colvarOrderNumber.MaxLength = 0;
				colvarOrderNumber.AutoIncrement = false;
				colvarOrderNumber.IsNullable = true;
				colvarOrderNumber.IsPrimaryKey = false;
				colvarOrderNumber.IsForeignKey = false;
				colvarOrderNumber.IsReadOnly = false;
				colvarOrderNumber.DefaultSetting = @"";
				colvarOrderNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOrderNumber);
				
				TableSchema.TableColumn colvarDepartmentID = new TableSchema.TableColumn(schema);
				colvarDepartmentID.ColumnName = "DepartmentID";
				colvarDepartmentID.DataType = DbType.Int32;
				colvarDepartmentID.MaxLength = 0;
				colvarDepartmentID.AutoIncrement = false;
				colvarDepartmentID.IsNullable = true;
				colvarDepartmentID.IsPrimaryKey = false;
				colvarDepartmentID.IsForeignKey = false;
				colvarDepartmentID.IsReadOnly = false;
				colvarDepartmentID.DefaultSetting = @"";
				colvarDepartmentID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDepartmentID);
				
				TableSchema.TableColumn colvarInvoiceDate = new TableSchema.TableColumn(schema);
				colvarInvoiceDate.ColumnName = "InvoiceDate";
				colvarInvoiceDate.DataType = DbType.DateTime;
				colvarInvoiceDate.MaxLength = 0;
				colvarInvoiceDate.AutoIncrement = false;
				colvarInvoiceDate.IsNullable = true;
				colvarInvoiceDate.IsPrimaryKey = false;
				colvarInvoiceDate.IsForeignKey = false;
				colvarInvoiceDate.IsReadOnly = false;
				colvarInvoiceDate.DefaultSetting = @"";
				colvarInvoiceDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInvoiceDate);
				
				TableSchema.TableColumn colvarCustomer = new TableSchema.TableColumn(schema);
				colvarCustomer.ColumnName = "Customer";
				colvarCustomer.DataType = DbType.Int32;
				colvarCustomer.MaxLength = 0;
				colvarCustomer.AutoIncrement = false;
				colvarCustomer.IsNullable = true;
				colvarCustomer.IsPrimaryKey = false;
				colvarCustomer.IsForeignKey = false;
				colvarCustomer.IsReadOnly = false;
				colvarCustomer.DefaultSetting = @"";
				colvarCustomer.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomer);
				
				TableSchema.TableColumn colvarInvoiceCurrencyID = new TableSchema.TableColumn(schema);
				colvarInvoiceCurrencyID.ColumnName = "InvoiceCurrencyID";
				colvarInvoiceCurrencyID.DataType = DbType.Single;
				colvarInvoiceCurrencyID.MaxLength = 0;
				colvarInvoiceCurrencyID.AutoIncrement = false;
				colvarInvoiceCurrencyID.IsNullable = true;
				colvarInvoiceCurrencyID.IsPrimaryKey = false;
				colvarInvoiceCurrencyID.IsForeignKey = false;
				colvarInvoiceCurrencyID.IsReadOnly = false;
				colvarInvoiceCurrencyID.DefaultSetting = @"";
				colvarInvoiceCurrencyID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInvoiceCurrencyID);
				
				TableSchema.TableColumn colvarDescription = new TableSchema.TableColumn(schema);
				colvarDescription.ColumnName = "Description";
				colvarDescription.DataType = DbType.String;
				colvarDescription.MaxLength = 200;
				colvarDescription.AutoIncrement = false;
				colvarDescription.IsNullable = true;
				colvarDescription.IsPrimaryKey = false;
				colvarDescription.IsForeignKey = false;
				colvarDescription.IsReadOnly = false;
				colvarDescription.DefaultSetting = @"";
				colvarDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDescription);
				
				TableSchema.TableColumn colvarExchangeRate = new TableSchema.TableColumn(schema);
				colvarExchangeRate.ColumnName = "ExchangeRate";
				colvarExchangeRate.DataType = DbType.Currency;
				colvarExchangeRate.MaxLength = 0;
				colvarExchangeRate.AutoIncrement = false;
				colvarExchangeRate.IsNullable = true;
				colvarExchangeRate.IsPrimaryKey = false;
				colvarExchangeRate.IsForeignKey = false;
				colvarExchangeRate.IsReadOnly = false;
				colvarExchangeRate.DefaultSetting = @"";
				colvarExchangeRate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarExchangeRate);
				
				TableSchema.TableColumn colvarNotes = new TableSchema.TableColumn(schema);
				colvarNotes.ColumnName = "Notes";
				colvarNotes.DataType = DbType.String;
				colvarNotes.MaxLength = 200;
				colvarNotes.AutoIncrement = false;
				colvarNotes.IsNullable = true;
				colvarNotes.IsPrimaryKey = false;
				colvarNotes.IsForeignKey = false;
				colvarNotes.IsReadOnly = false;
				colvarNotes.DefaultSetting = @"";
				colvarNotes.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNotes);
				
				TableSchema.TableColumn colvarCrosstrade = new TableSchema.TableColumn(schema);
				colvarCrosstrade.ColumnName = "Crosstrade";
				colvarCrosstrade.DataType = DbType.Boolean;
				colvarCrosstrade.MaxLength = 0;
				colvarCrosstrade.AutoIncrement = false;
				colvarCrosstrade.IsNullable = true;
				colvarCrosstrade.IsPrimaryKey = false;
				colvarCrosstrade.IsForeignKey = false;
				colvarCrosstrade.IsReadOnly = false;
				colvarCrosstrade.DefaultSetting = @"";
				colvarCrosstrade.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCrosstrade);
				
				TableSchema.TableColumn colvarPaymentDueDate = new TableSchema.TableColumn(schema);
				colvarPaymentDueDate.ColumnName = "PaymentDueDate";
				colvarPaymentDueDate.DataType = DbType.DateTime;
				colvarPaymentDueDate.MaxLength = 0;
				colvarPaymentDueDate.AutoIncrement = false;
				colvarPaymentDueDate.IsNullable = true;
				colvarPaymentDueDate.IsPrimaryKey = false;
				colvarPaymentDueDate.IsForeignKey = false;
				colvarPaymentDueDate.IsReadOnly = false;
				colvarPaymentDueDate.DefaultSetting = @"";
				colvarPaymentDueDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPaymentDueDate);
				
				TableSchema.TableColumn colvarInvoiceRaisedBy = new TableSchema.TableColumn(schema);
				colvarInvoiceRaisedBy.ColumnName = "InvoiceRaisedBy";
				colvarInvoiceRaisedBy.DataType = DbType.Int32;
				colvarInvoiceRaisedBy.MaxLength = 0;
				colvarInvoiceRaisedBy.AutoIncrement = false;
				colvarInvoiceRaisedBy.IsNullable = true;
				colvarInvoiceRaisedBy.IsPrimaryKey = false;
				colvarInvoiceRaisedBy.IsForeignKey = false;
				colvarInvoiceRaisedBy.IsReadOnly = false;
				colvarInvoiceRaisedBy.DefaultSetting = @"";
				colvarInvoiceRaisedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInvoiceRaisedBy);
				
				TableSchema.TableColumn colvarInvoiceRaised = new TableSchema.TableColumn(schema);
				colvarInvoiceRaised.ColumnName = "InvoiceRaised";
				colvarInvoiceRaised.DataType = DbType.DateTime;
				colvarInvoiceRaised.MaxLength = 0;
				colvarInvoiceRaised.AutoIncrement = false;
				colvarInvoiceRaised.IsNullable = true;
				colvarInvoiceRaised.IsPrimaryKey = false;
				colvarInvoiceRaised.IsForeignKey = false;
				colvarInvoiceRaised.IsReadOnly = false;
				colvarInvoiceRaised.DefaultSetting = @"";
				colvarInvoiceRaised.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInvoiceRaised);
				
				TableSchema.TableColumn colvarInsuranceValue = new TableSchema.TableColumn(schema);
				colvarInsuranceValue.ColumnName = "InsuranceValue";
				colvarInsuranceValue.DataType = DbType.Decimal;
				colvarInsuranceValue.MaxLength = 0;
				colvarInsuranceValue.AutoIncrement = false;
				colvarInsuranceValue.IsNullable = true;
				colvarInsuranceValue.IsPrimaryKey = false;
				colvarInsuranceValue.IsForeignKey = false;
				colvarInsuranceValue.IsReadOnly = false;
				colvarInsuranceValue.DefaultSetting = @"";
				colvarInsuranceValue.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInsuranceValue);
				
				TableSchema.TableColumn colvarContact = new TableSchema.TableColumn(schema);
				colvarContact.ColumnName = "Contact";
				colvarContact.DataType = DbType.String;
				colvarContact.MaxLength = 25;
				colvarContact.AutoIncrement = false;
				colvarContact.IsNullable = true;
				colvarContact.IsPrimaryKey = false;
				colvarContact.IsForeignKey = false;
				colvarContact.IsReadOnly = false;
				colvarContact.DefaultSetting = @"";
				colvarContact.ForeignKeyTableName = "";
				schema.Columns.Add(colvarContact);
				
				TableSchema.TableColumn colvarOriginalProfitMargin = new TableSchema.TableColumn(schema);
				colvarOriginalProfitMargin.ColumnName = "OriginalProfitMargin";
				colvarOriginalProfitMargin.DataType = DbType.Decimal;
				colvarOriginalProfitMargin.MaxLength = 0;
				colvarOriginalProfitMargin.AutoIncrement = false;
				colvarOriginalProfitMargin.IsNullable = true;
				colvarOriginalProfitMargin.IsPrimaryKey = false;
				colvarOriginalProfitMargin.IsForeignKey = false;
				colvarOriginalProfitMargin.IsReadOnly = false;
				colvarOriginalProfitMargin.DefaultSetting = @"";
				colvarOriginalProfitMargin.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOriginalProfitMargin);
				
				TableSchema.TableColumn colvarOriginalProfitDate = new TableSchema.TableColumn(schema);
				colvarOriginalProfitDate.ColumnName = "OriginalProfitDate";
				colvarOriginalProfitDate.DataType = DbType.DateTime;
				colvarOriginalProfitDate.MaxLength = 0;
				colvarOriginalProfitDate.AutoIncrement = false;
				colvarOriginalProfitDate.IsNullable = true;
				colvarOriginalProfitDate.IsPrimaryKey = false;
				colvarOriginalProfitDate.IsForeignKey = false;
				colvarOriginalProfitDate.IsReadOnly = false;
				colvarOriginalProfitDate.DefaultSetting = @"";
				colvarOriginalProfitDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOriginalProfitDate);
				
				TableSchema.TableColumn colvarDateQueryRaised = new TableSchema.TableColumn(schema);
				colvarDateQueryRaised.ColumnName = "DateQueryRaised";
				colvarDateQueryRaised.DataType = DbType.DateTime;
				colvarDateQueryRaised.MaxLength = 0;
				colvarDateQueryRaised.AutoIncrement = false;
				colvarDateQueryRaised.IsNullable = true;
				colvarDateQueryRaised.IsPrimaryKey = false;
				colvarDateQueryRaised.IsForeignKey = false;
				colvarDateQueryRaised.IsReadOnly = false;
				colvarDateQueryRaised.DefaultSetting = @"";
				colvarDateQueryRaised.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDateQueryRaised);
				
				TableSchema.TableColumn colvarDetailsOfQuery = new TableSchema.TableColumn(schema);
				colvarDetailsOfQuery.ColumnName = "DetailsOfQuery";
				colvarDetailsOfQuery.DataType = DbType.String;
				colvarDetailsOfQuery.MaxLength = 1073741823;
				colvarDetailsOfQuery.AutoIncrement = false;
				colvarDetailsOfQuery.IsNullable = true;
				colvarDetailsOfQuery.IsPrimaryKey = false;
				colvarDetailsOfQuery.IsForeignKey = false;
				colvarDetailsOfQuery.IsReadOnly = false;
				colvarDetailsOfQuery.DefaultSetting = @"";
				colvarDetailsOfQuery.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDetailsOfQuery);
				
				TableSchema.TableColumn colvarResolution = new TableSchema.TableColumn(schema);
				colvarResolution.ColumnName = "Resolution";
				colvarResolution.DataType = DbType.String;
				colvarResolution.MaxLength = 1073741823;
				colvarResolution.AutoIncrement = false;
				colvarResolution.IsNullable = true;
				colvarResolution.IsPrimaryKey = false;
				colvarResolution.IsForeignKey = false;
				colvarResolution.IsReadOnly = false;
				colvarResolution.DefaultSetting = @"";
				colvarResolution.ForeignKeyTableName = "";
				schema.Columns.Add(colvarResolution);
				
				TableSchema.TableColumn colvarConfirmedCompleted = new TableSchema.TableColumn(schema);
				colvarConfirmedCompleted.ColumnName = "ConfirmedCompleted";
				colvarConfirmedCompleted.DataType = DbType.Int32;
				colvarConfirmedCompleted.MaxLength = 0;
				colvarConfirmedCompleted.AutoIncrement = false;
				colvarConfirmedCompleted.IsNullable = true;
				colvarConfirmedCompleted.IsPrimaryKey = false;
				colvarConfirmedCompleted.IsForeignKey = false;
				colvarConfirmedCompleted.IsReadOnly = false;
				colvarConfirmedCompleted.DefaultSetting = @"";
				colvarConfirmedCompleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarConfirmedCompleted);
				
				TableSchema.TableColumn colvarCompletionDate = new TableSchema.TableColumn(schema);
				colvarCompletionDate.ColumnName = "CompletionDate";
				colvarCompletionDate.DataType = DbType.DateTime;
				colvarCompletionDate.MaxLength = 0;
				colvarCompletionDate.AutoIncrement = false;
				colvarCompletionDate.IsNullable = true;
				colvarCompletionDate.IsPrimaryKey = false;
				colvarCompletionDate.IsForeignKey = false;
				colvarCompletionDate.IsReadOnly = false;
				colvarCompletionDate.DefaultSetting = @"";
				colvarCompletionDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCompletionDate);
				
				TableSchema.TableColumn colvarController = new TableSchema.TableColumn(schema);
				colvarController.ColumnName = "Controller";
				colvarController.DataType = DbType.Int32;
				colvarController.MaxLength = 0;
				colvarController.AutoIncrement = false;
				colvarController.IsNullable = true;
				colvarController.IsPrimaryKey = false;
				colvarController.IsForeignKey = false;
				colvarController.IsReadOnly = false;
				colvarController.DefaultSetting = @"";
				colvarController.ForeignKeyTableName = "";
				schema.Columns.Add(colvarController);
				
				TableSchema.TableColumn colvarLossApproved = new TableSchema.TableColumn(schema);
				colvarLossApproved.ColumnName = "LossApproved";
				colvarLossApproved.DataType = DbType.String;
				colvarLossApproved.MaxLength = 50;
				colvarLossApproved.AutoIncrement = false;
				colvarLossApproved.IsNullable = true;
				colvarLossApproved.IsPrimaryKey = false;
				colvarLossApproved.IsForeignKey = false;
				colvarLossApproved.IsReadOnly = false;
				colvarLossApproved.DefaultSetting = @"";
				colvarLossApproved.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLossApproved);
				
				TableSchema.TableColumn colvarLossApprovedDate = new TableSchema.TableColumn(schema);
				colvarLossApprovedDate.ColumnName = "LossApprovedDate";
				colvarLossApprovedDate.DataType = DbType.DateTime;
				colvarLossApprovedDate.MaxLength = 0;
				colvarLossApprovedDate.AutoIncrement = false;
				colvarLossApprovedDate.IsNullable = true;
				colvarLossApprovedDate.IsPrimaryKey = false;
				colvarLossApprovedDate.IsForeignKey = false;
				colvarLossApprovedDate.IsReadOnly = false;
				colvarLossApprovedDate.DefaultSetting = @"";
				colvarLossApprovedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLossApprovedDate);
				
				TableSchema.TableColumn colvarTscol = new TableSchema.TableColumn(schema);
				colvarTscol.ColumnName = "tscol";
				colvarTscol.DataType = DbType.Binary;
				colvarTscol.MaxLength = 0;
				colvarTscol.AutoIncrement = false;
				colvarTscol.IsNullable = false;
				colvarTscol.IsPrimaryKey = false;
				colvarTscol.IsForeignKey = false;
				colvarTscol.IsReadOnly = true;
				colvarTscol.DefaultSetting = @"";
				colvarTscol.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTscol);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["WWIprov"].AddSchema("InvoiceTable",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("InvoiceNumber")]
		[Bindable(true)]
		public int InvoiceNumber 
		{
			get { return GetColumnValue<int>(Columns.InvoiceNumber); }
			set { SetColumnValue(Columns.InvoiceNumber, value); }
		}
		  
		[XmlAttribute("OrderNumber")]
		[Bindable(true)]
		public int? OrderNumber 
		{
			get { return GetColumnValue<int?>(Columns.OrderNumber); }
			set { SetColumnValue(Columns.OrderNumber, value); }
		}
		  
		[XmlAttribute("DepartmentID")]
		[Bindable(true)]
		public int? DepartmentID 
		{
			get { return GetColumnValue<int?>(Columns.DepartmentID); }
			set { SetColumnValue(Columns.DepartmentID, value); }
		}
		  
		[XmlAttribute("InvoiceDate")]
		[Bindable(true)]
		public DateTime? InvoiceDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.InvoiceDate); }
			set { SetColumnValue(Columns.InvoiceDate, value); }
		}
		  
		[XmlAttribute("Customer")]
		[Bindable(true)]
		public int? Customer 
		{
			get { return GetColumnValue<int?>(Columns.Customer); }
			set { SetColumnValue(Columns.Customer, value); }
		}
		  
		[XmlAttribute("InvoiceCurrencyID")]
		[Bindable(true)]
		public float? InvoiceCurrencyID 
		{
			get { return GetColumnValue<float?>(Columns.InvoiceCurrencyID); }
			set { SetColumnValue(Columns.InvoiceCurrencyID, value); }
		}
		  
		[XmlAttribute("Description")]
		[Bindable(true)]
		public string Description 
		{
			get { return GetColumnValue<string>(Columns.Description); }
			set { SetColumnValue(Columns.Description, value); }
		}
		  
		[XmlAttribute("ExchangeRate")]
		[Bindable(true)]
		public decimal? ExchangeRate 
		{
			get { return GetColumnValue<decimal?>(Columns.ExchangeRate); }
			set { SetColumnValue(Columns.ExchangeRate, value); }
		}
		  
		[XmlAttribute("Notes")]
		[Bindable(true)]
		public string Notes 
		{
			get { return GetColumnValue<string>(Columns.Notes); }
			set { SetColumnValue(Columns.Notes, value); }
		}
		  
		[XmlAttribute("Crosstrade")]
		[Bindable(true)]
		public bool? Crosstrade 
		{
			get { return GetColumnValue<bool?>(Columns.Crosstrade); }
			set { SetColumnValue(Columns.Crosstrade, value); }
		}
		  
		[XmlAttribute("PaymentDueDate")]
		[Bindable(true)]
		public DateTime? PaymentDueDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.PaymentDueDate); }
			set { SetColumnValue(Columns.PaymentDueDate, value); }
		}
		  
		[XmlAttribute("InvoiceRaisedBy")]
		[Bindable(true)]
		public int? InvoiceRaisedBy 
		{
			get { return GetColumnValue<int?>(Columns.InvoiceRaisedBy); }
			set { SetColumnValue(Columns.InvoiceRaisedBy, value); }
		}
		  
		[XmlAttribute("InvoiceRaised")]
		[Bindable(true)]
		public DateTime? InvoiceRaised 
		{
			get { return GetColumnValue<DateTime?>(Columns.InvoiceRaised); }
			set { SetColumnValue(Columns.InvoiceRaised, value); }
		}
		  
		[XmlAttribute("InsuranceValue")]
		[Bindable(true)]
		public decimal? InsuranceValue 
		{
			get { return GetColumnValue<decimal?>(Columns.InsuranceValue); }
			set { SetColumnValue(Columns.InsuranceValue, value); }
		}
		  
		[XmlAttribute("Contact")]
		[Bindable(true)]
		public string Contact 
		{
			get { return GetColumnValue<string>(Columns.Contact); }
			set { SetColumnValue(Columns.Contact, value); }
		}
		  
		[XmlAttribute("OriginalProfitMargin")]
		[Bindable(true)]
		public decimal? OriginalProfitMargin 
		{
			get { return GetColumnValue<decimal?>(Columns.OriginalProfitMargin); }
			set { SetColumnValue(Columns.OriginalProfitMargin, value); }
		}
		  
		[XmlAttribute("OriginalProfitDate")]
		[Bindable(true)]
		public DateTime? OriginalProfitDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.OriginalProfitDate); }
			set { SetColumnValue(Columns.OriginalProfitDate, value); }
		}
		  
		[XmlAttribute("DateQueryRaised")]
		[Bindable(true)]
		public DateTime? DateQueryRaised 
		{
			get { return GetColumnValue<DateTime?>(Columns.DateQueryRaised); }
			set { SetColumnValue(Columns.DateQueryRaised, value); }
		}
		  
		[XmlAttribute("DetailsOfQuery")]
		[Bindable(true)]
		public string DetailsOfQuery 
		{
			get { return GetColumnValue<string>(Columns.DetailsOfQuery); }
			set { SetColumnValue(Columns.DetailsOfQuery, value); }
		}
		  
		[XmlAttribute("Resolution")]
		[Bindable(true)]
		public string Resolution 
		{
			get { return GetColumnValue<string>(Columns.Resolution); }
			set { SetColumnValue(Columns.Resolution, value); }
		}
		  
		[XmlAttribute("ConfirmedCompleted")]
		[Bindable(true)]
		public int? ConfirmedCompleted 
		{
			get { return GetColumnValue<int?>(Columns.ConfirmedCompleted); }
			set { SetColumnValue(Columns.ConfirmedCompleted, value); }
		}
		  
		[XmlAttribute("CompletionDate")]
		[Bindable(true)]
		public DateTime? CompletionDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.CompletionDate); }
			set { SetColumnValue(Columns.CompletionDate, value); }
		}
		  
		[XmlAttribute("Controller")]
		[Bindable(true)]
		public int? Controller 
		{
			get { return GetColumnValue<int?>(Columns.Controller); }
			set { SetColumnValue(Columns.Controller, value); }
		}
		  
		[XmlAttribute("LossApproved")]
		[Bindable(true)]
		public string LossApproved 
		{
			get { return GetColumnValue<string>(Columns.LossApproved); }
			set { SetColumnValue(Columns.LossApproved, value); }
		}
		  
		[XmlAttribute("LossApprovedDate")]
		[Bindable(true)]
		public DateTime? LossApprovedDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.LossApprovedDate); }
			set { SetColumnValue(Columns.LossApprovedDate, value); }
		}
		  
		[XmlAttribute("Tscol")]
		[Bindable(true)]
		public byte[] Tscol 
		{
			get { return GetColumnValue<byte[]>(Columns.Tscol); }
			set { SetColumnValue(Columns.Tscol, value); }
		}
		
		#endregion
		
		
		#region PrimaryKey Methods		
		
        protected override void SetPrimaryKey(object oValue)
        {
            base.SetPrimaryKey(oValue);
            
            SetPKValues();
        }
        
		
		public DAL.Logistics.InvoiceTableAuditCollection InvoiceTableAuditRecords()
		{
			return new DAL.Logistics.InvoiceTableAuditCollection().Where(InvoiceTableAudit.Columns.InvoiceNumber, InvoiceNumber).Load();
		}
		public DAL.Logistics.PurchaseTablexCollection PurchaseTablexRecords()
		{
			return new DAL.Logistics.PurchaseTablexCollection().Where(PurchaseTablex.Columns.InvoiceNumber, InvoiceNumber).Load();
		}
		#endregion
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int? varOrderNumber,int? varDepartmentID,DateTime? varInvoiceDate,int? varCustomer,float? varInvoiceCurrencyID,string varDescription,decimal? varExchangeRate,string varNotes,bool? varCrosstrade,DateTime? varPaymentDueDate,int? varInvoiceRaisedBy,DateTime? varInvoiceRaised,decimal? varInsuranceValue,string varContact,decimal? varOriginalProfitMargin,DateTime? varOriginalProfitDate,DateTime? varDateQueryRaised,string varDetailsOfQuery,string varResolution,int? varConfirmedCompleted,DateTime? varCompletionDate,int? varController,string varLossApproved,DateTime? varLossApprovedDate,byte[] varTscol)
		{
			InvoiceTable item = new InvoiceTable();
			
			item.OrderNumber = varOrderNumber;
			
			item.DepartmentID = varDepartmentID;
			
			item.InvoiceDate = varInvoiceDate;
			
			item.Customer = varCustomer;
			
			item.InvoiceCurrencyID = varInvoiceCurrencyID;
			
			item.Description = varDescription;
			
			item.ExchangeRate = varExchangeRate;
			
			item.Notes = varNotes;
			
			item.Crosstrade = varCrosstrade;
			
			item.PaymentDueDate = varPaymentDueDate;
			
			item.InvoiceRaisedBy = varInvoiceRaisedBy;
			
			item.InvoiceRaised = varInvoiceRaised;
			
			item.InsuranceValue = varInsuranceValue;
			
			item.Contact = varContact;
			
			item.OriginalProfitMargin = varOriginalProfitMargin;
			
			item.OriginalProfitDate = varOriginalProfitDate;
			
			item.DateQueryRaised = varDateQueryRaised;
			
			item.DetailsOfQuery = varDetailsOfQuery;
			
			item.Resolution = varResolution;
			
			item.ConfirmedCompleted = varConfirmedCompleted;
			
			item.CompletionDate = varCompletionDate;
			
			item.Controller = varController;
			
			item.LossApproved = varLossApproved;
			
			item.LossApprovedDate = varLossApprovedDate;
			
			item.Tscol = varTscol;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varInvoiceNumber,int? varOrderNumber,int? varDepartmentID,DateTime? varInvoiceDate,int? varCustomer,float? varInvoiceCurrencyID,string varDescription,decimal? varExchangeRate,string varNotes,bool? varCrosstrade,DateTime? varPaymentDueDate,int? varInvoiceRaisedBy,DateTime? varInvoiceRaised,decimal? varInsuranceValue,string varContact,decimal? varOriginalProfitMargin,DateTime? varOriginalProfitDate,DateTime? varDateQueryRaised,string varDetailsOfQuery,string varResolution,int? varConfirmedCompleted,DateTime? varCompletionDate,int? varController,string varLossApproved,DateTime? varLossApprovedDate,byte[] varTscol)
		{
			InvoiceTable item = new InvoiceTable();
			
				item.InvoiceNumber = varInvoiceNumber;
			
				item.OrderNumber = varOrderNumber;
			
				item.DepartmentID = varDepartmentID;
			
				item.InvoiceDate = varInvoiceDate;
			
				item.Customer = varCustomer;
			
				item.InvoiceCurrencyID = varInvoiceCurrencyID;
			
				item.Description = varDescription;
			
				item.ExchangeRate = varExchangeRate;
			
				item.Notes = varNotes;
			
				item.Crosstrade = varCrosstrade;
			
				item.PaymentDueDate = varPaymentDueDate;
			
				item.InvoiceRaisedBy = varInvoiceRaisedBy;
			
				item.InvoiceRaised = varInvoiceRaised;
			
				item.InsuranceValue = varInsuranceValue;
			
				item.Contact = varContact;
			
				item.OriginalProfitMargin = varOriginalProfitMargin;
			
				item.OriginalProfitDate = varOriginalProfitDate;
			
				item.DateQueryRaised = varDateQueryRaised;
			
				item.DetailsOfQuery = varDetailsOfQuery;
			
				item.Resolution = varResolution;
			
				item.ConfirmedCompleted = varConfirmedCompleted;
			
				item.CompletionDate = varCompletionDate;
			
				item.Controller = varController;
			
				item.LossApproved = varLossApproved;
			
				item.LossApprovedDate = varLossApprovedDate;
			
				item.Tscol = varTscol;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn InvoiceNumberColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn OrderNumberColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn DepartmentIDColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn InvoiceDateColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn CustomerColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn InvoiceCurrencyIDColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn DescriptionColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn ExchangeRateColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn NotesColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn CrosstradeColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn PaymentDueDateColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn InvoiceRaisedByColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn InvoiceRaisedColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn InsuranceValueColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn ContactColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn OriginalProfitMarginColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        public static TableSchema.TableColumn OriginalProfitDateColumn
        {
            get { return Schema.Columns[16]; }
        }
        
        
        
        public static TableSchema.TableColumn DateQueryRaisedColumn
        {
            get { return Schema.Columns[17]; }
        }
        
        
        
        public static TableSchema.TableColumn DetailsOfQueryColumn
        {
            get { return Schema.Columns[18]; }
        }
        
        
        
        public static TableSchema.TableColumn ResolutionColumn
        {
            get { return Schema.Columns[19]; }
        }
        
        
        
        public static TableSchema.TableColumn ConfirmedCompletedColumn
        {
            get { return Schema.Columns[20]; }
        }
        
        
        
        public static TableSchema.TableColumn CompletionDateColumn
        {
            get { return Schema.Columns[21]; }
        }
        
        
        
        public static TableSchema.TableColumn ControllerColumn
        {
            get { return Schema.Columns[22]; }
        }
        
        
        
        public static TableSchema.TableColumn LossApprovedColumn
        {
            get { return Schema.Columns[23]; }
        }
        
        
        
        public static TableSchema.TableColumn LossApprovedDateColumn
        {
            get { return Schema.Columns[24]; }
        }
        
        
        
        public static TableSchema.TableColumn TscolColumn
        {
            get { return Schema.Columns[25]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string InvoiceNumber = @"InvoiceNumber";
			 public static string OrderNumber = @"OrderNumber";
			 public static string DepartmentID = @"DepartmentID";
			 public static string InvoiceDate = @"InvoiceDate";
			 public static string Customer = @"Customer";
			 public static string InvoiceCurrencyID = @"InvoiceCurrencyID";
			 public static string Description = @"Description";
			 public static string ExchangeRate = @"ExchangeRate";
			 public static string Notes = @"Notes";
			 public static string Crosstrade = @"Crosstrade";
			 public static string PaymentDueDate = @"PaymentDueDate";
			 public static string InvoiceRaisedBy = @"InvoiceRaisedBy";
			 public static string InvoiceRaised = @"InvoiceRaised";
			 public static string InsuranceValue = @"InsuranceValue";
			 public static string Contact = @"Contact";
			 public static string OriginalProfitMargin = @"OriginalProfitMargin";
			 public static string OriginalProfitDate = @"OriginalProfitDate";
			 public static string DateQueryRaised = @"DateQueryRaised";
			 public static string DetailsOfQuery = @"DetailsOfQuery";
			 public static string Resolution = @"Resolution";
			 public static string ConfirmedCompleted = @"ConfirmedCompleted";
			 public static string CompletionDate = @"CompletionDate";
			 public static string Controller = @"Controller";
			 public static string LossApproved = @"LossApproved";
			 public static string LossApprovedDate = @"LossApprovedDate";
			 public static string Tscol = @"tscol";
						
		}
		#endregion
		
		#region Update PK Collections
		
        public void SetPKValues()
        {
}
        #endregion
    
        #region Deep Save
		
        public void DeepSave()
        {
            Save();
            
}
        #endregion
	}
}
