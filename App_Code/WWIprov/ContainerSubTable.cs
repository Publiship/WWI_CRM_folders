using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DAL.Logistics
{
	/// <summary>
	/// Strongly-typed collection for the ContainerSubTable class.
	/// </summary>
    [Serializable]
	public partial class ContainerSubTableCollection : ActiveList<ContainerSubTable, ContainerSubTableCollection>
	{	   
		public ContainerSubTableCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>ContainerSubTableCollection</returns>
		public ContainerSubTableCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                ContainerSubTable o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the ContainerSubTable table.
	/// </summary>
	[Serializable]
	public partial class ContainerSubTable : ActiveRecord<ContainerSubTable>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public ContainerSubTable()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public ContainerSubTable(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public ContainerSubTable(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public ContainerSubTable(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("ContainerSubTable", TableType.Table, DataService.GetInstance("WWIprov"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarContainerSubID = new TableSchema.TableColumn(schema);
				colvarContainerSubID.ColumnName = "ContainerSubID";
				colvarContainerSubID.DataType = DbType.Int32;
				colvarContainerSubID.MaxLength = 0;
				colvarContainerSubID.AutoIncrement = true;
				colvarContainerSubID.IsNullable = false;
				colvarContainerSubID.IsPrimaryKey = true;
				colvarContainerSubID.IsForeignKey = false;
				colvarContainerSubID.IsReadOnly = false;
				colvarContainerSubID.DefaultSetting = @"";
				colvarContainerSubID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarContainerSubID);
				
				TableSchema.TableColumn colvarContainerID = new TableSchema.TableColumn(schema);
				colvarContainerID.ColumnName = "ContainerID";
				colvarContainerID.DataType = DbType.Int32;
				colvarContainerID.MaxLength = 0;
				colvarContainerID.AutoIncrement = false;
				colvarContainerID.IsNullable = true;
				colvarContainerID.IsPrimaryKey = false;
				colvarContainerID.IsForeignKey = false;
				colvarContainerID.IsReadOnly = false;
				colvarContainerID.DefaultSetting = @"";
				colvarContainerID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarContainerID);
				
				TableSchema.TableColumn colvarOrderID = new TableSchema.TableColumn(schema);
				colvarOrderID.ColumnName = "OrderID";
				colvarOrderID.DataType = DbType.Int32;
				colvarOrderID.MaxLength = 0;
				colvarOrderID.AutoIncrement = false;
				colvarOrderID.IsNullable = true;
				colvarOrderID.IsPrimaryKey = false;
				colvarOrderID.IsForeignKey = false;
				colvarOrderID.IsReadOnly = false;
				colvarOrderID.DefaultSetting = @"";
				colvarOrderID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOrderID);
				
				TableSchema.TableColumn colvarOrderNumber = new TableSchema.TableColumn(schema);
				colvarOrderNumber.ColumnName = "OrderNumber";
				colvarOrderNumber.DataType = DbType.Int32;
				colvarOrderNumber.MaxLength = 0;
				colvarOrderNumber.AutoIncrement = false;
				colvarOrderNumber.IsNullable = true;
				colvarOrderNumber.IsPrimaryKey = false;
				colvarOrderNumber.IsForeignKey = false;
				colvarOrderNumber.IsReadOnly = false;
				colvarOrderNumber.DefaultSetting = @"";
				colvarOrderNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOrderNumber);
				
				TableSchema.TableColumn colvarPackages = new TableSchema.TableColumn(schema);
				colvarPackages.ColumnName = "Packages";
				colvarPackages.DataType = DbType.Int32;
				colvarPackages.MaxLength = 0;
				colvarPackages.AutoIncrement = false;
				colvarPackages.IsNullable = true;
				colvarPackages.IsPrimaryKey = false;
				colvarPackages.IsForeignKey = false;
				colvarPackages.IsReadOnly = false;
				colvarPackages.DefaultSetting = @"";
				colvarPackages.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPackages);
				
				TableSchema.TableColumn colvarPackageTypeID = new TableSchema.TableColumn(schema);
				colvarPackageTypeID.ColumnName = "PackageTypeID";
				colvarPackageTypeID.DataType = DbType.Int32;
				colvarPackageTypeID.MaxLength = 0;
				colvarPackageTypeID.AutoIncrement = false;
				colvarPackageTypeID.IsNullable = true;
				colvarPackageTypeID.IsPrimaryKey = false;
				colvarPackageTypeID.IsForeignKey = false;
				colvarPackageTypeID.IsReadOnly = false;
				colvarPackageTypeID.DefaultSetting = @"";
				colvarPackageTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPackageTypeID);
				
				TableSchema.TableColumn colvarWeight = new TableSchema.TableColumn(schema);
				colvarWeight.ColumnName = "Weight";
				colvarWeight.DataType = DbType.Double;
				colvarWeight.MaxLength = 0;
				colvarWeight.AutoIncrement = false;
				colvarWeight.IsNullable = true;
				colvarWeight.IsPrimaryKey = false;
				colvarWeight.IsForeignKey = false;
				colvarWeight.IsReadOnly = false;
				colvarWeight.DefaultSetting = @"";
				colvarWeight.ForeignKeyTableName = "";
				schema.Columns.Add(colvarWeight);
				
				TableSchema.TableColumn colvarCbm = new TableSchema.TableColumn(schema);
				colvarCbm.ColumnName = "Cbm";
				colvarCbm.DataType = DbType.Double;
				colvarCbm.MaxLength = 0;
				colvarCbm.AutoIncrement = false;
				colvarCbm.IsNullable = true;
				colvarCbm.IsPrimaryKey = false;
				colvarCbm.IsForeignKey = false;
				colvarCbm.IsReadOnly = false;
				colvarCbm.DefaultSetting = @"";
				colvarCbm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCbm);
				
				TableSchema.TableColumn colvarTs = new TableSchema.TableColumn(schema);
				colvarTs.ColumnName = "TS";
				colvarTs.DataType = DbType.Binary;
				colvarTs.MaxLength = 0;
				colvarTs.AutoIncrement = false;
				colvarTs.IsNullable = true;
				colvarTs.IsPrimaryKey = false;
				colvarTs.IsForeignKey = false;
				colvarTs.IsReadOnly = true;
				colvarTs.DefaultSetting = @"";
				colvarTs.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTs);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["WWIprov"].AddSchema("ContainerSubTable",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("ContainerSubID")]
		[Bindable(true)]
		public int ContainerSubID 
		{
			get { return GetColumnValue<int>(Columns.ContainerSubID); }
			set { SetColumnValue(Columns.ContainerSubID, value); }
		}
		  
		[XmlAttribute("ContainerID")]
		[Bindable(true)]
		public int? ContainerID 
		{
			get { return GetColumnValue<int?>(Columns.ContainerID); }
			set { SetColumnValue(Columns.ContainerID, value); }
		}
		  
		[XmlAttribute("OrderID")]
		[Bindable(true)]
		public int? OrderID 
		{
			get { return GetColumnValue<int?>(Columns.OrderID); }
			set { SetColumnValue(Columns.OrderID, value); }
		}
		  
		[XmlAttribute("OrderNumber")]
		[Bindable(true)]
		public int? OrderNumber 
		{
			get { return GetColumnValue<int?>(Columns.OrderNumber); }
			set { SetColumnValue(Columns.OrderNumber, value); }
		}
		  
		[XmlAttribute("Packages")]
		[Bindable(true)]
		public int? Packages 
		{
			get { return GetColumnValue<int?>(Columns.Packages); }
			set { SetColumnValue(Columns.Packages, value); }
		}
		  
		[XmlAttribute("PackageTypeID")]
		[Bindable(true)]
		public int? PackageTypeID 
		{
			get { return GetColumnValue<int?>(Columns.PackageTypeID); }
			set { SetColumnValue(Columns.PackageTypeID, value); }
		}
		  
		[XmlAttribute("Weight")]
		[Bindable(true)]
		public double? Weight 
		{
			get { return GetColumnValue<double?>(Columns.Weight); }
			set { SetColumnValue(Columns.Weight, value); }
		}
		  
		[XmlAttribute("Cbm")]
		[Bindable(true)]
		public double? Cbm 
		{
			get { return GetColumnValue<double?>(Columns.Cbm); }
			set { SetColumnValue(Columns.Cbm, value); }
		}
		  
		[XmlAttribute("Ts")]
		[Bindable(true)]
		public byte[] Ts 
		{
			get { return GetColumnValue<byte[]>(Columns.Ts); }
			set { SetColumnValue(Columns.Ts, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int? varContainerID,int? varOrderID,int? varOrderNumber,int? varPackages,int? varPackageTypeID,double? varWeight,double? varCbm,byte[] varTs)
		{
			ContainerSubTable item = new ContainerSubTable();
			
			item.ContainerID = varContainerID;
			
			item.OrderID = varOrderID;
			
			item.OrderNumber = varOrderNumber;
			
			item.Packages = varPackages;
			
			item.PackageTypeID = varPackageTypeID;
			
			item.Weight = varWeight;
			
			item.Cbm = varCbm;
			
			item.Ts = varTs;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varContainerSubID,int? varContainerID,int? varOrderID,int? varOrderNumber,int? varPackages,int? varPackageTypeID,double? varWeight,double? varCbm,byte[] varTs)
		{
			ContainerSubTable item = new ContainerSubTable();
			
				item.ContainerSubID = varContainerSubID;
			
				item.ContainerID = varContainerID;
			
				item.OrderID = varOrderID;
			
				item.OrderNumber = varOrderNumber;
			
				item.Packages = varPackages;
			
				item.PackageTypeID = varPackageTypeID;
			
				item.Weight = varWeight;
			
				item.Cbm = varCbm;
			
				item.Ts = varTs;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn ContainerSubIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn ContainerIDColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn OrderIDColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn OrderNumberColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn PackagesColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn PackageTypeIDColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn WeightColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn CbmColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn TsColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string ContainerSubID = @"ContainerSubID";
			 public static string ContainerID = @"ContainerID";
			 public static string OrderID = @"OrderID";
			 public static string OrderNumber = @"OrderNumber";
			 public static string Packages = @"Packages";
			 public static string PackageTypeID = @"PackageTypeID";
			 public static string Weight = @"Weight";
			 public static string Cbm = @"Cbm";
			 public static string Ts = @"TS";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
