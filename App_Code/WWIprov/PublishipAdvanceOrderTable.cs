using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DAL.Logistics
{
	/// <summary>
	/// Strongly-typed collection for the PublishipAdvanceOrderTable class.
	/// </summary>
    [Serializable]
	public partial class PublishipAdvanceOrderTableCollection : ActiveList<PublishipAdvanceOrderTable, PublishipAdvanceOrderTableCollection>
	{	   
		public PublishipAdvanceOrderTableCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>PublishipAdvanceOrderTableCollection</returns>
		public PublishipAdvanceOrderTableCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                PublishipAdvanceOrderTable o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the PublishipAdvanceOrderTable table.
	/// </summary>
	[Serializable]
	public partial class PublishipAdvanceOrderTable : ActiveRecord<PublishipAdvanceOrderTable>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public PublishipAdvanceOrderTable()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public PublishipAdvanceOrderTable(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public PublishipAdvanceOrderTable(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public PublishipAdvanceOrderTable(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("PublishipAdvanceOrderTable", TableType.Table, DataService.GetInstance("WWIprov"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarOrderID = new TableSchema.TableColumn(schema);
				colvarOrderID.ColumnName = "OrderID";
				colvarOrderID.DataType = DbType.Int32;
				colvarOrderID.MaxLength = 0;
				colvarOrderID.AutoIncrement = true;
				colvarOrderID.IsNullable = false;
				colvarOrderID.IsPrimaryKey = true;
				colvarOrderID.IsForeignKey = false;
				colvarOrderID.IsReadOnly = false;
				colvarOrderID.DefaultSetting = @"";
				colvarOrderID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOrderID);
				
				TableSchema.TableColumn colvarOrderNumber = new TableSchema.TableColumn(schema);
				colvarOrderNumber.ColumnName = "OrderNumber";
				colvarOrderNumber.DataType = DbType.String;
				colvarOrderNumber.MaxLength = 50;
				colvarOrderNumber.AutoIncrement = false;
				colvarOrderNumber.IsNullable = false;
				colvarOrderNumber.IsPrimaryKey = false;
				colvarOrderNumber.IsForeignKey = false;
				colvarOrderNumber.IsReadOnly = false;
				colvarOrderNumber.DefaultSetting = @"";
				colvarOrderNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOrderNumber);
				
				TableSchema.TableColumn colvarDateOrderReceived = new TableSchema.TableColumn(schema);
				colvarDateOrderReceived.ColumnName = "DateOrderReceived";
				colvarDateOrderReceived.DataType = DbType.DateTime;
				colvarDateOrderReceived.MaxLength = 0;
				colvarDateOrderReceived.AutoIncrement = false;
				colvarDateOrderReceived.IsNullable = true;
				colvarDateOrderReceived.IsPrimaryKey = false;
				colvarDateOrderReceived.IsForeignKey = false;
				colvarDateOrderReceived.IsReadOnly = false;
				colvarDateOrderReceived.DefaultSetting = @"";
				colvarDateOrderReceived.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDateOrderReceived);
				
				TableSchema.TableColumn colvarPayee = new TableSchema.TableColumn(schema);
				colvarPayee.ColumnName = "Payee";
				colvarPayee.DataType = DbType.String;
				colvarPayee.MaxLength = 50;
				colvarPayee.AutoIncrement = false;
				colvarPayee.IsNullable = true;
				colvarPayee.IsPrimaryKey = false;
				colvarPayee.IsForeignKey = false;
				colvarPayee.IsReadOnly = false;
				colvarPayee.DefaultSetting = @"";
				colvarPayee.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPayee);
				
				TableSchema.TableColumn colvarDeliveryAddress = new TableSchema.TableColumn(schema);
				colvarDeliveryAddress.ColumnName = "DeliveryAddress";
				colvarDeliveryAddress.DataType = DbType.String;
				colvarDeliveryAddress.MaxLength = 200;
				colvarDeliveryAddress.AutoIncrement = false;
				colvarDeliveryAddress.IsNullable = true;
				colvarDeliveryAddress.IsPrimaryKey = false;
				colvarDeliveryAddress.IsForeignKey = false;
				colvarDeliveryAddress.IsReadOnly = false;
				colvarDeliveryAddress.DefaultSetting = @"";
				colvarDeliveryAddress.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDeliveryAddress);
				
				TableSchema.TableColumn colvarDestinationCountry = new TableSchema.TableColumn(schema);
				colvarDestinationCountry.ColumnName = "DestinationCountry";
				colvarDestinationCountry.DataType = DbType.String;
				colvarDestinationCountry.MaxLength = 50;
				colvarDestinationCountry.AutoIncrement = false;
				colvarDestinationCountry.IsNullable = true;
				colvarDestinationCountry.IsPrimaryKey = false;
				colvarDestinationCountry.IsForeignKey = false;
				colvarDestinationCountry.IsReadOnly = false;
				colvarDestinationCountry.DefaultSetting = @"";
				colvarDestinationCountry.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDestinationCountry);
				
				TableSchema.TableColumn colvarCompanyID = new TableSchema.TableColumn(schema);
				colvarCompanyID.ColumnName = "CompanyID";
				colvarCompanyID.DataType = DbType.Int32;
				colvarCompanyID.MaxLength = 0;
				colvarCompanyID.AutoIncrement = false;
				colvarCompanyID.IsNullable = true;
				colvarCompanyID.IsPrimaryKey = false;
				colvarCompanyID.IsForeignKey = false;
				colvarCompanyID.IsReadOnly = false;
				colvarCompanyID.DefaultSetting = @"";
				colvarCompanyID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCompanyID);
				
				TableSchema.TableColumn colvarConsigneeID = new TableSchema.TableColumn(schema);
				colvarConsigneeID.ColumnName = "ConsigneeID";
				colvarConsigneeID.DataType = DbType.Int32;
				colvarConsigneeID.MaxLength = 0;
				colvarConsigneeID.AutoIncrement = false;
				colvarConsigneeID.IsNullable = true;
				colvarConsigneeID.IsPrimaryKey = false;
				colvarConsigneeID.IsForeignKey = false;
				colvarConsigneeID.IsReadOnly = false;
				colvarConsigneeID.DefaultSetting = @"";
				colvarConsigneeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarConsigneeID);
				
				TableSchema.TableColumn colvarPrinterID = new TableSchema.TableColumn(schema);
				colvarPrinterID.ColumnName = "PrinterID";
				colvarPrinterID.DataType = DbType.Int32;
				colvarPrinterID.MaxLength = 0;
				colvarPrinterID.AutoIncrement = false;
				colvarPrinterID.IsNullable = true;
				colvarPrinterID.IsPrimaryKey = false;
				colvarPrinterID.IsForeignKey = false;
				colvarPrinterID.IsReadOnly = false;
				colvarPrinterID.DefaultSetting = @"";
				colvarPrinterID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPrinterID);
				
				TableSchema.TableColumn colvarCustomerRef = new TableSchema.TableColumn(schema);
				colvarCustomerRef.ColumnName = "CustomerRef";
				colvarCustomerRef.DataType = DbType.String;
				colvarCustomerRef.MaxLength = 50;
				colvarCustomerRef.AutoIncrement = false;
				colvarCustomerRef.IsNullable = true;
				colvarCustomerRef.IsPrimaryKey = false;
				colvarCustomerRef.IsForeignKey = false;
				colvarCustomerRef.IsReadOnly = false;
				colvarCustomerRef.DefaultSetting = @"";
				colvarCustomerRef.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerRef);
				
				TableSchema.TableColumn colvarPrintersRef = new TableSchema.TableColumn(schema);
				colvarPrintersRef.ColumnName = "PrintersRef";
				colvarPrintersRef.DataType = DbType.String;
				colvarPrintersRef.MaxLength = 50;
				colvarPrintersRef.AutoIncrement = false;
				colvarPrintersRef.IsNullable = true;
				colvarPrintersRef.IsPrimaryKey = false;
				colvarPrintersRef.IsForeignKey = false;
				colvarPrintersRef.IsReadOnly = false;
				colvarPrintersRef.DefaultSetting = @"";
				colvarPrintersRef.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPrintersRef);
				
				TableSchema.TableColumn colvarContactID = new TableSchema.TableColumn(schema);
				colvarContactID.ColumnName = "ContactID";
				colvarContactID.DataType = DbType.Int32;
				colvarContactID.MaxLength = 0;
				colvarContactID.AutoIncrement = false;
				colvarContactID.IsNullable = true;
				colvarContactID.IsPrimaryKey = false;
				colvarContactID.IsForeignKey = false;
				colvarContactID.IsReadOnly = false;
				colvarContactID.DefaultSetting = @"";
				colvarContactID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarContactID);
				
				TableSchema.TableColumn colvarCargoReadyDate = new TableSchema.TableColumn(schema);
				colvarCargoReadyDate.ColumnName = "CargoReadyDate";
				colvarCargoReadyDate.DataType = DbType.DateTime;
				colvarCargoReadyDate.MaxLength = 0;
				colvarCargoReadyDate.AutoIncrement = false;
				colvarCargoReadyDate.IsNullable = true;
				colvarCargoReadyDate.IsPrimaryKey = false;
				colvarCargoReadyDate.IsForeignKey = false;
				colvarCargoReadyDate.IsReadOnly = false;
				colvarCargoReadyDate.DefaultSetting = @"";
				colvarCargoReadyDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCargoReadyDate);
				
				TableSchema.TableColumn colvarCargoReceivedDate = new TableSchema.TableColumn(schema);
				colvarCargoReceivedDate.ColumnName = "CargoReceivedDate";
				colvarCargoReceivedDate.DataType = DbType.DateTime;
				colvarCargoReceivedDate.MaxLength = 0;
				colvarCargoReceivedDate.AutoIncrement = false;
				colvarCargoReceivedDate.IsNullable = true;
				colvarCargoReceivedDate.IsPrimaryKey = false;
				colvarCargoReceivedDate.IsForeignKey = false;
				colvarCargoReceivedDate.IsReadOnly = false;
				colvarCargoReceivedDate.DefaultSetting = @"";
				colvarCargoReceivedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCargoReceivedDate);
				
				TableSchema.TableColumn colvarOriginID = new TableSchema.TableColumn(schema);
				colvarOriginID.ColumnName = "OriginID";
				colvarOriginID.DataType = DbType.Int32;
				colvarOriginID.MaxLength = 0;
				colvarOriginID.AutoIncrement = false;
				colvarOriginID.IsNullable = true;
				colvarOriginID.IsPrimaryKey = false;
				colvarOriginID.IsForeignKey = false;
				colvarOriginID.IsReadOnly = false;
				colvarOriginID.DefaultSetting = @"";
				colvarOriginID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOriginID);
				
				TableSchema.TableColumn colvarDestID = new TableSchema.TableColumn(schema);
				colvarDestID.ColumnName = "DestID";
				colvarDestID.DataType = DbType.Int32;
				colvarDestID.MaxLength = 0;
				colvarDestID.AutoIncrement = false;
				colvarDestID.IsNullable = true;
				colvarDestID.IsPrimaryKey = false;
				colvarDestID.IsForeignKey = false;
				colvarDestID.IsReadOnly = false;
				colvarDestID.DefaultSetting = @"";
				colvarDestID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDestID);
				
				TableSchema.TableColumn colvarFinalDestID = new TableSchema.TableColumn(schema);
				colvarFinalDestID.ColumnName = "FinalDestID";
				colvarFinalDestID.DataType = DbType.Int32;
				colvarFinalDestID.MaxLength = 0;
				colvarFinalDestID.AutoIncrement = false;
				colvarFinalDestID.IsNullable = true;
				colvarFinalDestID.IsPrimaryKey = false;
				colvarFinalDestID.IsForeignKey = false;
				colvarFinalDestID.IsReadOnly = false;
				colvarFinalDestID.DefaultSetting = @"";
				colvarFinalDestID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFinalDestID);
				
				TableSchema.TableColumn colvarDeliveryAddressID = new TableSchema.TableColumn(schema);
				colvarDeliveryAddressID.ColumnName = "DeliveryAddressID";
				colvarDeliveryAddressID.DataType = DbType.Int32;
				colvarDeliveryAddressID.MaxLength = 0;
				colvarDeliveryAddressID.AutoIncrement = false;
				colvarDeliveryAddressID.IsNullable = true;
				colvarDeliveryAddressID.IsPrimaryKey = false;
				colvarDeliveryAddressID.IsForeignKey = false;
				colvarDeliveryAddressID.IsReadOnly = false;
				colvarDeliveryAddressID.DefaultSetting = @"";
				colvarDeliveryAddressID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDeliveryAddressID);
				
				TableSchema.TableColumn colvarAttentionOfID = new TableSchema.TableColumn(schema);
				colvarAttentionOfID.ColumnName = "AttentionOfID";
				colvarAttentionOfID.DataType = DbType.Int32;
				colvarAttentionOfID.MaxLength = 0;
				colvarAttentionOfID.AutoIncrement = false;
				colvarAttentionOfID.IsNullable = true;
				colvarAttentionOfID.IsPrimaryKey = false;
				colvarAttentionOfID.IsForeignKey = false;
				colvarAttentionOfID.IsReadOnly = false;
				colvarAttentionOfID.DefaultSetting = @"";
				colvarAttentionOfID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAttentionOfID);
				
				TableSchema.TableColumn colvarFlightID = new TableSchema.TableColumn(schema);
				colvarFlightID.ColumnName = "FlightID";
				colvarFlightID.DataType = DbType.Int32;
				colvarFlightID.MaxLength = 0;
				colvarFlightID.AutoIncrement = false;
				colvarFlightID.IsNullable = true;
				colvarFlightID.IsPrimaryKey = false;
				colvarFlightID.IsForeignKey = false;
				colvarFlightID.IsReadOnly = false;
				colvarFlightID.DefaultSetting = @"";
				colvarFlightID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFlightID);
				
				TableSchema.TableColumn colvarEtd = new TableSchema.TableColumn(schema);
				colvarEtd.ColumnName = "ETD";
				colvarEtd.DataType = DbType.DateTime;
				colvarEtd.MaxLength = 0;
				colvarEtd.AutoIncrement = false;
				colvarEtd.IsNullable = true;
				colvarEtd.IsPrimaryKey = false;
				colvarEtd.IsForeignKey = false;
				colvarEtd.IsReadOnly = false;
				colvarEtd.DefaultSetting = @"";
				colvarEtd.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEtd);
				
				TableSchema.TableColumn colvarEta = new TableSchema.TableColumn(schema);
				colvarEta.ColumnName = "ETA";
				colvarEta.DataType = DbType.DateTime;
				colvarEta.MaxLength = 0;
				colvarEta.AutoIncrement = false;
				colvarEta.IsNullable = true;
				colvarEta.IsPrimaryKey = false;
				colvarEta.IsForeignKey = false;
				colvarEta.IsReadOnly = false;
				colvarEta.DefaultSetting = @"";
				colvarEta.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEta);
				
				TableSchema.TableColumn colvarHAWBno = new TableSchema.TableColumn(schema);
				colvarHAWBno.ColumnName = "HAWBno";
				colvarHAWBno.DataType = DbType.String;
				colvarHAWBno.MaxLength = 50;
				colvarHAWBno.AutoIncrement = false;
				colvarHAWBno.IsNullable = true;
				colvarHAWBno.IsPrimaryKey = false;
				colvarHAWBno.IsForeignKey = false;
				colvarHAWBno.IsReadOnly = false;
				colvarHAWBno.DefaultSetting = @"";
				colvarHAWBno.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHAWBno);
				
				TableSchema.TableColumn colvarHAWBAdded = new TableSchema.TableColumn(schema);
				colvarHAWBAdded.ColumnName = "HAWBAdded";
				colvarHAWBAdded.DataType = DbType.Boolean;
				colvarHAWBAdded.MaxLength = 0;
				colvarHAWBAdded.AutoIncrement = false;
				colvarHAWBAdded.IsNullable = true;
				colvarHAWBAdded.IsPrimaryKey = false;
				colvarHAWBAdded.IsForeignKey = false;
				colvarHAWBAdded.IsReadOnly = false;
				colvarHAWBAdded.DefaultSetting = @"";
				colvarHAWBAdded.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHAWBAdded);
				
				TableSchema.TableColumn colvarShippedonBoard = new TableSchema.TableColumn(schema);
				colvarShippedonBoard.ColumnName = "ShippedonBoard";
				colvarShippedonBoard.DataType = DbType.Boolean;
				colvarShippedonBoard.MaxLength = 0;
				colvarShippedonBoard.AutoIncrement = false;
				colvarShippedonBoard.IsNullable = true;
				colvarShippedonBoard.IsPrimaryKey = false;
				colvarShippedonBoard.IsForeignKey = false;
				colvarShippedonBoard.IsReadOnly = false;
				colvarShippedonBoard.DefaultSetting = @"";
				colvarShippedonBoard.ForeignKeyTableName = "";
				schema.Columns.Add(colvarShippedonBoard);
				
				TableSchema.TableColumn colvarTitles = new TableSchema.TableColumn(schema);
				colvarTitles.ColumnName = "Titles";
				colvarTitles.DataType = DbType.Int32;
				colvarTitles.MaxLength = 0;
				colvarTitles.AutoIncrement = false;
				colvarTitles.IsNullable = true;
				colvarTitles.IsPrimaryKey = false;
				colvarTitles.IsForeignKey = false;
				colvarTitles.IsReadOnly = false;
				
						colvarTitles.DefaultSetting = @"((0))";
				colvarTitles.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTitles);
				
				TableSchema.TableColumn colvarCartons = new TableSchema.TableColumn(schema);
				colvarCartons.ColumnName = "Cartons";
				colvarCartons.DataType = DbType.Int32;
				colvarCartons.MaxLength = 0;
				colvarCartons.AutoIncrement = false;
				colvarCartons.IsNullable = true;
				colvarCartons.IsPrimaryKey = false;
				colvarCartons.IsForeignKey = false;
				colvarCartons.IsReadOnly = false;
				colvarCartons.DefaultSetting = @"";
				colvarCartons.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCartons);
				
				TableSchema.TableColumn colvarActualWeight = new TableSchema.TableColumn(schema);
				colvarActualWeight.ColumnName = "ActualWeight";
				colvarActualWeight.DataType = DbType.Decimal;
				colvarActualWeight.MaxLength = 0;
				colvarActualWeight.AutoIncrement = false;
				colvarActualWeight.IsNullable = true;
				colvarActualWeight.IsPrimaryKey = false;
				colvarActualWeight.IsForeignKey = false;
				colvarActualWeight.IsReadOnly = false;
				colvarActualWeight.DefaultSetting = @"";
				colvarActualWeight.ForeignKeyTableName = "";
				schema.Columns.Add(colvarActualWeight);
				
				TableSchema.TableColumn colvarActualVolume = new TableSchema.TableColumn(schema);
				colvarActualVolume.ColumnName = "ActualVolume";
				colvarActualVolume.DataType = DbType.Decimal;
				colvarActualVolume.MaxLength = 0;
				colvarActualVolume.AutoIncrement = false;
				colvarActualVolume.IsNullable = true;
				colvarActualVolume.IsPrimaryKey = false;
				colvarActualVolume.IsForeignKey = false;
				colvarActualVolume.IsReadOnly = false;
				colvarActualVolume.DefaultSetting = @"";
				colvarActualVolume.ForeignKeyTableName = "";
				schema.Columns.Add(colvarActualVolume);
				
				TableSchema.TableColumn colvarRemarkstoAgent = new TableSchema.TableColumn(schema);
				colvarRemarkstoAgent.ColumnName = "RemarkstoAgent";
				colvarRemarkstoAgent.DataType = DbType.String;
				colvarRemarkstoAgent.MaxLength = -1;
				colvarRemarkstoAgent.AutoIncrement = false;
				colvarRemarkstoAgent.IsNullable = true;
				colvarRemarkstoAgent.IsPrimaryKey = false;
				colvarRemarkstoAgent.IsForeignKey = false;
				colvarRemarkstoAgent.IsReadOnly = false;
				colvarRemarkstoAgent.DefaultSetting = @"";
				colvarRemarkstoAgent.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRemarkstoAgent);
				
				TableSchema.TableColumn colvarRemarkstoCust = new TableSchema.TableColumn(schema);
				colvarRemarkstoCust.ColumnName = "RemarkstoCust";
				colvarRemarkstoCust.DataType = DbType.String;
				colvarRemarkstoCust.MaxLength = -1;
				colvarRemarkstoCust.AutoIncrement = false;
				colvarRemarkstoCust.IsNullable = true;
				colvarRemarkstoCust.IsPrimaryKey = false;
				colvarRemarkstoCust.IsForeignKey = false;
				colvarRemarkstoCust.IsReadOnly = false;
				colvarRemarkstoCust.DefaultSetting = @"";
				colvarRemarkstoCust.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRemarkstoCust);
				
				TableSchema.TableColumn colvarJobClosed = new TableSchema.TableColumn(schema);
				colvarJobClosed.ColumnName = "JobClosed";
				colvarJobClosed.DataType = DbType.Boolean;
				colvarJobClosed.MaxLength = 0;
				colvarJobClosed.AutoIncrement = false;
				colvarJobClosed.IsNullable = true;
				colvarJobClosed.IsPrimaryKey = false;
				colvarJobClosed.IsForeignKey = false;
				colvarJobClosed.IsReadOnly = false;
				colvarJobClosed.DefaultSetting = @"";
				colvarJobClosed.ForeignKeyTableName = "";
				schema.Columns.Add(colvarJobClosed);
				
				TableSchema.TableColumn colvarJobClosureDate = new TableSchema.TableColumn(schema);
				colvarJobClosureDate.ColumnName = "JobClosureDate";
				colvarJobClosureDate.DataType = DbType.AnsiString;
				colvarJobClosureDate.MaxLength = 0;
				colvarJobClosureDate.AutoIncrement = false;
				colvarJobClosureDate.IsNullable = true;
				colvarJobClosureDate.IsPrimaryKey = false;
				colvarJobClosureDate.IsForeignKey = false;
				colvarJobClosureDate.IsReadOnly = false;
				colvarJobClosureDate.DefaultSetting = @"";
				colvarJobClosureDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarJobClosureDate);
				
				TableSchema.TableColumn colvarCompositeInvRef = new TableSchema.TableColumn(schema);
				colvarCompositeInvRef.ColumnName = "CompositeInvRef";
				colvarCompositeInvRef.DataType = DbType.String;
				colvarCompositeInvRef.MaxLength = 10;
				colvarCompositeInvRef.AutoIncrement = false;
				colvarCompositeInvRef.IsNullable = true;
				colvarCompositeInvRef.IsPrimaryKey = false;
				colvarCompositeInvRef.IsForeignKey = false;
				colvarCompositeInvRef.IsReadOnly = false;
				colvarCompositeInvRef.DefaultSetting = @"";
				colvarCompositeInvRef.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCompositeInvRef);
				
				TableSchema.TableColumn colvarInsuranceValue = new TableSchema.TableColumn(schema);
				colvarInsuranceValue.ColumnName = "InsuranceValue";
				colvarInsuranceValue.DataType = DbType.Currency;
				colvarInsuranceValue.MaxLength = 0;
				colvarInsuranceValue.AutoIncrement = false;
				colvarInsuranceValue.IsNullable = true;
				colvarInsuranceValue.IsPrimaryKey = false;
				colvarInsuranceValue.IsForeignKey = false;
				colvarInsuranceValue.IsReadOnly = false;
				colvarInsuranceValue.DefaultSetting = @"";
				colvarInsuranceValue.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInsuranceValue);
				
				TableSchema.TableColumn colvarCancelRequestRcd = new TableSchema.TableColumn(schema);
				colvarCancelRequestRcd.ColumnName = "CancelRequestRcd";
				colvarCancelRequestRcd.DataType = DbType.DateTime;
				colvarCancelRequestRcd.MaxLength = 0;
				colvarCancelRequestRcd.AutoIncrement = false;
				colvarCancelRequestRcd.IsNullable = true;
				colvarCancelRequestRcd.IsPrimaryKey = false;
				colvarCancelRequestRcd.IsForeignKey = false;
				colvarCancelRequestRcd.IsReadOnly = false;
				colvarCancelRequestRcd.DefaultSetting = @"";
				colvarCancelRequestRcd.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCancelRequestRcd);
				
				TableSchema.TableColumn colvarCancelRequestByID = new TableSchema.TableColumn(schema);
				colvarCancelRequestByID.ColumnName = "CancelRequestByID";
				colvarCancelRequestByID.DataType = DbType.Int32;
				colvarCancelRequestByID.MaxLength = 0;
				colvarCancelRequestByID.AutoIncrement = false;
				colvarCancelRequestByID.IsNullable = true;
				colvarCancelRequestByID.IsPrimaryKey = false;
				colvarCancelRequestByID.IsForeignKey = false;
				colvarCancelRequestByID.IsReadOnly = false;
				
						colvarCancelRequestByID.DefaultSetting = @"((0))";
				colvarCancelRequestByID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCancelRequestByID);
				
				TableSchema.TableColumn colvarOrderCancelled = new TableSchema.TableColumn(schema);
				colvarOrderCancelled.ColumnName = "OrderCancelled";
				colvarOrderCancelled.DataType = DbType.Boolean;
				colvarOrderCancelled.MaxLength = 0;
				colvarOrderCancelled.AutoIncrement = false;
				colvarOrderCancelled.IsNullable = true;
				colvarOrderCancelled.IsPrimaryKey = false;
				colvarOrderCancelled.IsForeignKey = false;
				colvarOrderCancelled.IsReadOnly = false;
				colvarOrderCancelled.DefaultSetting = @"";
				colvarOrderCancelled.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOrderCancelled);
				
				TableSchema.TableColumn colvarCancelDate = new TableSchema.TableColumn(schema);
				colvarCancelDate.ColumnName = "CancelDate";
				colvarCancelDate.DataType = DbType.DateTime;
				colvarCancelDate.MaxLength = 0;
				colvarCancelDate.AutoIncrement = false;
				colvarCancelDate.IsNullable = true;
				colvarCancelDate.IsPrimaryKey = false;
				colvarCancelDate.IsForeignKey = false;
				colvarCancelDate.IsReadOnly = false;
				colvarCancelDate.DefaultSetting = @"";
				colvarCancelDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCancelDate);
				
				TableSchema.TableColumn colvarCancelledByID = new TableSchema.TableColumn(schema);
				colvarCancelledByID.ColumnName = "CancelledByID";
				colvarCancelledByID.DataType = DbType.Int32;
				colvarCancelledByID.MaxLength = 0;
				colvarCancelledByID.AutoIncrement = false;
				colvarCancelledByID.IsNullable = true;
				colvarCancelledByID.IsPrimaryKey = false;
				colvarCancelledByID.IsForeignKey = false;
				colvarCancelledByID.IsReadOnly = false;
				colvarCancelledByID.DefaultSetting = @"";
				colvarCancelledByID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCancelledByID);
				
				TableSchema.TableColumn colvarFao = new TableSchema.TableColumn(schema);
				colvarFao.ColumnName = "FAO";
				colvarFao.DataType = DbType.String;
				colvarFao.MaxLength = 100;
				colvarFao.AutoIncrement = false;
				colvarFao.IsNullable = true;
				colvarFao.IsPrimaryKey = false;
				colvarFao.IsForeignKey = false;
				colvarFao.IsReadOnly = false;
				colvarFao.DefaultSetting = @"";
				colvarFao.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFao);
				
				TableSchema.TableColumn colvarTs = new TableSchema.TableColumn(schema);
				colvarTs.ColumnName = "TS";
				colvarTs.DataType = DbType.Binary;
				colvarTs.MaxLength = 0;
				colvarTs.AutoIncrement = false;
				colvarTs.IsNullable = true;
				colvarTs.IsPrimaryKey = false;
				colvarTs.IsForeignKey = false;
				colvarTs.IsReadOnly = true;
				colvarTs.DefaultSetting = @"";
				colvarTs.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTs);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["WWIprov"].AddSchema("PublishipAdvanceOrderTable",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("OrderID")]
		[Bindable(true)]
		public int OrderID 
		{
			get { return GetColumnValue<int>(Columns.OrderID); }
			set { SetColumnValue(Columns.OrderID, value); }
		}
		  
		[XmlAttribute("OrderNumber")]
		[Bindable(true)]
		public string OrderNumber 
		{
			get { return GetColumnValue<string>(Columns.OrderNumber); }
			set { SetColumnValue(Columns.OrderNumber, value); }
		}
		  
		[XmlAttribute("DateOrderReceived")]
		[Bindable(true)]
		public DateTime? DateOrderReceived 
		{
			get { return GetColumnValue<DateTime?>(Columns.DateOrderReceived); }
			set { SetColumnValue(Columns.DateOrderReceived, value); }
		}
		  
		[XmlAttribute("Payee")]
		[Bindable(true)]
		public string Payee 
		{
			get { return GetColumnValue<string>(Columns.Payee); }
			set { SetColumnValue(Columns.Payee, value); }
		}
		  
		[XmlAttribute("DeliveryAddress")]
		[Bindable(true)]
		public string DeliveryAddress 
		{
			get { return GetColumnValue<string>(Columns.DeliveryAddress); }
			set { SetColumnValue(Columns.DeliveryAddress, value); }
		}
		  
		[XmlAttribute("DestinationCountry")]
		[Bindable(true)]
		public string DestinationCountry 
		{
			get { return GetColumnValue<string>(Columns.DestinationCountry); }
			set { SetColumnValue(Columns.DestinationCountry, value); }
		}
		  
		[XmlAttribute("CompanyID")]
		[Bindable(true)]
		public int? CompanyID 
		{
			get { return GetColumnValue<int?>(Columns.CompanyID); }
			set { SetColumnValue(Columns.CompanyID, value); }
		}
		  
		[XmlAttribute("ConsigneeID")]
		[Bindable(true)]
		public int? ConsigneeID 
		{
			get { return GetColumnValue<int?>(Columns.ConsigneeID); }
			set { SetColumnValue(Columns.ConsigneeID, value); }
		}
		  
		[XmlAttribute("PrinterID")]
		[Bindable(true)]
		public int? PrinterID 
		{
			get { return GetColumnValue<int?>(Columns.PrinterID); }
			set { SetColumnValue(Columns.PrinterID, value); }
		}
		  
		[XmlAttribute("CustomerRef")]
		[Bindable(true)]
		public string CustomerRef 
		{
			get { return GetColumnValue<string>(Columns.CustomerRef); }
			set { SetColumnValue(Columns.CustomerRef, value); }
		}
		  
		[XmlAttribute("PrintersRef")]
		[Bindable(true)]
		public string PrintersRef 
		{
			get { return GetColumnValue<string>(Columns.PrintersRef); }
			set { SetColumnValue(Columns.PrintersRef, value); }
		}
		  
		[XmlAttribute("ContactID")]
		[Bindable(true)]
		public int? ContactID 
		{
			get { return GetColumnValue<int?>(Columns.ContactID); }
			set { SetColumnValue(Columns.ContactID, value); }
		}
		  
		[XmlAttribute("CargoReadyDate")]
		[Bindable(true)]
		public DateTime? CargoReadyDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.CargoReadyDate); }
			set { SetColumnValue(Columns.CargoReadyDate, value); }
		}
		  
		[XmlAttribute("CargoReceivedDate")]
		[Bindable(true)]
		public DateTime? CargoReceivedDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.CargoReceivedDate); }
			set { SetColumnValue(Columns.CargoReceivedDate, value); }
		}
		  
		[XmlAttribute("OriginID")]
		[Bindable(true)]
		public int? OriginID 
		{
			get { return GetColumnValue<int?>(Columns.OriginID); }
			set { SetColumnValue(Columns.OriginID, value); }
		}
		  
		[XmlAttribute("DestID")]
		[Bindable(true)]
		public int? DestID 
		{
			get { return GetColumnValue<int?>(Columns.DestID); }
			set { SetColumnValue(Columns.DestID, value); }
		}
		  
		[XmlAttribute("FinalDestID")]
		[Bindable(true)]
		public int? FinalDestID 
		{
			get { return GetColumnValue<int?>(Columns.FinalDestID); }
			set { SetColumnValue(Columns.FinalDestID, value); }
		}
		  
		[XmlAttribute("DeliveryAddressID")]
		[Bindable(true)]
		public int? DeliveryAddressID 
		{
			get { return GetColumnValue<int?>(Columns.DeliveryAddressID); }
			set { SetColumnValue(Columns.DeliveryAddressID, value); }
		}
		  
		[XmlAttribute("AttentionOfID")]
		[Bindable(true)]
		public int? AttentionOfID 
		{
			get { return GetColumnValue<int?>(Columns.AttentionOfID); }
			set { SetColumnValue(Columns.AttentionOfID, value); }
		}
		  
		[XmlAttribute("FlightID")]
		[Bindable(true)]
		public int? FlightID 
		{
			get { return GetColumnValue<int?>(Columns.FlightID); }
			set { SetColumnValue(Columns.FlightID, value); }
		}
		  
		[XmlAttribute("Etd")]
		[Bindable(true)]
		public DateTime? Etd 
		{
			get { return GetColumnValue<DateTime?>(Columns.Etd); }
			set { SetColumnValue(Columns.Etd, value); }
		}
		  
		[XmlAttribute("Eta")]
		[Bindable(true)]
		public DateTime? Eta 
		{
			get { return GetColumnValue<DateTime?>(Columns.Eta); }
			set { SetColumnValue(Columns.Eta, value); }
		}
		  
		[XmlAttribute("HAWBno")]
		[Bindable(true)]
		public string HAWBno 
		{
			get { return GetColumnValue<string>(Columns.HAWBno); }
			set { SetColumnValue(Columns.HAWBno, value); }
		}
		  
		[XmlAttribute("HAWBAdded")]
		[Bindable(true)]
		public bool? HAWBAdded 
		{
			get { return GetColumnValue<bool?>(Columns.HAWBAdded); }
			set { SetColumnValue(Columns.HAWBAdded, value); }
		}
		  
		[XmlAttribute("ShippedonBoard")]
		[Bindable(true)]
		public bool? ShippedonBoard 
		{
			get { return GetColumnValue<bool?>(Columns.ShippedonBoard); }
			set { SetColumnValue(Columns.ShippedonBoard, value); }
		}
		  
		[XmlAttribute("Titles")]
		[Bindable(true)]
		public int? Titles 
		{
			get { return GetColumnValue<int?>(Columns.Titles); }
			set { SetColumnValue(Columns.Titles, value); }
		}
		  
		[XmlAttribute("Cartons")]
		[Bindable(true)]
		public int? Cartons 
		{
			get { return GetColumnValue<int?>(Columns.Cartons); }
			set { SetColumnValue(Columns.Cartons, value); }
		}
		  
		[XmlAttribute("ActualWeight")]
		[Bindable(true)]
		public decimal? ActualWeight 
		{
			get { return GetColumnValue<decimal?>(Columns.ActualWeight); }
			set { SetColumnValue(Columns.ActualWeight, value); }
		}
		  
		[XmlAttribute("ActualVolume")]
		[Bindable(true)]
		public decimal? ActualVolume 
		{
			get { return GetColumnValue<decimal?>(Columns.ActualVolume); }
			set { SetColumnValue(Columns.ActualVolume, value); }
		}
		  
		[XmlAttribute("RemarkstoAgent")]
		[Bindable(true)]
		public string RemarkstoAgent 
		{
			get { return GetColumnValue<string>(Columns.RemarkstoAgent); }
			set { SetColumnValue(Columns.RemarkstoAgent, value); }
		}
		  
		[XmlAttribute("RemarkstoCust")]
		[Bindable(true)]
		public string RemarkstoCust 
		{
			get { return GetColumnValue<string>(Columns.RemarkstoCust); }
			set { SetColumnValue(Columns.RemarkstoCust, value); }
		}
		  
		[XmlAttribute("JobClosed")]
		[Bindable(true)]
		public bool? JobClosed 
		{
			get { return GetColumnValue<bool?>(Columns.JobClosed); }
			set { SetColumnValue(Columns.JobClosed, value); }
		}
		  
		[XmlAttribute("JobClosureDate")]
		[Bindable(true)]
		public string JobClosureDate 
		{
			get { return GetColumnValue<string>(Columns.JobClosureDate); }
			set { SetColumnValue(Columns.JobClosureDate, value); }
		}
		  
		[XmlAttribute("CompositeInvRef")]
		[Bindable(true)]
		public string CompositeInvRef 
		{
			get { return GetColumnValue<string>(Columns.CompositeInvRef); }
			set { SetColumnValue(Columns.CompositeInvRef, value); }
		}
		  
		[XmlAttribute("InsuranceValue")]
		[Bindable(true)]
		public decimal? InsuranceValue 
		{
			get { return GetColumnValue<decimal?>(Columns.InsuranceValue); }
			set { SetColumnValue(Columns.InsuranceValue, value); }
		}
		  
		[XmlAttribute("CancelRequestRcd")]
		[Bindable(true)]
		public DateTime? CancelRequestRcd 
		{
			get { return GetColumnValue<DateTime?>(Columns.CancelRequestRcd); }
			set { SetColumnValue(Columns.CancelRequestRcd, value); }
		}
		  
		[XmlAttribute("CancelRequestByID")]
		[Bindable(true)]
		public int? CancelRequestByID 
		{
			get { return GetColumnValue<int?>(Columns.CancelRequestByID); }
			set { SetColumnValue(Columns.CancelRequestByID, value); }
		}
		  
		[XmlAttribute("OrderCancelled")]
		[Bindable(true)]
		public bool? OrderCancelled 
		{
			get { return GetColumnValue<bool?>(Columns.OrderCancelled); }
			set { SetColumnValue(Columns.OrderCancelled, value); }
		}
		  
		[XmlAttribute("CancelDate")]
		[Bindable(true)]
		public DateTime? CancelDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.CancelDate); }
			set { SetColumnValue(Columns.CancelDate, value); }
		}
		  
		[XmlAttribute("CancelledByID")]
		[Bindable(true)]
		public int? CancelledByID 
		{
			get { return GetColumnValue<int?>(Columns.CancelledByID); }
			set { SetColumnValue(Columns.CancelledByID, value); }
		}
		  
		[XmlAttribute("Fao")]
		[Bindable(true)]
		public string Fao 
		{
			get { return GetColumnValue<string>(Columns.Fao); }
			set { SetColumnValue(Columns.Fao, value); }
		}
		  
		[XmlAttribute("Ts")]
		[Bindable(true)]
		public byte[] Ts 
		{
			get { return GetColumnValue<byte[]>(Columns.Ts); }
			set { SetColumnValue(Columns.Ts, value); }
		}
		
		#endregion
		
		
		#region PrimaryKey Methods		
		
        protected override void SetPrimaryKey(object oValue)
        {
            base.SetPrimaryKey(oValue);
            
            SetPKValues();
        }
        
		
		public DAL.Logistics.PublishipAdvanceTitleTableCollection PublishipAdvanceTitleTableRecords()
		{
			return new DAL.Logistics.PublishipAdvanceTitleTableCollection().Where(PublishipAdvanceTitleTable.Columns.PAOrderID, OrderID).Load();
		}
		#endregion
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varOrderNumber,DateTime? varDateOrderReceived,string varPayee,string varDeliveryAddress,string varDestinationCountry,int? varCompanyID,int? varConsigneeID,int? varPrinterID,string varCustomerRef,string varPrintersRef,int? varContactID,DateTime? varCargoReadyDate,DateTime? varCargoReceivedDate,int? varOriginID,int? varDestID,int? varFinalDestID,int? varDeliveryAddressID,int? varAttentionOfID,int? varFlightID,DateTime? varEtd,DateTime? varEta,string varHAWBno,bool? varHAWBAdded,bool? varShippedonBoard,int? varTitles,int? varCartons,decimal? varActualWeight,decimal? varActualVolume,string varRemarkstoAgent,string varRemarkstoCust,bool? varJobClosed,string varJobClosureDate,string varCompositeInvRef,decimal? varInsuranceValue,DateTime? varCancelRequestRcd,int? varCancelRequestByID,bool? varOrderCancelled,DateTime? varCancelDate,int? varCancelledByID,string varFao,byte[] varTs)
		{
			PublishipAdvanceOrderTable item = new PublishipAdvanceOrderTable();
			
			item.OrderNumber = varOrderNumber;
			
			item.DateOrderReceived = varDateOrderReceived;
			
			item.Payee = varPayee;
			
			item.DeliveryAddress = varDeliveryAddress;
			
			item.DestinationCountry = varDestinationCountry;
			
			item.CompanyID = varCompanyID;
			
			item.ConsigneeID = varConsigneeID;
			
			item.PrinterID = varPrinterID;
			
			item.CustomerRef = varCustomerRef;
			
			item.PrintersRef = varPrintersRef;
			
			item.ContactID = varContactID;
			
			item.CargoReadyDate = varCargoReadyDate;
			
			item.CargoReceivedDate = varCargoReceivedDate;
			
			item.OriginID = varOriginID;
			
			item.DestID = varDestID;
			
			item.FinalDestID = varFinalDestID;
			
			item.DeliveryAddressID = varDeliveryAddressID;
			
			item.AttentionOfID = varAttentionOfID;
			
			item.FlightID = varFlightID;
			
			item.Etd = varEtd;
			
			item.Eta = varEta;
			
			item.HAWBno = varHAWBno;
			
			item.HAWBAdded = varHAWBAdded;
			
			item.ShippedonBoard = varShippedonBoard;
			
			item.Titles = varTitles;
			
			item.Cartons = varCartons;
			
			item.ActualWeight = varActualWeight;
			
			item.ActualVolume = varActualVolume;
			
			item.RemarkstoAgent = varRemarkstoAgent;
			
			item.RemarkstoCust = varRemarkstoCust;
			
			item.JobClosed = varJobClosed;
			
			item.JobClosureDate = varJobClosureDate;
			
			item.CompositeInvRef = varCompositeInvRef;
			
			item.InsuranceValue = varInsuranceValue;
			
			item.CancelRequestRcd = varCancelRequestRcd;
			
			item.CancelRequestByID = varCancelRequestByID;
			
			item.OrderCancelled = varOrderCancelled;
			
			item.CancelDate = varCancelDate;
			
			item.CancelledByID = varCancelledByID;
			
			item.Fao = varFao;
			
			item.Ts = varTs;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varOrderID,string varOrderNumber,DateTime? varDateOrderReceived,string varPayee,string varDeliveryAddress,string varDestinationCountry,int? varCompanyID,int? varConsigneeID,int? varPrinterID,string varCustomerRef,string varPrintersRef,int? varContactID,DateTime? varCargoReadyDate,DateTime? varCargoReceivedDate,int? varOriginID,int? varDestID,int? varFinalDestID,int? varDeliveryAddressID,int? varAttentionOfID,int? varFlightID,DateTime? varEtd,DateTime? varEta,string varHAWBno,bool? varHAWBAdded,bool? varShippedonBoard,int? varTitles,int? varCartons,decimal? varActualWeight,decimal? varActualVolume,string varRemarkstoAgent,string varRemarkstoCust,bool? varJobClosed,string varJobClosureDate,string varCompositeInvRef,decimal? varInsuranceValue,DateTime? varCancelRequestRcd,int? varCancelRequestByID,bool? varOrderCancelled,DateTime? varCancelDate,int? varCancelledByID,string varFao,byte[] varTs)
		{
			PublishipAdvanceOrderTable item = new PublishipAdvanceOrderTable();
			
				item.OrderID = varOrderID;
			
				item.OrderNumber = varOrderNumber;
			
				item.DateOrderReceived = varDateOrderReceived;
			
				item.Payee = varPayee;
			
				item.DeliveryAddress = varDeliveryAddress;
			
				item.DestinationCountry = varDestinationCountry;
			
				item.CompanyID = varCompanyID;
			
				item.ConsigneeID = varConsigneeID;
			
				item.PrinterID = varPrinterID;
			
				item.CustomerRef = varCustomerRef;
			
				item.PrintersRef = varPrintersRef;
			
				item.ContactID = varContactID;
			
				item.CargoReadyDate = varCargoReadyDate;
			
				item.CargoReceivedDate = varCargoReceivedDate;
			
				item.OriginID = varOriginID;
			
				item.DestID = varDestID;
			
				item.FinalDestID = varFinalDestID;
			
				item.DeliveryAddressID = varDeliveryAddressID;
			
				item.AttentionOfID = varAttentionOfID;
			
				item.FlightID = varFlightID;
			
				item.Etd = varEtd;
			
				item.Eta = varEta;
			
				item.HAWBno = varHAWBno;
			
				item.HAWBAdded = varHAWBAdded;
			
				item.ShippedonBoard = varShippedonBoard;
			
				item.Titles = varTitles;
			
				item.Cartons = varCartons;
			
				item.ActualWeight = varActualWeight;
			
				item.ActualVolume = varActualVolume;
			
				item.RemarkstoAgent = varRemarkstoAgent;
			
				item.RemarkstoCust = varRemarkstoCust;
			
				item.JobClosed = varJobClosed;
			
				item.JobClosureDate = varJobClosureDate;
			
				item.CompositeInvRef = varCompositeInvRef;
			
				item.InsuranceValue = varInsuranceValue;
			
				item.CancelRequestRcd = varCancelRequestRcd;
			
				item.CancelRequestByID = varCancelRequestByID;
			
				item.OrderCancelled = varOrderCancelled;
			
				item.CancelDate = varCancelDate;
			
				item.CancelledByID = varCancelledByID;
			
				item.Fao = varFao;
			
				item.Ts = varTs;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn OrderIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn OrderNumberColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn DateOrderReceivedColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn PayeeColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn DeliveryAddressColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn DestinationCountryColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn CompanyIDColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn ConsigneeIDColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn PrinterIDColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn CustomerRefColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn PrintersRefColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn ContactIDColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn CargoReadyDateColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn CargoReceivedDateColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn OriginIDColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn DestIDColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        public static TableSchema.TableColumn FinalDestIDColumn
        {
            get { return Schema.Columns[16]; }
        }
        
        
        
        public static TableSchema.TableColumn DeliveryAddressIDColumn
        {
            get { return Schema.Columns[17]; }
        }
        
        
        
        public static TableSchema.TableColumn AttentionOfIDColumn
        {
            get { return Schema.Columns[18]; }
        }
        
        
        
        public static TableSchema.TableColumn FlightIDColumn
        {
            get { return Schema.Columns[19]; }
        }
        
        
        
        public static TableSchema.TableColumn EtdColumn
        {
            get { return Schema.Columns[20]; }
        }
        
        
        
        public static TableSchema.TableColumn EtaColumn
        {
            get { return Schema.Columns[21]; }
        }
        
        
        
        public static TableSchema.TableColumn HAWBnoColumn
        {
            get { return Schema.Columns[22]; }
        }
        
        
        
        public static TableSchema.TableColumn HAWBAddedColumn
        {
            get { return Schema.Columns[23]; }
        }
        
        
        
        public static TableSchema.TableColumn ShippedonBoardColumn
        {
            get { return Schema.Columns[24]; }
        }
        
        
        
        public static TableSchema.TableColumn TitlesColumn
        {
            get { return Schema.Columns[25]; }
        }
        
        
        
        public static TableSchema.TableColumn CartonsColumn
        {
            get { return Schema.Columns[26]; }
        }
        
        
        
        public static TableSchema.TableColumn ActualWeightColumn
        {
            get { return Schema.Columns[27]; }
        }
        
        
        
        public static TableSchema.TableColumn ActualVolumeColumn
        {
            get { return Schema.Columns[28]; }
        }
        
        
        
        public static TableSchema.TableColumn RemarkstoAgentColumn
        {
            get { return Schema.Columns[29]; }
        }
        
        
        
        public static TableSchema.TableColumn RemarkstoCustColumn
        {
            get { return Schema.Columns[30]; }
        }
        
        
        
        public static TableSchema.TableColumn JobClosedColumn
        {
            get { return Schema.Columns[31]; }
        }
        
        
        
        public static TableSchema.TableColumn JobClosureDateColumn
        {
            get { return Schema.Columns[32]; }
        }
        
        
        
        public static TableSchema.TableColumn CompositeInvRefColumn
        {
            get { return Schema.Columns[33]; }
        }
        
        
        
        public static TableSchema.TableColumn InsuranceValueColumn
        {
            get { return Schema.Columns[34]; }
        }
        
        
        
        public static TableSchema.TableColumn CancelRequestRcdColumn
        {
            get { return Schema.Columns[35]; }
        }
        
        
        
        public static TableSchema.TableColumn CancelRequestByIDColumn
        {
            get { return Schema.Columns[36]; }
        }
        
        
        
        public static TableSchema.TableColumn OrderCancelledColumn
        {
            get { return Schema.Columns[37]; }
        }
        
        
        
        public static TableSchema.TableColumn CancelDateColumn
        {
            get { return Schema.Columns[38]; }
        }
        
        
        
        public static TableSchema.TableColumn CancelledByIDColumn
        {
            get { return Schema.Columns[39]; }
        }
        
        
        
        public static TableSchema.TableColumn FaoColumn
        {
            get { return Schema.Columns[40]; }
        }
        
        
        
        public static TableSchema.TableColumn TsColumn
        {
            get { return Schema.Columns[41]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string OrderID = @"OrderID";
			 public static string OrderNumber = @"OrderNumber";
			 public static string DateOrderReceived = @"DateOrderReceived";
			 public static string Payee = @"Payee";
			 public static string DeliveryAddress = @"DeliveryAddress";
			 public static string DestinationCountry = @"DestinationCountry";
			 public static string CompanyID = @"CompanyID";
			 public static string ConsigneeID = @"ConsigneeID";
			 public static string PrinterID = @"PrinterID";
			 public static string CustomerRef = @"CustomerRef";
			 public static string PrintersRef = @"PrintersRef";
			 public static string ContactID = @"ContactID";
			 public static string CargoReadyDate = @"CargoReadyDate";
			 public static string CargoReceivedDate = @"CargoReceivedDate";
			 public static string OriginID = @"OriginID";
			 public static string DestID = @"DestID";
			 public static string FinalDestID = @"FinalDestID";
			 public static string DeliveryAddressID = @"DeliveryAddressID";
			 public static string AttentionOfID = @"AttentionOfID";
			 public static string FlightID = @"FlightID";
			 public static string Etd = @"ETD";
			 public static string Eta = @"ETA";
			 public static string HAWBno = @"HAWBno";
			 public static string HAWBAdded = @"HAWBAdded";
			 public static string ShippedonBoard = @"ShippedonBoard";
			 public static string Titles = @"Titles";
			 public static string Cartons = @"Cartons";
			 public static string ActualWeight = @"ActualWeight";
			 public static string ActualVolume = @"ActualVolume";
			 public static string RemarkstoAgent = @"RemarkstoAgent";
			 public static string RemarkstoCust = @"RemarkstoCust";
			 public static string JobClosed = @"JobClosed";
			 public static string JobClosureDate = @"JobClosureDate";
			 public static string CompositeInvRef = @"CompositeInvRef";
			 public static string InsuranceValue = @"InsuranceValue";
			 public static string CancelRequestRcd = @"CancelRequestRcd";
			 public static string CancelRequestByID = @"CancelRequestByID";
			 public static string OrderCancelled = @"OrderCancelled";
			 public static string CancelDate = @"CancelDate";
			 public static string CancelledByID = @"CancelledByID";
			 public static string Fao = @"FAO";
			 public static string Ts = @"TS";
						
		}
		#endregion
		
		#region Update PK Collections
		
        public void SetPKValues()
        {
}
        #endregion
    
        #region Deep Save
		
        public void DeepSave()
        {
            Save();
            
}
        #endregion
	}
}
