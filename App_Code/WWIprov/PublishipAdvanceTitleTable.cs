using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DAL.Logistics
{
	/// <summary>
	/// Strongly-typed collection for the PublishipAdvanceTitleTable class.
	/// </summary>
    [Serializable]
	public partial class PublishipAdvanceTitleTableCollection : ActiveList<PublishipAdvanceTitleTable, PublishipAdvanceTitleTableCollection>
	{	   
		public PublishipAdvanceTitleTableCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>PublishipAdvanceTitleTableCollection</returns>
		public PublishipAdvanceTitleTableCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                PublishipAdvanceTitleTable o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the PublishipAdvanceTitleTable table.
	/// </summary>
	[Serializable]
	public partial class PublishipAdvanceTitleTable : ActiveRecord<PublishipAdvanceTitleTable>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public PublishipAdvanceTitleTable()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public PublishipAdvanceTitleTable(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public PublishipAdvanceTitleTable(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public PublishipAdvanceTitleTable(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("PublishipAdvanceTitleTable", TableType.Table, DataService.GetInstance("WWIprov"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarPATitleID = new TableSchema.TableColumn(schema);
				colvarPATitleID.ColumnName = "PATitleID";
				colvarPATitleID.DataType = DbType.Int32;
				colvarPATitleID.MaxLength = 0;
				colvarPATitleID.AutoIncrement = true;
				colvarPATitleID.IsNullable = false;
				colvarPATitleID.IsPrimaryKey = true;
				colvarPATitleID.IsForeignKey = false;
				colvarPATitleID.IsReadOnly = false;
				colvarPATitleID.DefaultSetting = @"";
				colvarPATitleID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPATitleID);
				
				TableSchema.TableColumn colvarPAOrderID = new TableSchema.TableColumn(schema);
				colvarPAOrderID.ColumnName = "PAOrderID";
				colvarPAOrderID.DataType = DbType.Int32;
				colvarPAOrderID.MaxLength = 0;
				colvarPAOrderID.AutoIncrement = false;
				colvarPAOrderID.IsNullable = false;
				colvarPAOrderID.IsPrimaryKey = false;
				colvarPAOrderID.IsForeignKey = true;
				colvarPAOrderID.IsReadOnly = false;
				colvarPAOrderID.DefaultSetting = @"";
				
					colvarPAOrderID.ForeignKeyTableName = "PublishipAdvanceOrderTable";
				schema.Columns.Add(colvarPAOrderID);
				
				TableSchema.TableColumn colvarTitle = new TableSchema.TableColumn(schema);
				colvarTitle.ColumnName = "Title";
				colvarTitle.DataType = DbType.String;
				colvarTitle.MaxLength = 50;
				colvarTitle.AutoIncrement = false;
				colvarTitle.IsNullable = true;
				colvarTitle.IsPrimaryKey = false;
				colvarTitle.IsForeignKey = false;
				colvarTitle.IsReadOnly = false;
				colvarTitle.DefaultSetting = @"";
				colvarTitle.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTitle);
				
				TableSchema.TableColumn colvarTs = new TableSchema.TableColumn(schema);
				colvarTs.ColumnName = "ts";
				colvarTs.DataType = DbType.Binary;
				colvarTs.MaxLength = 0;
				colvarTs.AutoIncrement = false;
				colvarTs.IsNullable = true;
				colvarTs.IsPrimaryKey = false;
				colvarTs.IsForeignKey = false;
				colvarTs.IsReadOnly = true;
				colvarTs.DefaultSetting = @"";
				colvarTs.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTs);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["WWIprov"].AddSchema("PublishipAdvanceTitleTable",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("PATitleID")]
		[Bindable(true)]
		public int PATitleID 
		{
			get { return GetColumnValue<int>(Columns.PATitleID); }
			set { SetColumnValue(Columns.PATitleID, value); }
		}
		  
		[XmlAttribute("PAOrderID")]
		[Bindable(true)]
		public int PAOrderID 
		{
			get { return GetColumnValue<int>(Columns.PAOrderID); }
			set { SetColumnValue(Columns.PAOrderID, value); }
		}
		  
		[XmlAttribute("Title")]
		[Bindable(true)]
		public string Title 
		{
			get { return GetColumnValue<string>(Columns.Title); }
			set { SetColumnValue(Columns.Title, value); }
		}
		  
		[XmlAttribute("Ts")]
		[Bindable(true)]
		public byte[] Ts 
		{
			get { return GetColumnValue<byte[]>(Columns.Ts); }
			set { SetColumnValue(Columns.Ts, value); }
		}
		
		#endregion
		
		
		#region PrimaryKey Methods		
		
        protected override void SetPrimaryKey(object oValue)
        {
            base.SetPrimaryKey(oValue);
            
            SetPKValues();
        }
        
		
		public DAL.Logistics.PublishipAdvanceCartonTableCollection PublishipAdvanceCartonTableRecords()
		{
			return new DAL.Logistics.PublishipAdvanceCartonTableCollection().Where(PublishipAdvanceCartonTable.Columns.PATitleID, PATitleID).Load();
		}
		#endregion
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a PublishipAdvanceOrderTable ActiveRecord object related to this PublishipAdvanceTitleTable
		/// 
		/// </summary>
		public DAL.Logistics.PublishipAdvanceOrderTable PublishipAdvanceOrderTable
		{
			get { return DAL.Logistics.PublishipAdvanceOrderTable.FetchByID(this.PAOrderID); }
			set { SetColumnValue("PAOrderID", value.OrderID); }
		}
		
		
		#endregion
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int varPAOrderID,string varTitle,byte[] varTs)
		{
			PublishipAdvanceTitleTable item = new PublishipAdvanceTitleTable();
			
			item.PAOrderID = varPAOrderID;
			
			item.Title = varTitle;
			
			item.Ts = varTs;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varPATitleID,int varPAOrderID,string varTitle,byte[] varTs)
		{
			PublishipAdvanceTitleTable item = new PublishipAdvanceTitleTable();
			
				item.PATitleID = varPATitleID;
			
				item.PAOrderID = varPAOrderID;
			
				item.Title = varTitle;
			
				item.Ts = varTs;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn PATitleIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn PAOrderIDColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn TitleColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn TsColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string PATitleID = @"PATitleID";
			 public static string PAOrderID = @"PAOrderID";
			 public static string Title = @"Title";
			 public static string Ts = @"ts";
						
		}
		#endregion
		
		#region Update PK Collections
		
        public void SetPKValues()
        {
}
        #endregion
    
        #region Deep Save
		
        public void DeepSave()
        {
            Save();
            
}
        #endregion
	}
}
