using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DAL.Logistics{
    /// <summary>
    /// Strongly-typed collection for the MyOrdersView class.
    /// </summary>
    [Serializable]
    public partial class MyOrdersViewCollection : ReadOnlyList<MyOrdersView, MyOrdersViewCollection>
    {        
        public MyOrdersViewCollection() {}
    }
    /// <summary>
    /// This is  Read-only wrapper class for the MyOrdersView view.
    /// </summary>
    [Serializable]
    public partial class MyOrdersView : ReadOnlyRecord<MyOrdersView>, IReadOnlyRecord
    {
    
	    #region Default Settings
	    protected static void SetSQLProps() 
	    {
		    GetTableSchema();
	    }
	    #endregion
        #region Schema Accessor
	    public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                {
                    SetSQLProps();
                }
                return BaseSchema;
            }
        }
    	
        private static void GetTableSchema() 
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("MyOrdersView", TableType.View, DataService.GetInstance("WWIprov"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns
                
                TableSchema.TableColumn colvarOrderNumber = new TableSchema.TableColumn(schema);
                colvarOrderNumber.ColumnName = "OrderNumber";
                colvarOrderNumber.DataType = DbType.Int32;
                colvarOrderNumber.MaxLength = 0;
                colvarOrderNumber.AutoIncrement = false;
                colvarOrderNumber.IsNullable = true;
                colvarOrderNumber.IsPrimaryKey = false;
                colvarOrderNumber.IsForeignKey = false;
                colvarOrderNumber.IsReadOnly = false;
                
                schema.Columns.Add(colvarOrderNumber);
                
                TableSchema.TableColumn colvarPublishipOrder = new TableSchema.TableColumn(schema);
                colvarPublishipOrder.ColumnName = "PublishipOrder";
                colvarPublishipOrder.DataType = DbType.Boolean;
                colvarPublishipOrder.MaxLength = 0;
                colvarPublishipOrder.AutoIncrement = false;
                colvarPublishipOrder.IsNullable = false;
                colvarPublishipOrder.IsPrimaryKey = false;
                colvarPublishipOrder.IsForeignKey = false;
                colvarPublishipOrder.IsReadOnly = false;
                
                schema.Columns.Add(colvarPublishipOrder);
                
                TableSchema.TableColumn colvarCompanyID = new TableSchema.TableColumn(schema);
                colvarCompanyID.ColumnName = "CompanyID";
                colvarCompanyID.DataType = DbType.Int32;
                colvarCompanyID.MaxLength = 0;
                colvarCompanyID.AutoIncrement = false;
                colvarCompanyID.IsNullable = true;
                colvarCompanyID.IsPrimaryKey = false;
                colvarCompanyID.IsForeignKey = false;
                colvarCompanyID.IsReadOnly = false;
                
                schema.Columns.Add(colvarCompanyID);
                
                TableSchema.TableColumn colvarCompanyName = new TableSchema.TableColumn(schema);
                colvarCompanyName.ColumnName = "CompanyName";
                colvarCompanyName.DataType = DbType.String;
                colvarCompanyName.MaxLength = 50;
                colvarCompanyName.AutoIncrement = false;
                colvarCompanyName.IsNullable = true;
                colvarCompanyName.IsPrimaryKey = false;
                colvarCompanyName.IsForeignKey = false;
                colvarCompanyName.IsReadOnly = false;
                
                schema.Columns.Add(colvarCompanyName);
                
                TableSchema.TableColumn colvarExWorksDate = new TableSchema.TableColumn(schema);
                colvarExWorksDate.ColumnName = "ExWorksDate";
                colvarExWorksDate.DataType = DbType.DateTime;
                colvarExWorksDate.MaxLength = 0;
                colvarExWorksDate.AutoIncrement = false;
                colvarExWorksDate.IsNullable = true;
                colvarExWorksDate.IsPrimaryKey = false;
                colvarExWorksDate.IsForeignKey = false;
                colvarExWorksDate.IsReadOnly = false;
                
                schema.Columns.Add(colvarExWorksDate);
                
                TableSchema.TableColumn colvarPortName = new TableSchema.TableColumn(schema);
                colvarPortName.ColumnName = "PortName";
                colvarPortName.DataType = DbType.String;
                colvarPortName.MaxLength = 30;
                colvarPortName.AutoIncrement = false;
                colvarPortName.IsNullable = true;
                colvarPortName.IsPrimaryKey = false;
                colvarPortName.IsForeignKey = false;
                colvarPortName.IsReadOnly = false;
                
                schema.Columns.Add(colvarPortName);
                
                TableSchema.TableColumn colvarDestPortName = new TableSchema.TableColumn(schema);
                colvarDestPortName.ColumnName = "DestPortName";
                colvarDestPortName.DataType = DbType.String;
                colvarDestPortName.MaxLength = 30;
                colvarDestPortName.AutoIncrement = false;
                colvarDestPortName.IsNullable = true;
                colvarDestPortName.IsPrimaryKey = false;
                colvarDestPortName.IsForeignKey = false;
                colvarDestPortName.IsReadOnly = false;
                
                schema.Columns.Add(colvarDestPortName);
                
                TableSchema.TableColumn colvarJoined = new TableSchema.TableColumn(schema);
                colvarJoined.ColumnName = "Joined";
                colvarJoined.DataType = DbType.String;
                colvarJoined.MaxLength = 50;
                colvarJoined.AutoIncrement = false;
                colvarJoined.IsNullable = true;
                colvarJoined.IsPrimaryKey = false;
                colvarJoined.IsForeignKey = false;
                colvarJoined.IsReadOnly = false;
                
                schema.Columns.Add(colvarJoined);
                
                TableSchema.TableColumn colvarTitle = new TableSchema.TableColumn(schema);
                colvarTitle.ColumnName = "Title";
                colvarTitle.DataType = DbType.String;
                colvarTitle.MaxLength = 100;
                colvarTitle.AutoIncrement = false;
                colvarTitle.IsNullable = true;
                colvarTitle.IsPrimaryKey = false;
                colvarTitle.IsForeignKey = false;
                colvarTitle.IsReadOnly = false;
                
                schema.Columns.Add(colvarTitle);
                
                TableSchema.TableColumn colvarCopies = new TableSchema.TableColumn(schema);
                colvarCopies.ColumnName = "Copies";
                colvarCopies.DataType = DbType.Int32;
                colvarCopies.MaxLength = 0;
                colvarCopies.AutoIncrement = false;
                colvarCopies.IsNullable = true;
                colvarCopies.IsPrimaryKey = false;
                colvarCopies.IsForeignKey = false;
                colvarCopies.IsReadOnly = false;
                
                schema.Columns.Add(colvarCopies);
                
                TableSchema.TableColumn colvarDocsRcdAndApproved = new TableSchema.TableColumn(schema);
                colvarDocsRcdAndApproved.ColumnName = "DocsRcdAndApproved";
                colvarDocsRcdAndApproved.DataType = DbType.Boolean;
                colvarDocsRcdAndApproved.MaxLength = 0;
                colvarDocsRcdAndApproved.AutoIncrement = false;
                colvarDocsRcdAndApproved.IsNullable = false;
                colvarDocsRcdAndApproved.IsPrimaryKey = false;
                colvarDocsRcdAndApproved.IsForeignKey = false;
                colvarDocsRcdAndApproved.IsReadOnly = false;
                
                schema.Columns.Add(colvarDocsRcdAndApproved);
                
                TableSchema.TableColumn colvarDocsApprovedDate = new TableSchema.TableColumn(schema);
                colvarDocsApprovedDate.ColumnName = "DocsApprovedDate";
                colvarDocsApprovedDate.DataType = DbType.DateTime;
                colvarDocsApprovedDate.MaxLength = 0;
                colvarDocsApprovedDate.AutoIncrement = false;
                colvarDocsApprovedDate.IsNullable = true;
                colvarDocsApprovedDate.IsPrimaryKey = false;
                colvarDocsApprovedDate.IsForeignKey = false;
                colvarDocsApprovedDate.IsReadOnly = false;
                
                schema.Columns.Add(colvarDocsApprovedDate);
                
                TableSchema.TableColumn colvarOldVesselName = new TableSchema.TableColumn(schema);
                colvarOldVesselName.ColumnName = "OldVesselName";
                colvarOldVesselName.DataType = DbType.String;
                colvarOldVesselName.MaxLength = 50;
                colvarOldVesselName.AutoIncrement = false;
                colvarOldVesselName.IsNullable = true;
                colvarOldVesselName.IsPrimaryKey = false;
                colvarOldVesselName.IsForeignKey = false;
                colvarOldVesselName.IsReadOnly = false;
                
                schema.Columns.Add(colvarOldVesselName);
                
                TableSchema.TableColumn colvarVesselName = new TableSchema.TableColumn(schema);
                colvarVesselName.ColumnName = "VesselName";
                colvarVesselName.DataType = DbType.String;
                colvarVesselName.MaxLength = 50;
                colvarVesselName.AutoIncrement = false;
                colvarVesselName.IsNullable = true;
                colvarVesselName.IsPrimaryKey = false;
                colvarVesselName.IsForeignKey = false;
                colvarVesselName.IsReadOnly = false;
                
                schema.Columns.Add(colvarVesselName);
                
                TableSchema.TableColumn colvarJobClosed = new TableSchema.TableColumn(schema);
                colvarJobClosed.ColumnName = "JobClosed";
                colvarJobClosed.DataType = DbType.Boolean;
                colvarJobClosed.MaxLength = 0;
                colvarJobClosed.AutoIncrement = false;
                colvarJobClosed.IsNullable = false;
                colvarJobClosed.IsPrimaryKey = false;
                colvarJobClosed.IsForeignKey = false;
                colvarJobClosed.IsReadOnly = false;
                
                schema.Columns.Add(colvarJobClosed);
                
                TableSchema.TableColumn colvarOrderControllerID = new TableSchema.TableColumn(schema);
                colvarOrderControllerID.ColumnName = "OrderControllerID";
                colvarOrderControllerID.DataType = DbType.Int32;
                colvarOrderControllerID.MaxLength = 0;
                colvarOrderControllerID.AutoIncrement = false;
                colvarOrderControllerID.IsNullable = true;
                colvarOrderControllerID.IsPrimaryKey = false;
                colvarOrderControllerID.IsForeignKey = false;
                colvarOrderControllerID.IsReadOnly = false;
                
                schema.Columns.Add(colvarOrderControllerID);
                
                TableSchema.TableColumn colvarOperationsControllerID = new TableSchema.TableColumn(schema);
                colvarOperationsControllerID.ColumnName = "OperationsControllerID";
                colvarOperationsControllerID.DataType = DbType.Int32;
                colvarOperationsControllerID.MaxLength = 0;
                colvarOperationsControllerID.AutoIncrement = false;
                colvarOperationsControllerID.IsNullable = true;
                colvarOperationsControllerID.IsPrimaryKey = false;
                colvarOperationsControllerID.IsForeignKey = false;
                colvarOperationsControllerID.IsReadOnly = false;
                
                schema.Columns.Add(colvarOperationsControllerID);
                
                TableSchema.TableColumn colvarOriginPortControllerID = new TableSchema.TableColumn(schema);
                colvarOriginPortControllerID.ColumnName = "OriginPortControllerID";
                colvarOriginPortControllerID.DataType = DbType.Int32;
                colvarOriginPortControllerID.MaxLength = 0;
                colvarOriginPortControllerID.AutoIncrement = false;
                colvarOriginPortControllerID.IsNullable = true;
                colvarOriginPortControllerID.IsPrimaryKey = false;
                colvarOriginPortControllerID.IsForeignKey = false;
                colvarOriginPortControllerID.IsReadOnly = false;
                
                schema.Columns.Add(colvarOriginPortControllerID);
                
                TableSchema.TableColumn colvarDestinationPortControllerID = new TableSchema.TableColumn(schema);
                colvarDestinationPortControllerID.ColumnName = "DestinationPortControllerID";
                colvarDestinationPortControllerID.DataType = DbType.Int32;
                colvarDestinationPortControllerID.MaxLength = 0;
                colvarDestinationPortControllerID.AutoIncrement = false;
                colvarDestinationPortControllerID.IsNullable = true;
                colvarDestinationPortControllerID.IsPrimaryKey = false;
                colvarDestinationPortControllerID.IsForeignKey = false;
                colvarDestinationPortControllerID.IsReadOnly = false;
                
                schema.Columns.Add(colvarDestinationPortControllerID);
                
                TableSchema.TableColumn colvarHot = new TableSchema.TableColumn(schema);
                colvarHot.ColumnName = "Hot";
                colvarHot.DataType = DbType.Boolean;
                colvarHot.MaxLength = 0;
                colvarHot.AutoIncrement = false;
                colvarHot.IsNullable = false;
                colvarHot.IsPrimaryKey = false;
                colvarHot.IsForeignKey = false;
                colvarHot.IsReadOnly = false;
                
                schema.Columns.Add(colvarHot);
                
                TableSchema.TableColumn colvarOrderID = new TableSchema.TableColumn(schema);
                colvarOrderID.ColumnName = "OrderID";
                colvarOrderID.DataType = DbType.Int32;
                colvarOrderID.MaxLength = 0;
                colvarOrderID.AutoIncrement = false;
                colvarOrderID.IsNullable = false;
                colvarOrderID.IsPrimaryKey = false;
                colvarOrderID.IsForeignKey = false;
                colvarOrderID.IsReadOnly = false;
                
                schema.Columns.Add(colvarOrderID);
                
                
                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["WWIprov"].AddSchema("MyOrdersView",schema);
            }
        }
        #endregion
        
        #region Query Accessor
	    public static Query CreateQuery()
	    {
		    return new Query(Schema);
	    }
	    #endregion
	    
	    #region .ctors
	    public MyOrdersView()
	    {
            SetSQLProps();
            SetDefaults();
            MarkNew();
        }
        public MyOrdersView(bool useDatabaseDefaults)
	    {
		    SetSQLProps();
		    if(useDatabaseDefaults)
		    {
				ForceDefaults();
			}
			MarkNew();
	    }
	    
	    public MyOrdersView(object keyID)
	    {
		    SetSQLProps();
		    LoadByKey(keyID);
	    }
    	 
	    public MyOrdersView(string columnName, object columnValue)
        {
            SetSQLProps();
            LoadByParam(columnName,columnValue);
        }
        
	    #endregion
	    
	    #region Props
	    
          
        [XmlAttribute("OrderNumber")]
        [Bindable(true)]
        public int? OrderNumber 
	    {
		    get
		    {
			    return GetColumnValue<int?>("OrderNumber");
		    }
            set 
		    {
			    SetColumnValue("OrderNumber", value);
            }
        }
	      
        [XmlAttribute("PublishipOrder")]
        [Bindable(true)]
        public bool PublishipOrder 
	    {
		    get
		    {
			    return GetColumnValue<bool>("PublishipOrder");
		    }
            set 
		    {
			    SetColumnValue("PublishipOrder", value);
            }
        }
	      
        [XmlAttribute("CompanyID")]
        [Bindable(true)]
        public int? CompanyID 
	    {
		    get
		    {
			    return GetColumnValue<int?>("CompanyID");
		    }
            set 
		    {
			    SetColumnValue("CompanyID", value);
            }
        }
	      
        [XmlAttribute("CompanyName")]
        [Bindable(true)]
        public string CompanyName 
	    {
		    get
		    {
			    return GetColumnValue<string>("CompanyName");
		    }
            set 
		    {
			    SetColumnValue("CompanyName", value);
            }
        }
	      
        [XmlAttribute("ExWorksDate")]
        [Bindable(true)]
        public DateTime? ExWorksDate 
	    {
		    get
		    {
			    return GetColumnValue<DateTime?>("ExWorksDate");
		    }
            set 
		    {
			    SetColumnValue("ExWorksDate", value);
            }
        }
	      
        [XmlAttribute("PortName")]
        [Bindable(true)]
        public string PortName 
	    {
		    get
		    {
			    return GetColumnValue<string>("PortName");
		    }
            set 
		    {
			    SetColumnValue("PortName", value);
            }
        }
	      
        [XmlAttribute("DestPortName")]
        [Bindable(true)]
        public string DestPortName 
	    {
		    get
		    {
			    return GetColumnValue<string>("DestPortName");
		    }
            set 
		    {
			    SetColumnValue("DestPortName", value);
            }
        }
	      
        [XmlAttribute("Joined")]
        [Bindable(true)]
        public string Joined 
	    {
		    get
		    {
			    return GetColumnValue<string>("Joined");
		    }
            set 
		    {
			    SetColumnValue("Joined", value);
            }
        }
	      
        [XmlAttribute("Title")]
        [Bindable(true)]
        public string Title 
	    {
		    get
		    {
			    return GetColumnValue<string>("Title");
		    }
            set 
		    {
			    SetColumnValue("Title", value);
            }
        }
	      
        [XmlAttribute("Copies")]
        [Bindable(true)]
        public int? Copies 
	    {
		    get
		    {
			    return GetColumnValue<int?>("Copies");
		    }
            set 
		    {
			    SetColumnValue("Copies", value);
            }
        }
	      
        [XmlAttribute("DocsRcdAndApproved")]
        [Bindable(true)]
        public bool DocsRcdAndApproved 
	    {
		    get
		    {
			    return GetColumnValue<bool>("DocsRcdAndApproved");
		    }
            set 
		    {
			    SetColumnValue("DocsRcdAndApproved", value);
            }
        }
	      
        [XmlAttribute("DocsApprovedDate")]
        [Bindable(true)]
        public DateTime? DocsApprovedDate 
	    {
		    get
		    {
			    return GetColumnValue<DateTime?>("DocsApprovedDate");
		    }
            set 
		    {
			    SetColumnValue("DocsApprovedDate", value);
            }
        }
	      
        [XmlAttribute("OldVesselName")]
        [Bindable(true)]
        public string OldVesselName 
	    {
		    get
		    {
			    return GetColumnValue<string>("OldVesselName");
		    }
            set 
		    {
			    SetColumnValue("OldVesselName", value);
            }
        }
	      
        [XmlAttribute("VesselName")]
        [Bindable(true)]
        public string VesselName 
	    {
		    get
		    {
			    return GetColumnValue<string>("VesselName");
		    }
            set 
		    {
			    SetColumnValue("VesselName", value);
            }
        }
	      
        [XmlAttribute("JobClosed")]
        [Bindable(true)]
        public bool JobClosed 
	    {
		    get
		    {
			    return GetColumnValue<bool>("JobClosed");
		    }
            set 
		    {
			    SetColumnValue("JobClosed", value);
            }
        }
	      
        [XmlAttribute("OrderControllerID")]
        [Bindable(true)]
        public int? OrderControllerID 
	    {
		    get
		    {
			    return GetColumnValue<int?>("OrderControllerID");
		    }
            set 
		    {
			    SetColumnValue("OrderControllerID", value);
            }
        }
	      
        [XmlAttribute("OperationsControllerID")]
        [Bindable(true)]
        public int? OperationsControllerID 
	    {
		    get
		    {
			    return GetColumnValue<int?>("OperationsControllerID");
		    }
            set 
		    {
			    SetColumnValue("OperationsControllerID", value);
            }
        }
	      
        [XmlAttribute("OriginPortControllerID")]
        [Bindable(true)]
        public int? OriginPortControllerID 
	    {
		    get
		    {
			    return GetColumnValue<int?>("OriginPortControllerID");
		    }
            set 
		    {
			    SetColumnValue("OriginPortControllerID", value);
            }
        }
	      
        [XmlAttribute("DestinationPortControllerID")]
        [Bindable(true)]
        public int? DestinationPortControllerID 
	    {
		    get
		    {
			    return GetColumnValue<int?>("DestinationPortControllerID");
		    }
            set 
		    {
			    SetColumnValue("DestinationPortControllerID", value);
            }
        }
	      
        [XmlAttribute("Hot")]
        [Bindable(true)]
        public bool Hot 
	    {
		    get
		    {
			    return GetColumnValue<bool>("Hot");
		    }
            set 
		    {
			    SetColumnValue("Hot", value);
            }
        }
	      
        [XmlAttribute("OrderID")]
        [Bindable(true)]
        public int OrderID 
	    {
		    get
		    {
			    return GetColumnValue<int>("OrderID");
		    }
            set 
		    {
			    SetColumnValue("OrderID", value);
            }
        }
	    
	    #endregion
    
	    #region Columns Struct
	    public struct Columns
	    {
		    
		    
            public static string OrderNumber = @"OrderNumber";
            
            public static string PublishipOrder = @"PublishipOrder";
            
            public static string CompanyID = @"CompanyID";
            
            public static string CompanyName = @"CompanyName";
            
            public static string ExWorksDate = @"ExWorksDate";
            
            public static string PortName = @"PortName";
            
            public static string DestPortName = @"DestPortName";
            
            public static string Joined = @"Joined";
            
            public static string Title = @"Title";
            
            public static string Copies = @"Copies";
            
            public static string DocsRcdAndApproved = @"DocsRcdAndApproved";
            
            public static string DocsApprovedDate = @"DocsApprovedDate";
            
            public static string OldVesselName = @"OldVesselName";
            
            public static string VesselName = @"VesselName";
            
            public static string JobClosed = @"JobClosed";
            
            public static string OrderControllerID = @"OrderControllerID";
            
            public static string OperationsControllerID = @"OperationsControllerID";
            
            public static string OriginPortControllerID = @"OriginPortControllerID";
            
            public static string DestinationPortControllerID = @"DestinationPortControllerID";
            
            public static string Hot = @"Hot";
            
            public static string OrderID = @"OrderID";
            
	    }
	    #endregion
	    
	    
	    #region IAbstractRecord Members
        public new CT GetColumnValue<CT>(string columnName) {
            return base.GetColumnValue<CT>(columnName);
        }
        public object GetColumnValue(string columnName) {
            return base.GetColumnValue<object>(columnName);
        }
        #endregion
	    
    }
}
