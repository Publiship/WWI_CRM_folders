using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DAL.Logistics
{
    /// <summary>
    /// Controller class for OrderTemplateTable
    /// </summary>
    [System.ComponentModel.DataObject]
    public partial class OrderTemplateTableController
    {
        // Preload our schema..
        OrderTemplateTable thisSchemaLoad = new OrderTemplateTable();
        private string userName = String.Empty;
        protected string UserName
        {
            get
            {
				if (userName.Length == 0) 
				{
    				if (System.Web.HttpContext.Current != null)
    				{
						userName=System.Web.HttpContext.Current.User.Identity.Name;
					}
					else
					{
						userName=System.Threading.Thread.CurrentPrincipal.Identity.Name;
					}
				}
				return userName;
            }
        }
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public OrderTemplateTableCollection FetchAll()
        {
            OrderTemplateTableCollection coll = new OrderTemplateTableCollection();
            Query qry = new Query(OrderTemplateTable.Schema);
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public OrderTemplateTableCollection FetchByID(object OrderTemplateID)
        {
            OrderTemplateTableCollection coll = new OrderTemplateTableCollection().Where("OrderTemplateID", OrderTemplateID).Load();
            return coll;
        }
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
        public OrderTemplateTableCollection FetchByQuery(Query qry)
        {
            OrderTemplateTableCollection coll = new OrderTemplateTableCollection();
            coll.LoadAndCloseReader(qry.ExecuteReader()); 
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool Delete(object OrderTemplateID)
        {
            return (OrderTemplateTable.Delete(OrderTemplateID) == 1);
        }
        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public bool Destroy(object OrderTemplateID)
        {
            return (OrderTemplateTable.Destroy(OrderTemplateID) == 1);
        }
        
        
    	
	    /// <summary>
	    /// Inserts a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
	    public void Insert(string TemplateName,string OfficeIndicator,bool? PublishipOrder,int? CompanyID,int? ConsigneeID,int? NotifyPartyID,int? AgentAtOriginID,int? AgentAtDestinationID,int? PrinterID,int? ClearingAgentID,int? OnCarriageID,int? OrderControllerID,int? OperationsControllerID,int? OriginPortControllerID,int? DestinationPortControllerID,string CustomersRef,int? ContactID,int? OriginPointID,int? PortID,int? DestinationPortID,int? FinalDestinationID,int? CountryID,int? DestinationCountryID,byte[] Ts)
	    {
		    OrderTemplateTable item = new OrderTemplateTable();
		    
            item.TemplateName = TemplateName;
            
            item.OfficeIndicator = OfficeIndicator;
            
            item.PublishipOrder = PublishipOrder;
            
            item.CompanyID = CompanyID;
            
            item.ConsigneeID = ConsigneeID;
            
            item.NotifyPartyID = NotifyPartyID;
            
            item.AgentAtOriginID = AgentAtOriginID;
            
            item.AgentAtDestinationID = AgentAtDestinationID;
            
            item.PrinterID = PrinterID;
            
            item.ClearingAgentID = ClearingAgentID;
            
            item.OnCarriageID = OnCarriageID;
            
            item.OrderControllerID = OrderControllerID;
            
            item.OperationsControllerID = OperationsControllerID;
            
            item.OriginPortControllerID = OriginPortControllerID;
            
            item.DestinationPortControllerID = DestinationPortControllerID;
            
            item.CustomersRef = CustomersRef;
            
            item.ContactID = ContactID;
            
            item.OriginPointID = OriginPointID;
            
            item.PortID = PortID;
            
            item.DestinationPortID = DestinationPortID;
            
            item.FinalDestinationID = FinalDestinationID;
            
            item.CountryID = CountryID;
            
            item.DestinationCountryID = DestinationCountryID;
            
            item.Ts = Ts;
            
	    
		    item.Save(UserName);
	    }
    	
	    /// <summary>
	    /// Updates a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
	    public void Update(int OrderTemplateID,string TemplateName,string OfficeIndicator,bool? PublishipOrder,int? CompanyID,int? ConsigneeID,int? NotifyPartyID,int? AgentAtOriginID,int? AgentAtDestinationID,int? PrinterID,int? ClearingAgentID,int? OnCarriageID,int? OrderControllerID,int? OperationsControllerID,int? OriginPortControllerID,int? DestinationPortControllerID,string CustomersRef,int? ContactID,int? OriginPointID,int? PortID,int? DestinationPortID,int? FinalDestinationID,int? CountryID,int? DestinationCountryID,byte[] Ts)
	    {
		    OrderTemplateTable item = new OrderTemplateTable();
	        item.MarkOld();
	        item.IsLoaded = true;
		    
			item.OrderTemplateID = OrderTemplateID;
				
			item.TemplateName = TemplateName;
				
			item.OfficeIndicator = OfficeIndicator;
				
			item.PublishipOrder = PublishipOrder;
				
			item.CompanyID = CompanyID;
				
			item.ConsigneeID = ConsigneeID;
				
			item.NotifyPartyID = NotifyPartyID;
				
			item.AgentAtOriginID = AgentAtOriginID;
				
			item.AgentAtDestinationID = AgentAtDestinationID;
				
			item.PrinterID = PrinterID;
				
			item.ClearingAgentID = ClearingAgentID;
				
			item.OnCarriageID = OnCarriageID;
				
			item.OrderControllerID = OrderControllerID;
				
			item.OperationsControllerID = OperationsControllerID;
				
			item.OriginPortControllerID = OriginPortControllerID;
				
			item.DestinationPortControllerID = DestinationPortControllerID;
				
			item.CustomersRef = CustomersRef;
				
			item.ContactID = ContactID;
				
			item.OriginPointID = OriginPointID;
				
			item.PortID = PortID;
				
			item.DestinationPortID = DestinationPortID;
				
			item.FinalDestinationID = FinalDestinationID;
				
			item.CountryID = CountryID;
				
			item.DestinationCountryID = DestinationCountryID;
				
			item.Ts = Ts;
				
	        item.Save(UserName);
	    }
    }
}
