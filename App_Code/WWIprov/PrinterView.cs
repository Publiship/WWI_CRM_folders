using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DAL.Logistics{
    /// <summary>
    /// Strongly-typed collection for the PrinterView class.
    /// </summary>
    [Serializable]
    public partial class PrinterViewCollection : ReadOnlyList<PrinterView, PrinterViewCollection>
    {        
        public PrinterViewCollection() {}
    }
    /// <summary>
    /// This is  Read-only wrapper class for the PrinterView view.
    /// </summary>
    [Serializable]
    public partial class PrinterView : ReadOnlyRecord<PrinterView>, IReadOnlyRecord
    {
    
	    #region Default Settings
	    protected static void SetSQLProps() 
	    {
		    GetTableSchema();
	    }
	    #endregion
        #region Schema Accessor
	    public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                {
                    SetSQLProps();
                }
                return BaseSchema;
            }
        }
    	
        private static void GetTableSchema() 
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("PrinterView", TableType.View, DataService.GetInstance("WWIprov"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns
                
                TableSchema.TableColumn colvarCompanyID = new TableSchema.TableColumn(schema);
                colvarCompanyID.ColumnName = "CompanyID";
                colvarCompanyID.DataType = DbType.Int32;
                colvarCompanyID.MaxLength = 0;
                colvarCompanyID.AutoIncrement = false;
                colvarCompanyID.IsNullable = false;
                colvarCompanyID.IsPrimaryKey = false;
                colvarCompanyID.IsForeignKey = false;
                colvarCompanyID.IsReadOnly = false;
                
                schema.Columns.Add(colvarCompanyID);
                
                TableSchema.TableColumn colvarPrinterName = new TableSchema.TableColumn(schema);
                colvarPrinterName.ColumnName = "PrinterName";
                colvarPrinterName.DataType = DbType.String;
                colvarPrinterName.MaxLength = 50;
                colvarPrinterName.AutoIncrement = false;
                colvarPrinterName.IsNullable = true;
                colvarPrinterName.IsPrimaryKey = false;
                colvarPrinterName.IsForeignKey = false;
                colvarPrinterName.IsReadOnly = false;
                
                schema.Columns.Add(colvarPrinterName);
                
                TableSchema.TableColumn colvarPrinterAdd1 = new TableSchema.TableColumn(schema);
                colvarPrinterAdd1.ColumnName = "PrinterAdd1";
                colvarPrinterAdd1.DataType = DbType.String;
                colvarPrinterAdd1.MaxLength = 40;
                colvarPrinterAdd1.AutoIncrement = false;
                colvarPrinterAdd1.IsNullable = true;
                colvarPrinterAdd1.IsPrimaryKey = false;
                colvarPrinterAdd1.IsForeignKey = false;
                colvarPrinterAdd1.IsReadOnly = false;
                
                schema.Columns.Add(colvarPrinterAdd1);
                
                TableSchema.TableColumn colvarPrinterAdd2 = new TableSchema.TableColumn(schema);
                colvarPrinterAdd2.ColumnName = "PrinterAdd2";
                colvarPrinterAdd2.DataType = DbType.String;
                colvarPrinterAdd2.MaxLength = 40;
                colvarPrinterAdd2.AutoIncrement = false;
                colvarPrinterAdd2.IsNullable = true;
                colvarPrinterAdd2.IsPrimaryKey = false;
                colvarPrinterAdd2.IsForeignKey = false;
                colvarPrinterAdd2.IsReadOnly = false;
                
                schema.Columns.Add(colvarPrinterAdd2);
                
                TableSchema.TableColumn colvarPrinterAdd3 = new TableSchema.TableColumn(schema);
                colvarPrinterAdd3.ColumnName = "PrinterAdd3";
                colvarPrinterAdd3.DataType = DbType.String;
                colvarPrinterAdd3.MaxLength = 40;
                colvarPrinterAdd3.AutoIncrement = false;
                colvarPrinterAdd3.IsNullable = true;
                colvarPrinterAdd3.IsPrimaryKey = false;
                colvarPrinterAdd3.IsForeignKey = false;
                colvarPrinterAdd3.IsReadOnly = false;
                
                schema.Columns.Add(colvarPrinterAdd3);
                
                TableSchema.TableColumn colvarPrinterCountry = new TableSchema.TableColumn(schema);
                colvarPrinterCountry.ColumnName = "PrinterCountry";
                colvarPrinterCountry.DataType = DbType.String;
                colvarPrinterCountry.MaxLength = 50;
                colvarPrinterCountry.AutoIncrement = false;
                colvarPrinterCountry.IsNullable = false;
                colvarPrinterCountry.IsPrimaryKey = false;
                colvarPrinterCountry.IsForeignKey = false;
                colvarPrinterCountry.IsReadOnly = false;
                
                schema.Columns.Add(colvarPrinterCountry);
                
                TableSchema.TableColumn colvarPrinterTel = new TableSchema.TableColumn(schema);
                colvarPrinterTel.ColumnName = "PrinterTel";
                colvarPrinterTel.DataType = DbType.String;
                colvarPrinterTel.MaxLength = 20;
                colvarPrinterTel.AutoIncrement = false;
                colvarPrinterTel.IsNullable = true;
                colvarPrinterTel.IsPrimaryKey = false;
                colvarPrinterTel.IsForeignKey = false;
                colvarPrinterTel.IsReadOnly = false;
                
                schema.Columns.Add(colvarPrinterTel);
                
                
                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["WWIprov"].AddSchema("PrinterView",schema);
            }
        }
        #endregion
        
        #region Query Accessor
	    public static Query CreateQuery()
	    {
		    return new Query(Schema);
	    }
	    #endregion
	    
	    #region .ctors
	    public PrinterView()
	    {
            SetSQLProps();
            SetDefaults();
            MarkNew();
        }
        public PrinterView(bool useDatabaseDefaults)
	    {
		    SetSQLProps();
		    if(useDatabaseDefaults)
		    {
				ForceDefaults();
			}
			MarkNew();
	    }
	    
	    public PrinterView(object keyID)
	    {
		    SetSQLProps();
		    LoadByKey(keyID);
	    }
    	 
	    public PrinterView(string columnName, object columnValue)
        {
            SetSQLProps();
            LoadByParam(columnName,columnValue);
        }
        
	    #endregion
	    
	    #region Props
	    
          
        [XmlAttribute("CompanyID")]
        [Bindable(true)]
        public int CompanyID 
	    {
		    get
		    {
			    return GetColumnValue<int>("CompanyID");
		    }
            set 
		    {
			    SetColumnValue("CompanyID", value);
            }
        }
	      
        [XmlAttribute("PrinterName")]
        [Bindable(true)]
        public string PrinterName 
	    {
		    get
		    {
			    return GetColumnValue<string>("PrinterName");
		    }
            set 
		    {
			    SetColumnValue("PrinterName", value);
            }
        }
	      
        [XmlAttribute("PrinterAdd1")]
        [Bindable(true)]
        public string PrinterAdd1 
	    {
		    get
		    {
			    return GetColumnValue<string>("PrinterAdd1");
		    }
            set 
		    {
			    SetColumnValue("PrinterAdd1", value);
            }
        }
	      
        [XmlAttribute("PrinterAdd2")]
        [Bindable(true)]
        public string PrinterAdd2 
	    {
		    get
		    {
			    return GetColumnValue<string>("PrinterAdd2");
		    }
            set 
		    {
			    SetColumnValue("PrinterAdd2", value);
            }
        }
	      
        [XmlAttribute("PrinterAdd3")]
        [Bindable(true)]
        public string PrinterAdd3 
	    {
		    get
		    {
			    return GetColumnValue<string>("PrinterAdd3");
		    }
            set 
		    {
			    SetColumnValue("PrinterAdd3", value);
            }
        }
	      
        [XmlAttribute("PrinterCountry")]
        [Bindable(true)]
        public string PrinterCountry 
	    {
		    get
		    {
			    return GetColumnValue<string>("PrinterCountry");
		    }
            set 
		    {
			    SetColumnValue("PrinterCountry", value);
            }
        }
	      
        [XmlAttribute("PrinterTel")]
        [Bindable(true)]
        public string PrinterTel 
	    {
		    get
		    {
			    return GetColumnValue<string>("PrinterTel");
		    }
            set 
		    {
			    SetColumnValue("PrinterTel", value);
            }
        }
	    
	    #endregion
    
	    #region Columns Struct
	    public struct Columns
	    {
		    
		    
            public static string CompanyID = @"CompanyID";
            
            public static string PrinterName = @"PrinterName";
            
            public static string PrinterAdd1 = @"PrinterAdd1";
            
            public static string PrinterAdd2 = @"PrinterAdd2";
            
            public static string PrinterAdd3 = @"PrinterAdd3";
            
            public static string PrinterCountry = @"PrinterCountry";
            
            public static string PrinterTel = @"PrinterTel";
            
	    }
	    #endregion
	    
	    
	    #region IAbstractRecord Members
        public new CT GetColumnValue<CT>(string columnName) {
            return base.GetColumnValue<CT>(columnName);
        }
        public object GetColumnValue(string columnName) {
            return base.GetColumnValue<object>(columnName);
        }
        #endregion
	    
    }
}
