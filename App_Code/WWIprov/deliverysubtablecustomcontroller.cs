using System;
using System.Text;
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration;
using System.Xml;
using System.Xml.Serialization;
using SubSonic;
using SubSonic.Utilities;
// <auto-generated />
namespace DAL.Logistics
{
    /// <summary>
    /// Controller class for DeliverySubTable
    /// </summary>
    [System.ComponentModel.DataObject]
    public partial class deliverysubtablecustomcontroller
    {
        // Preload our schema..
        DeliverySubTable thisSchemaLoad = new DeliverySubTable();
        private string userName = String.Empty;
        protected string UserName
        {
            get
            {
                if (userName.Length == 0)
                {
                    if (System.Web.HttpContext.Current != null)
                    {
                        userName = System.Web.HttpContext.Current.User.Identity.Name;
                    }
                    else
                    {
                        userName = System.Threading.Thread.CurrentPrincipal.Identity.Name;
                    }
                }
                return userName;
            }
        }
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public DeliverySubTableCollection FetchAll()
        {
            DeliverySubTableCollection coll = new DeliverySubTableCollection();
            Query qry = new Query(DeliverySubTable.Schema);
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public DeliverySubTableCollection FetchByID(object DeliveryID)
        {
            DeliverySubTableCollection coll = new DeliverySubTableCollection().Where("DeliveryID", DeliveryID).Load();
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public DeliverySubTableCollection FetchByOrderNumber(object OrderNumber)
        {
            DeliverySubTableCollection coll = new DeliverySubTableCollection().Where("OrderNumber", OrderNumber).Load();
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public DeliverySubTableCollection FetchByQuery(Query qry)
        {
            DeliverySubTableCollection coll = new DeliverySubTableCollection();
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool Delete(object DeliveryID)
        {
            return (DeliverySubTable.Delete(DeliveryID) == 1);
        }
        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public bool Destroy(object DeliveryID)
        {
            return (DeliverySubTable.Destroy(DeliveryID) == 1);
        }



        /// <summary>
        /// Inserts a record, can be used with the Object Data Source
        /// </summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
        public void Insert(int? DeliveryNoteID, int? OrderNumber, DateTime? StatusDate, int? CurrentStatusID, DateTime? CurrentStatusDate, int? DeliveryAddress, bool Delivered, bool PODRequired, string SpecialInstructions, string PODurl, bool Added, byte[] Ts)
        {
            DeliverySubTable item = new DeliverySubTable();

            item.DeliveryNoteID = DeliveryNoteID;

            item.OrderNumber = OrderNumber;

            item.StatusDate = StatusDate;

            item.CurrentStatusID = CurrentStatusID;

            item.CurrentStatusDate = CurrentStatusDate;

            item.DeliveryAddress = DeliveryAddress;

            item.Delivered = Delivered;

            item.PODRequired = PODRequired;

            item.SpecialInstructions = SpecialInstructions;

            item.PODurl = PODurl;

            item.Added = Added;

            item.Ts = Ts;


            item.Save(UserName);
        }

        /// <summary>
        /// Updates a record, can be used with the Object Data Source
        /// </summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
        public void Update(int DeliveryID, int? DeliveryNoteID, int? OrderNumber, DateTime? StatusDate, int? CurrentStatusID, DateTime? CurrentStatusDate, int? DeliveryAddress, bool Delivered, bool PODRequired, string SpecialInstructions, string PODurl, bool Added, byte[] Ts)
        {
            DeliverySubTable item = new DeliverySubTable();
            item.MarkOld();
            item.IsLoaded = true;

            item.DeliveryID = DeliveryID;

            item.DeliveryNoteID = DeliveryNoteID;

            item.OrderNumber = OrderNumber;

            item.StatusDate = StatusDate;

            item.CurrentStatusID = CurrentStatusID;

            item.CurrentStatusDate = CurrentStatusDate;

            item.DeliveryAddress = DeliveryAddress;

            item.Delivered = Delivered;

            item.PODRequired = PODRequired;

            item.SpecialInstructions = SpecialInstructions;

            item.PODurl = PODurl;

            item.Added = Added;

            item.Ts = Ts;

            item.Save(UserName);
        }
    }
}
