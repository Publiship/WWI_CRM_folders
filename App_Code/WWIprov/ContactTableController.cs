using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DAL.Logistics
{
    /// <summary>
    /// Controller class for ContactTable
    /// </summary>
    [System.ComponentModel.DataObject]
    public partial class ContactTableController
    {
        // Preload our schema..
        ContactTable thisSchemaLoad = new ContactTable();
        private string userName = String.Empty;
        protected string UserName
        {
            get
            {
				if (userName.Length == 0) 
				{
    				if (System.Web.HttpContext.Current != null)
    				{
						userName=System.Web.HttpContext.Current.User.Identity.Name;
					}
					else
					{
						userName=System.Threading.Thread.CurrentPrincipal.Identity.Name;
					}
				}
				return userName;
            }
        }
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public ContactTableCollection FetchAll()
        {
            ContactTableCollection coll = new ContactTableCollection();
            Query qry = new Query(ContactTable.Schema);
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public ContactTableCollection FetchByID(object ContactID)
        {
            ContactTableCollection coll = new ContactTableCollection().Where("ContactID", ContactID).Load();
            return coll;
        }
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
        public ContactTableCollection FetchByQuery(Query qry)
        {
            ContactTableCollection coll = new ContactTableCollection();
            coll.LoadAndCloseReader(qry.ExecuteReader()); 
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool Delete(object ContactID)
        {
            return (ContactTable.Delete(ContactID) == 1);
        }
        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public bool Destroy(object ContactID)
        {
            return (ContactTable.Destroy(ContactID) == 1);
        }
        
        
    	
	    /// <summary>
	    /// Inserts a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
	    public void Insert(string ContactName,string ContactInitials,int? CompanyID,string EMail,bool? Newsletter,bool? SalesMainContact,bool? OrderAck,string Name,string Password,bool? Live,int? Permission,int? AgentContactID,int? DefaultView,byte IsEditor,int? ControllingOfficeID,byte[] Tme)
	    {
		    ContactTable item = new ContactTable();
		    
            item.ContactName = ContactName;
            
            item.ContactInitials = ContactInitials;
            
            item.CompanyID = CompanyID;
            
            item.EMail = EMail;
            
            item.Newsletter = Newsletter;
            
            item.SalesMainContact = SalesMainContact;
            
            item.OrderAck = OrderAck;
            
            item.Name = Name;
            
            item.Password = Password;
            
            item.Live = Live;
            
            item.Permission = Permission;
            
            item.AgentContactID = AgentContactID;
            
            item.DefaultView = DefaultView;
            
            item.IsEditor = IsEditor;
            
            item.ControllingOfficeID = ControllingOfficeID;
            
            item.Tme = Tme;
            
	    
		    item.Save(UserName);
	    }
    	
	    /// <summary>
	    /// Updates a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
	    public void Update(int ContactID,string ContactName,string ContactInitials,int? CompanyID,string EMail,bool? Newsletter,bool? SalesMainContact,bool? OrderAck,string Name,string Password,bool? Live,int? Permission,int? AgentContactID,int? DefaultView,byte IsEditor,int? ControllingOfficeID,byte[] Tme)
	    {
		    ContactTable item = new ContactTable();
	        item.MarkOld();
	        item.IsLoaded = true;
		    
			item.ContactID = ContactID;
				
			item.ContactName = ContactName;
				
			item.ContactInitials = ContactInitials;
				
			item.CompanyID = CompanyID;
				
			item.EMail = EMail;
				
			item.Newsletter = Newsletter;
				
			item.SalesMainContact = SalesMainContact;
				
			item.OrderAck = OrderAck;
				
			item.Name = Name;
				
			item.Password = Password;
				
			item.Live = Live;
				
			item.Permission = Permission;
				
			item.AgentContactID = AgentContactID;
				
			item.DefaultView = DefaultView;
				
			item.IsEditor = IsEditor;
				
			item.ControllingOfficeID = ControllingOfficeID;
				
			item.Tme = Tme;
				
	        item.Save(UserName);
	    }
    }
}
