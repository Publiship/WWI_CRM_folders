using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DAL.Logistics
{
    /// <summary>
    /// Controller class for order_cargo_update_log
    /// </summary>
    [System.ComponentModel.DataObject]
    public partial class OrderCargoUpdateLogController
    {
        // Preload our schema..
        OrderCargoUpdateLog thisSchemaLoad = new OrderCargoUpdateLog();
        private string userName = String.Empty;
        protected string UserName
        {
            get
            {
				if (userName.Length == 0) 
				{
    				if (System.Web.HttpContext.Current != null)
    				{
						userName=System.Web.HttpContext.Current.User.Identity.Name;
					}
					else
					{
						userName=System.Threading.Thread.CurrentPrincipal.Identity.Name;
					}
				}
				return userName;
            }
        }
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public OrderCargoUpdateLogCollection FetchAll()
        {
            OrderCargoUpdateLogCollection coll = new OrderCargoUpdateLogCollection();
            Query qry = new Query(OrderCargoUpdateLog.Schema);
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public OrderCargoUpdateLogCollection FetchByID(object Cargoupdateid)
        {
            OrderCargoUpdateLogCollection coll = new OrderCargoUpdateLogCollection().Where("cargoupdateid", Cargoupdateid).Load();
            return coll;
        }
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
        public OrderCargoUpdateLogCollection FetchByQuery(Query qry)
        {
            OrderCargoUpdateLogCollection coll = new OrderCargoUpdateLogCollection();
            coll.LoadAndCloseReader(qry.ExecuteReader()); 
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool Delete(object Cargoupdateid)
        {
            return (OrderCargoUpdateLog.Delete(Cargoupdateid) == 1);
        }
        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public bool Destroy(object Cargoupdateid)
        {
            return (OrderCargoUpdateLog.Destroy(Cargoupdateid) == 1);
        }
        
        
    	
	    /// <summary>
	    /// Inserts a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
	    public void Insert(int? Orderid,DateTime? PreCargoready,int? PreEstpallets,int? PreEstweight,float? PreEstvolume,DateTime? PostCargoready,int? PostEstpallets,int? PostEstweight,float? PostEstvolume,int? Companyid,int? Userid,DateTime? Dtupdated,string Updguid,byte[] Mstimestamp)
	    {
		    OrderCargoUpdateLog item = new OrderCargoUpdateLog();
		    
            item.Orderid = Orderid;
            
            item.PreCargoready = PreCargoready;
            
            item.PreEstpallets = PreEstpallets;
            
            item.PreEstweight = PreEstweight;
            
            item.PreEstvolume = PreEstvolume;
            
            item.PostCargoready = PostCargoready;
            
            item.PostEstpallets = PostEstpallets;
            
            item.PostEstweight = PostEstweight;
            
            item.PostEstvolume = PostEstvolume;
            
            item.Companyid = Companyid;
            
            item.Userid = Userid;
            
            item.Dtupdated = Dtupdated;
            
            item.Updguid = Updguid;
            
            item.Mstimestamp = Mstimestamp;
            
	    
		    item.Save(UserName);
	    }
    	
	    /// <summary>
	    /// Updates a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
	    public void Update(int Cargoupdateid,int? Orderid,DateTime? PreCargoready,int? PreEstpallets,int? PreEstweight,float? PreEstvolume,DateTime? PostCargoready,int? PostEstpallets,int? PostEstweight,float? PostEstvolume,int? Companyid,int? Userid,DateTime? Dtupdated,string Updguid,byte[] Mstimestamp)
	    {
		    OrderCargoUpdateLog item = new OrderCargoUpdateLog();
	        item.MarkOld();
	        item.IsLoaded = true;
		    
			item.Cargoupdateid = Cargoupdateid;
				
			item.Orderid = Orderid;
				
			item.PreCargoready = PreCargoready;
				
			item.PreEstpallets = PreEstpallets;
				
			item.PreEstweight = PreEstweight;
				
			item.PreEstvolume = PreEstvolume;
				
			item.PostCargoready = PostCargoready;
				
			item.PostEstpallets = PostEstpallets;
				
			item.PostEstweight = PostEstweight;
				
			item.PostEstvolume = PostEstvolume;
				
			item.Companyid = Companyid;
				
			item.Userid = Userid;
				
			item.Dtupdated = Dtupdated;
				
			item.Updguid = Updguid;
				
			item.Mstimestamp = Mstimestamp;
				
	        item.Save(UserName);
	    }
    }
}
