using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DAL.Logistics
{
	/// <summary>
	/// Strongly-typed collection for the DespatchNotePalletId class.
	/// </summary>
    [Serializable]
	public partial class DespatchNotePalletIdCollection : ActiveList<DespatchNotePalletId, DespatchNotePalletIdCollection>
	{	   
		public DespatchNotePalletIdCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>DespatchNotePalletIdCollection</returns>
		public DespatchNotePalletIdCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                DespatchNotePalletId o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the despatch_note_pallet_ids table.
	/// </summary>
	[Serializable]
	public partial class DespatchNotePalletId : ActiveRecord<DespatchNotePalletId>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public DespatchNotePalletId()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public DespatchNotePalletId(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public DespatchNotePalletId(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public DespatchNotePalletId(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("despatch_note_pallet_ids", TableType.Table, DataService.GetInstance("WWIprov"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarPalletId = new TableSchema.TableColumn(schema);
				colvarPalletId.ColumnName = "pallet_id";
				colvarPalletId.DataType = DbType.Int32;
				colvarPalletId.MaxLength = 0;
				colvarPalletId.AutoIncrement = true;
				colvarPalletId.IsNullable = false;
				colvarPalletId.IsPrimaryKey = true;
				colvarPalletId.IsForeignKey = false;
				colvarPalletId.IsReadOnly = false;
				colvarPalletId.DefaultSetting = @"";
				colvarPalletId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPalletId);
				
				TableSchema.TableColumn colvarDespatchItemId = new TableSchema.TableColumn(schema);
				colvarDespatchItemId.ColumnName = "despatch_item_id";
				colvarDespatchItemId.DataType = DbType.Int32;
				colvarDespatchItemId.MaxLength = 0;
				colvarDespatchItemId.AutoIncrement = false;
				colvarDespatchItemId.IsNullable = false;
				colvarDespatchItemId.IsPrimaryKey = false;
				colvarDespatchItemId.IsForeignKey = false;
				colvarDespatchItemId.IsReadOnly = false;
				
						colvarDespatchItemId.DefaultSetting = @"((0))";
				colvarDespatchItemId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDespatchItemId);
				
				TableSchema.TableColumn colvarSscc = new TableSchema.TableColumn(schema);
				colvarSscc.ColumnName = "sscc";
				colvarSscc.DataType = DbType.String;
				colvarSscc.MaxLength = 18;
				colvarSscc.AutoIncrement = false;
				colvarSscc.IsNullable = true;
				colvarSscc.IsPrimaryKey = false;
				colvarSscc.IsForeignKey = false;
				colvarSscc.IsReadOnly = false;
				colvarSscc.DefaultSetting = @"";
				colvarSscc.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSscc);
				
				TableSchema.TableColumn colvarPalletType = new TableSchema.TableColumn(schema);
				colvarPalletType.ColumnName = "pallet_type";
				colvarPalletType.DataType = DbType.String;
				colvarPalletType.MaxLength = 5;
				colvarPalletType.AutoIncrement = false;
				colvarPalletType.IsNullable = true;
				colvarPalletType.IsPrimaryKey = false;
				colvarPalletType.IsForeignKey = false;
				colvarPalletType.IsReadOnly = false;
				colvarPalletType.DefaultSetting = @"";
				colvarPalletType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPalletType);
				
				TableSchema.TableColumn colvarPalletTs = new TableSchema.TableColumn(schema);
				colvarPalletTs.ColumnName = "pallet_ts";
				colvarPalletTs.DataType = DbType.Binary;
				colvarPalletTs.MaxLength = 0;
				colvarPalletTs.AutoIncrement = false;
				colvarPalletTs.IsNullable = true;
				colvarPalletTs.IsPrimaryKey = false;
				colvarPalletTs.IsForeignKey = false;
				colvarPalletTs.IsReadOnly = true;
				colvarPalletTs.DefaultSetting = @"";
				colvarPalletTs.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPalletTs);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["WWIprov"].AddSchema("despatch_note_pallet_ids",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("PalletId")]
		[Bindable(true)]
		public int PalletId 
		{
			get { return GetColumnValue<int>(Columns.PalletId); }
			set { SetColumnValue(Columns.PalletId, value); }
		}
		  
		[XmlAttribute("DespatchItemId")]
		[Bindable(true)]
		public int DespatchItemId 
		{
			get { return GetColumnValue<int>(Columns.DespatchItemId); }
			set { SetColumnValue(Columns.DespatchItemId, value); }
		}
		  
		[XmlAttribute("Sscc")]
		[Bindable(true)]
		public string Sscc 
		{
			get { return GetColumnValue<string>(Columns.Sscc); }
			set { SetColumnValue(Columns.Sscc, value); }
		}
		  
		[XmlAttribute("PalletType")]
		[Bindable(true)]
		public string PalletType 
		{
			get { return GetColumnValue<string>(Columns.PalletType); }
			set { SetColumnValue(Columns.PalletType, value); }
		}
		  
		[XmlAttribute("PalletTs")]
		[Bindable(true)]
		public byte[] PalletTs 
		{
			get { return GetColumnValue<byte[]>(Columns.PalletTs); }
			set { SetColumnValue(Columns.PalletTs, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int varDespatchItemId,string varSscc,string varPalletType,byte[] varPalletTs)
		{
			DespatchNotePalletId item = new DespatchNotePalletId();
			
			item.DespatchItemId = varDespatchItemId;
			
			item.Sscc = varSscc;
			
			item.PalletType = varPalletType;
			
			item.PalletTs = varPalletTs;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varPalletId,int varDespatchItemId,string varSscc,string varPalletType,byte[] varPalletTs)
		{
			DespatchNotePalletId item = new DespatchNotePalletId();
			
				item.PalletId = varPalletId;
			
				item.DespatchItemId = varDespatchItemId;
			
				item.Sscc = varSscc;
			
				item.PalletType = varPalletType;
			
				item.PalletTs = varPalletTs;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn PalletIdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn DespatchItemIdColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn SsccColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn PalletTypeColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn PalletTsColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string PalletId = @"pallet_id";
			 public static string DespatchItemId = @"despatch_item_id";
			 public static string Sscc = @"sscc";
			 public static string PalletType = @"pallet_type";
			 public static string PalletTs = @"pallet_ts";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
