using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DAL.Logistics
{
	/// <summary>
	/// Strongly-typed collection for the DeliverySubSubTable class.
	/// </summary>
    [Serializable]
	public partial class DeliverySubSubTableCollection : ActiveList<DeliverySubSubTable, DeliverySubSubTableCollection>
	{	   
		public DeliverySubSubTableCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>DeliverySubSubTableCollection</returns>
		public DeliverySubSubTableCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                DeliverySubSubTable o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the DeliverySubSubTable table.
	/// </summary>
	[Serializable]
	public partial class DeliverySubSubTable : ActiveRecord<DeliverySubSubTable>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public DeliverySubSubTable()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public DeliverySubSubTable(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public DeliverySubSubTable(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public DeliverySubSubTable(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("DeliverySubSubTable", TableType.Table, DataService.GetInstance("WWIprov"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarSubDeliveryID = new TableSchema.TableColumn(schema);
				colvarSubDeliveryID.ColumnName = "SubDeliveryID";
				colvarSubDeliveryID.DataType = DbType.Int32;
				colvarSubDeliveryID.MaxLength = 0;
				colvarSubDeliveryID.AutoIncrement = true;
				colvarSubDeliveryID.IsNullable = false;
				colvarSubDeliveryID.IsPrimaryKey = true;
				colvarSubDeliveryID.IsForeignKey = false;
				colvarSubDeliveryID.IsReadOnly = false;
				colvarSubDeliveryID.DefaultSetting = @"";
				colvarSubDeliveryID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSubDeliveryID);
				
				TableSchema.TableColumn colvarDeliveryID = new TableSchema.TableColumn(schema);
				colvarDeliveryID.ColumnName = "DeliveryID";
				colvarDeliveryID.DataType = DbType.Int32;
				colvarDeliveryID.MaxLength = 0;
				colvarDeliveryID.AutoIncrement = false;
				colvarDeliveryID.IsNullable = true;
				colvarDeliveryID.IsPrimaryKey = false;
				colvarDeliveryID.IsForeignKey = false;
				colvarDeliveryID.IsReadOnly = false;
				colvarDeliveryID.DefaultSetting = @"";
				colvarDeliveryID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDeliveryID);
				
				TableSchema.TableColumn colvarTitleID = new TableSchema.TableColumn(schema);
				colvarTitleID.ColumnName = "TitleID";
				colvarTitleID.DataType = DbType.Int32;
				colvarTitleID.MaxLength = 0;
				colvarTitleID.AutoIncrement = false;
				colvarTitleID.IsNullable = true;
				colvarTitleID.IsPrimaryKey = false;
				colvarTitleID.IsForeignKey = false;
				colvarTitleID.IsReadOnly = false;
				colvarTitleID.DefaultSetting = @"";
				colvarTitleID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTitleID);
				
				TableSchema.TableColumn colvarTitle = new TableSchema.TableColumn(schema);
				colvarTitle.ColumnName = "Title";
				colvarTitle.DataType = DbType.String;
				colvarTitle.MaxLength = 150;
				colvarTitle.AutoIncrement = false;
				colvarTitle.IsNullable = true;
				colvarTitle.IsPrimaryKey = false;
				colvarTitle.IsForeignKey = false;
				colvarTitle.IsReadOnly = false;
				colvarTitle.DefaultSetting = @"";
				colvarTitle.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTitle);
				
				TableSchema.TableColumn colvarCopies = new TableSchema.TableColumn(schema);
				colvarCopies.ColumnName = "Copies";
				colvarCopies.DataType = DbType.Int32;
				colvarCopies.MaxLength = 0;
				colvarCopies.AutoIncrement = false;
				colvarCopies.IsNullable = true;
				colvarCopies.IsPrimaryKey = false;
				colvarCopies.IsForeignKey = false;
				colvarCopies.IsReadOnly = false;
				colvarCopies.DefaultSetting = @"";
				colvarCopies.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCopies);
				
				TableSchema.TableColumn colvarCurrentStatusID = new TableSchema.TableColumn(schema);
				colvarCurrentStatusID.ColumnName = "CurrentStatusID";
				colvarCurrentStatusID.DataType = DbType.Int32;
				colvarCurrentStatusID.MaxLength = 0;
				colvarCurrentStatusID.AutoIncrement = false;
				colvarCurrentStatusID.IsNullable = true;
				colvarCurrentStatusID.IsPrimaryKey = false;
				colvarCurrentStatusID.IsForeignKey = false;
				colvarCurrentStatusID.IsReadOnly = false;
				colvarCurrentStatusID.DefaultSetting = @"";
				colvarCurrentStatusID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCurrentStatusID);
				
				TableSchema.TableColumn colvarRemarks = new TableSchema.TableColumn(schema);
				colvarRemarks.ColumnName = "Remarks";
				colvarRemarks.DataType = DbType.String;
				colvarRemarks.MaxLength = 100;
				colvarRemarks.AutoIncrement = false;
				colvarRemarks.IsNullable = true;
				colvarRemarks.IsPrimaryKey = false;
				colvarRemarks.IsForeignKey = false;
				colvarRemarks.IsReadOnly = false;
				colvarRemarks.DefaultSetting = @"";
				colvarRemarks.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRemarks);
				
				TableSchema.TableColumn colvarCopiesPerCarton = new TableSchema.TableColumn(schema);
				colvarCopiesPerCarton.ColumnName = "CopiesPerCarton";
				colvarCopiesPerCarton.DataType = DbType.Int32;
				colvarCopiesPerCarton.MaxLength = 0;
				colvarCopiesPerCarton.AutoIncrement = false;
				colvarCopiesPerCarton.IsNullable = true;
				colvarCopiesPerCarton.IsPrimaryKey = false;
				colvarCopiesPerCarton.IsForeignKey = false;
				colvarCopiesPerCarton.IsReadOnly = false;
				colvarCopiesPerCarton.DefaultSetting = @"";
				colvarCopiesPerCarton.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCopiesPerCarton);
				
				TableSchema.TableColumn colvarTotalConsignmentWeight = new TableSchema.TableColumn(schema);
				colvarTotalConsignmentWeight.ColumnName = "TotalConsignmentWeight";
				colvarTotalConsignmentWeight.DataType = DbType.Single;
				colvarTotalConsignmentWeight.MaxLength = 0;
				colvarTotalConsignmentWeight.AutoIncrement = false;
				colvarTotalConsignmentWeight.IsNullable = true;
				colvarTotalConsignmentWeight.IsPrimaryKey = false;
				colvarTotalConsignmentWeight.IsForeignKey = false;
				colvarTotalConsignmentWeight.IsReadOnly = false;
				colvarTotalConsignmentWeight.DefaultSetting = @"";
				colvarTotalConsignmentWeight.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTotalConsignmentWeight);
				
				TableSchema.TableColumn colvarTotalConsignmentCube = new TableSchema.TableColumn(schema);
				colvarTotalConsignmentCube.ColumnName = "TotalConsignmentCube";
				colvarTotalConsignmentCube.DataType = DbType.Single;
				colvarTotalConsignmentCube.MaxLength = 0;
				colvarTotalConsignmentCube.AutoIncrement = false;
				colvarTotalConsignmentCube.IsNullable = true;
				colvarTotalConsignmentCube.IsPrimaryKey = false;
				colvarTotalConsignmentCube.IsForeignKey = false;
				colvarTotalConsignmentCube.IsReadOnly = false;
				colvarTotalConsignmentCube.DefaultSetting = @"";
				colvarTotalConsignmentCube.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTotalConsignmentCube);
				
				TableSchema.TableColumn colvarCartonLength = new TableSchema.TableColumn(schema);
				colvarCartonLength.ColumnName = "CartonLength";
				colvarCartonLength.DataType = DbType.Decimal;
				colvarCartonLength.MaxLength = 0;
				colvarCartonLength.AutoIncrement = false;
				colvarCartonLength.IsNullable = true;
				colvarCartonLength.IsPrimaryKey = false;
				colvarCartonLength.IsForeignKey = false;
				colvarCartonLength.IsReadOnly = false;
				colvarCartonLength.DefaultSetting = @"";
				colvarCartonLength.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCartonLength);
				
				TableSchema.TableColumn colvarCartonDepth = new TableSchema.TableColumn(schema);
				colvarCartonDepth.ColumnName = "CartonDepth";
				colvarCartonDepth.DataType = DbType.Decimal;
				colvarCartonDepth.MaxLength = 0;
				colvarCartonDepth.AutoIncrement = false;
				colvarCartonDepth.IsNullable = true;
				colvarCartonDepth.IsPrimaryKey = false;
				colvarCartonDepth.IsForeignKey = false;
				colvarCartonDepth.IsReadOnly = false;
				colvarCartonDepth.DefaultSetting = @"";
				colvarCartonDepth.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCartonDepth);
				
				TableSchema.TableColumn colvarCartonHeight = new TableSchema.TableColumn(schema);
				colvarCartonHeight.ColumnName = "CartonHeight";
				colvarCartonHeight.DataType = DbType.Decimal;
				colvarCartonHeight.MaxLength = 0;
				colvarCartonHeight.AutoIncrement = false;
				colvarCartonHeight.IsNullable = true;
				colvarCartonHeight.IsPrimaryKey = false;
				colvarCartonHeight.IsForeignKey = false;
				colvarCartonHeight.IsReadOnly = false;
				colvarCartonHeight.DefaultSetting = @"";
				colvarCartonHeight.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCartonHeight);
				
				TableSchema.TableColumn colvarTotalCartons = new TableSchema.TableColumn(schema);
				colvarTotalCartons.ColumnName = "TotalCartons";
				colvarTotalCartons.DataType = DbType.Int32;
				colvarTotalCartons.MaxLength = 0;
				colvarTotalCartons.AutoIncrement = false;
				colvarTotalCartons.IsNullable = true;
				colvarTotalCartons.IsPrimaryKey = false;
				colvarTotalCartons.IsForeignKey = false;
				colvarTotalCartons.IsReadOnly = false;
				colvarTotalCartons.DefaultSetting = @"";
				colvarTotalCartons.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTotalCartons);
				
				TableSchema.TableColumn colvarCartonWeight = new TableSchema.TableColumn(schema);
				colvarCartonWeight.ColumnName = "CartonWeight";
				colvarCartonWeight.DataType = DbType.Single;
				colvarCartonWeight.MaxLength = 0;
				colvarCartonWeight.AutoIncrement = false;
				colvarCartonWeight.IsNullable = true;
				colvarCartonWeight.IsPrimaryKey = false;
				colvarCartonWeight.IsForeignKey = false;
				colvarCartonWeight.IsReadOnly = false;
				colvarCartonWeight.DefaultSetting = @"";
				colvarCartonWeight.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCartonWeight);
				
				TableSchema.TableColumn colvarLastCarton = new TableSchema.TableColumn(schema);
				colvarLastCarton.ColumnName = "LastCarton";
				colvarLastCarton.DataType = DbType.Single;
				colvarLastCarton.MaxLength = 0;
				colvarLastCarton.AutoIncrement = false;
				colvarLastCarton.IsNullable = true;
				colvarLastCarton.IsPrimaryKey = false;
				colvarLastCarton.IsForeignKey = false;
				colvarLastCarton.IsReadOnly = false;
				colvarLastCarton.DefaultSetting = @"";
				colvarLastCarton.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLastCarton);
				
				TableSchema.TableColumn colvarJackets = new TableSchema.TableColumn(schema);
				colvarJackets.ColumnName = "Jackets";
				colvarJackets.DataType = DbType.Int32;
				colvarJackets.MaxLength = 0;
				colvarJackets.AutoIncrement = false;
				colvarJackets.IsNullable = true;
				colvarJackets.IsPrimaryKey = false;
				colvarJackets.IsForeignKey = false;
				colvarJackets.IsReadOnly = false;
				colvarJackets.DefaultSetting = @"";
				colvarJackets.ForeignKeyTableName = "";
				schema.Columns.Add(colvarJackets);
				
				TableSchema.TableColumn colvarFullPallets = new TableSchema.TableColumn(schema);
				colvarFullPallets.ColumnName = "FullPallets";
				colvarFullPallets.DataType = DbType.Int32;
				colvarFullPallets.MaxLength = 0;
				colvarFullPallets.AutoIncrement = false;
				colvarFullPallets.IsNullable = true;
				colvarFullPallets.IsPrimaryKey = false;
				colvarFullPallets.IsForeignKey = false;
				colvarFullPallets.IsReadOnly = false;
				colvarFullPallets.DefaultSetting = @"";
				colvarFullPallets.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFullPallets);
				
				TableSchema.TableColumn colvarCartonsPerFullPallet = new TableSchema.TableColumn(schema);
				colvarCartonsPerFullPallet.ColumnName = "CartonsPerFullPallet";
				colvarCartonsPerFullPallet.DataType = DbType.Int32;
				colvarCartonsPerFullPallet.MaxLength = 0;
				colvarCartonsPerFullPallet.AutoIncrement = false;
				colvarCartonsPerFullPallet.IsNullable = true;
				colvarCartonsPerFullPallet.IsPrimaryKey = false;
				colvarCartonsPerFullPallet.IsForeignKey = false;
				colvarCartonsPerFullPallet.IsReadOnly = false;
				colvarCartonsPerFullPallet.DefaultSetting = @"";
				colvarCartonsPerFullPallet.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCartonsPerFullPallet);
				
				TableSchema.TableColumn colvarPartPallets = new TableSchema.TableColumn(schema);
				colvarPartPallets.ColumnName = "PartPallets";
				colvarPartPallets.DataType = DbType.Int32;
				colvarPartPallets.MaxLength = 0;
				colvarPartPallets.AutoIncrement = false;
				colvarPartPallets.IsNullable = true;
				colvarPartPallets.IsPrimaryKey = false;
				colvarPartPallets.IsForeignKey = false;
				colvarPartPallets.IsReadOnly = false;
				colvarPartPallets.DefaultSetting = @"";
				colvarPartPallets.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPartPallets);
				
				TableSchema.TableColumn colvarCartonsPerPartPallet = new TableSchema.TableColumn(schema);
				colvarCartonsPerPartPallet.ColumnName = "CartonsPerPartPallet";
				colvarCartonsPerPartPallet.DataType = DbType.Int32;
				colvarCartonsPerPartPallet.MaxLength = 0;
				colvarCartonsPerPartPallet.AutoIncrement = false;
				colvarCartonsPerPartPallet.IsNullable = true;
				colvarCartonsPerPartPallet.IsPrimaryKey = false;
				colvarCartonsPerPartPallet.IsForeignKey = false;
				colvarCartonsPerPartPallet.IsReadOnly = false;
				colvarCartonsPerPartPallet.DefaultSetting = @"";
				colvarCartonsPerPartPallet.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCartonsPerPartPallet);
				
				TableSchema.TableColumn colvarActualPPC = new TableSchema.TableColumn(schema);
				colvarActualPPC.ColumnName = "ActualPPC";
				colvarActualPPC.DataType = DbType.Decimal;
				colvarActualPPC.MaxLength = 0;
				colvarActualPPC.AutoIncrement = false;
				colvarActualPPC.IsNullable = true;
				colvarActualPPC.IsPrimaryKey = false;
				colvarActualPPC.IsForeignKey = false;
				colvarActualPPC.IsReadOnly = false;
				colvarActualPPC.DefaultSetting = @"";
				colvarActualPPC.ForeignKeyTableName = "";
				schema.Columns.Add(colvarActualPPC);
				
				TableSchema.TableColumn colvarTs = new TableSchema.TableColumn(schema);
				colvarTs.ColumnName = "TS";
				colvarTs.DataType = DbType.Binary;
				colvarTs.MaxLength = 0;
				colvarTs.AutoIncrement = false;
				colvarTs.IsNullable = true;
				colvarTs.IsPrimaryKey = false;
				colvarTs.IsForeignKey = false;
				colvarTs.IsReadOnly = true;
				colvarTs.DefaultSetting = @"";
				colvarTs.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTs);
				
				TableSchema.TableColumn colvarEstimatedPPC = new TableSchema.TableColumn(schema);
				colvarEstimatedPPC.ColumnName = "EstimatedPPC";
				colvarEstimatedPPC.DataType = DbType.Decimal;
				colvarEstimatedPPC.MaxLength = 0;
				colvarEstimatedPPC.AutoIncrement = false;
				colvarEstimatedPPC.IsNullable = true;
				colvarEstimatedPPC.IsPrimaryKey = false;
				colvarEstimatedPPC.IsForeignKey = false;
				colvarEstimatedPPC.IsReadOnly = false;
				colvarEstimatedPPC.DefaultSetting = @"";
				colvarEstimatedPPC.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEstimatedPPC);
				
				TableSchema.TableColumn colvarBookLength = new TableSchema.TableColumn(schema);
				colvarBookLength.ColumnName = "BookLength";
				colvarBookLength.DataType = DbType.Decimal;
				colvarBookLength.MaxLength = 0;
				colvarBookLength.AutoIncrement = false;
				colvarBookLength.IsNullable = true;
				colvarBookLength.IsPrimaryKey = false;
				colvarBookLength.IsForeignKey = false;
				colvarBookLength.IsReadOnly = false;
				colvarBookLength.DefaultSetting = @"";
				colvarBookLength.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBookLength);
				
				TableSchema.TableColumn colvarBookWidth = new TableSchema.TableColumn(schema);
				colvarBookWidth.ColumnName = "BookWidth";
				colvarBookWidth.DataType = DbType.Decimal;
				colvarBookWidth.MaxLength = 0;
				colvarBookWidth.AutoIncrement = false;
				colvarBookWidth.IsNullable = true;
				colvarBookWidth.IsPrimaryKey = false;
				colvarBookWidth.IsForeignKey = false;
				colvarBookWidth.IsReadOnly = false;
				colvarBookWidth.DefaultSetting = @"";
				colvarBookWidth.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBookWidth);
				
				TableSchema.TableColumn colvarBookDepth = new TableSchema.TableColumn(schema);
				colvarBookDepth.ColumnName = "BookDepth";
				colvarBookDepth.DataType = DbType.Decimal;
				colvarBookDepth.MaxLength = 0;
				colvarBookDepth.AutoIncrement = false;
				colvarBookDepth.IsNullable = true;
				colvarBookDepth.IsPrimaryKey = false;
				colvarBookDepth.IsForeignKey = false;
				colvarBookDepth.IsReadOnly = false;
				colvarBookDepth.DefaultSetting = @"";
				colvarBookDepth.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBookDepth);
				
				TableSchema.TableColumn colvarBookWeight = new TableSchema.TableColumn(schema);
				colvarBookWeight.ColumnName = "BookWeight";
				colvarBookWeight.DataType = DbType.Decimal;
				colvarBookWeight.MaxLength = 0;
				colvarBookWeight.AutoIncrement = false;
				colvarBookWeight.IsNullable = true;
				colvarBookWeight.IsPrimaryKey = false;
				colvarBookWeight.IsForeignKey = false;
				colvarBookWeight.IsReadOnly = false;
				colvarBookWeight.DefaultSetting = @"";
				colvarBookWeight.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBookWeight);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["WWIprov"].AddSchema("DeliverySubSubTable",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("SubDeliveryID")]
		[Bindable(true)]
		public int SubDeliveryID 
		{
			get { return GetColumnValue<int>(Columns.SubDeliveryID); }
			set { SetColumnValue(Columns.SubDeliveryID, value); }
		}
		  
		[XmlAttribute("DeliveryID")]
		[Bindable(true)]
		public int? DeliveryID 
		{
			get { return GetColumnValue<int?>(Columns.DeliveryID); }
			set { SetColumnValue(Columns.DeliveryID, value); }
		}
		  
		[XmlAttribute("TitleID")]
		[Bindable(true)]
		public int? TitleID 
		{
			get { return GetColumnValue<int?>(Columns.TitleID); }
			set { SetColumnValue(Columns.TitleID, value); }
		}
		  
		[XmlAttribute("Title")]
		[Bindable(true)]
		public string Title 
		{
			get { return GetColumnValue<string>(Columns.Title); }
			set { SetColumnValue(Columns.Title, value); }
		}
		  
		[XmlAttribute("Copies")]
		[Bindable(true)]
		public int? Copies 
		{
			get { return GetColumnValue<int?>(Columns.Copies); }
			set { SetColumnValue(Columns.Copies, value); }
		}
		  
		[XmlAttribute("CurrentStatusID")]
		[Bindable(true)]
		public int? CurrentStatusID 
		{
			get { return GetColumnValue<int?>(Columns.CurrentStatusID); }
			set { SetColumnValue(Columns.CurrentStatusID, value); }
		}
		  
		[XmlAttribute("Remarks")]
		[Bindable(true)]
		public string Remarks 
		{
			get { return GetColumnValue<string>(Columns.Remarks); }
			set { SetColumnValue(Columns.Remarks, value); }
		}
		  
		[XmlAttribute("CopiesPerCarton")]
		[Bindable(true)]
		public int? CopiesPerCarton 
		{
			get { return GetColumnValue<int?>(Columns.CopiesPerCarton); }
			set { SetColumnValue(Columns.CopiesPerCarton, value); }
		}
		  
		[XmlAttribute("TotalConsignmentWeight")]
		[Bindable(true)]
		public float? TotalConsignmentWeight 
		{
			get { return GetColumnValue<float?>(Columns.TotalConsignmentWeight); }
			set { SetColumnValue(Columns.TotalConsignmentWeight, value); }
		}
		  
		[XmlAttribute("TotalConsignmentCube")]
		[Bindable(true)]
		public float? TotalConsignmentCube 
		{
			get { return GetColumnValue<float?>(Columns.TotalConsignmentCube); }
			set { SetColumnValue(Columns.TotalConsignmentCube, value); }
		}
		  
		[XmlAttribute("CartonLength")]
		[Bindable(true)]
		public decimal? CartonLength 
		{
			get { return GetColumnValue<decimal?>(Columns.CartonLength); }
			set { SetColumnValue(Columns.CartonLength, value); }
		}
		  
		[XmlAttribute("CartonDepth")]
		[Bindable(true)]
		public decimal? CartonDepth 
		{
			get { return GetColumnValue<decimal?>(Columns.CartonDepth); }
			set { SetColumnValue(Columns.CartonDepth, value); }
		}
		  
		[XmlAttribute("CartonHeight")]
		[Bindable(true)]
		public decimal? CartonHeight 
		{
			get { return GetColumnValue<decimal?>(Columns.CartonHeight); }
			set { SetColumnValue(Columns.CartonHeight, value); }
		}
		  
		[XmlAttribute("TotalCartons")]
		[Bindable(true)]
		public int? TotalCartons 
		{
			get { return GetColumnValue<int?>(Columns.TotalCartons); }
			set { SetColumnValue(Columns.TotalCartons, value); }
		}
		  
		[XmlAttribute("CartonWeight")]
		[Bindable(true)]
		public float? CartonWeight 
		{
			get { return GetColumnValue<float?>(Columns.CartonWeight); }
			set { SetColumnValue(Columns.CartonWeight, value); }
		}
		  
		[XmlAttribute("LastCarton")]
		[Bindable(true)]
		public float? LastCarton 
		{
			get { return GetColumnValue<float?>(Columns.LastCarton); }
			set { SetColumnValue(Columns.LastCarton, value); }
		}
		  
		[XmlAttribute("Jackets")]
		[Bindable(true)]
		public int? Jackets 
		{
			get { return GetColumnValue<int?>(Columns.Jackets); }
			set { SetColumnValue(Columns.Jackets, value); }
		}
		  
		[XmlAttribute("FullPallets")]
		[Bindable(true)]
		public int? FullPallets 
		{
			get { return GetColumnValue<int?>(Columns.FullPallets); }
			set { SetColumnValue(Columns.FullPallets, value); }
		}
		  
		[XmlAttribute("CartonsPerFullPallet")]
		[Bindable(true)]
		public int? CartonsPerFullPallet 
		{
			get { return GetColumnValue<int?>(Columns.CartonsPerFullPallet); }
			set { SetColumnValue(Columns.CartonsPerFullPallet, value); }
		}
		  
		[XmlAttribute("PartPallets")]
		[Bindable(true)]
		public int? PartPallets 
		{
			get { return GetColumnValue<int?>(Columns.PartPallets); }
			set { SetColumnValue(Columns.PartPallets, value); }
		}
		  
		[XmlAttribute("CartonsPerPartPallet")]
		[Bindable(true)]
		public int? CartonsPerPartPallet 
		{
			get { return GetColumnValue<int?>(Columns.CartonsPerPartPallet); }
			set { SetColumnValue(Columns.CartonsPerPartPallet, value); }
		}
		  
		[XmlAttribute("ActualPPC")]
		[Bindable(true)]
		public decimal? ActualPPC 
		{
			get { return GetColumnValue<decimal?>(Columns.ActualPPC); }
			set { SetColumnValue(Columns.ActualPPC, value); }
		}
		  
		[XmlAttribute("Ts")]
		[Bindable(true)]
		public byte[] Ts 
		{
			get { return GetColumnValue<byte[]>(Columns.Ts); }
			set { SetColumnValue(Columns.Ts, value); }
		}
		  
		[XmlAttribute("EstimatedPPC")]
		[Bindable(true)]
		public decimal? EstimatedPPC 
		{
			get { return GetColumnValue<decimal?>(Columns.EstimatedPPC); }
			set { SetColumnValue(Columns.EstimatedPPC, value); }
		}
		  
		[XmlAttribute("BookLength")]
		[Bindable(true)]
		public decimal? BookLength 
		{
			get { return GetColumnValue<decimal?>(Columns.BookLength); }
			set { SetColumnValue(Columns.BookLength, value); }
		}
		  
		[XmlAttribute("BookWidth")]
		[Bindable(true)]
		public decimal? BookWidth 
		{
			get { return GetColumnValue<decimal?>(Columns.BookWidth); }
			set { SetColumnValue(Columns.BookWidth, value); }
		}
		  
		[XmlAttribute("BookDepth")]
		[Bindable(true)]
		public decimal? BookDepth 
		{
			get { return GetColumnValue<decimal?>(Columns.BookDepth); }
			set { SetColumnValue(Columns.BookDepth, value); }
		}
		  
		[XmlAttribute("BookWeight")]
		[Bindable(true)]
		public decimal? BookWeight 
		{
			get { return GetColumnValue<decimal?>(Columns.BookWeight); }
			set { SetColumnValue(Columns.BookWeight, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int? varDeliveryID,int? varTitleID,string varTitle,int? varCopies,int? varCurrentStatusID,string varRemarks,int? varCopiesPerCarton,float? varTotalConsignmentWeight,float? varTotalConsignmentCube,decimal? varCartonLength,decimal? varCartonDepth,decimal? varCartonHeight,int? varTotalCartons,float? varCartonWeight,float? varLastCarton,int? varJackets,int? varFullPallets,int? varCartonsPerFullPallet,int? varPartPallets,int? varCartonsPerPartPallet,decimal? varActualPPC,byte[] varTs,decimal? varEstimatedPPC,decimal? varBookLength,decimal? varBookWidth,decimal? varBookDepth,decimal? varBookWeight)
		{
			DeliverySubSubTable item = new DeliverySubSubTable();
			
			item.DeliveryID = varDeliveryID;
			
			item.TitleID = varTitleID;
			
			item.Title = varTitle;
			
			item.Copies = varCopies;
			
			item.CurrentStatusID = varCurrentStatusID;
			
			item.Remarks = varRemarks;
			
			item.CopiesPerCarton = varCopiesPerCarton;
			
			item.TotalConsignmentWeight = varTotalConsignmentWeight;
			
			item.TotalConsignmentCube = varTotalConsignmentCube;
			
			item.CartonLength = varCartonLength;
			
			item.CartonDepth = varCartonDepth;
			
			item.CartonHeight = varCartonHeight;
			
			item.TotalCartons = varTotalCartons;
			
			item.CartonWeight = varCartonWeight;
			
			item.LastCarton = varLastCarton;
			
			item.Jackets = varJackets;
			
			item.FullPallets = varFullPallets;
			
			item.CartonsPerFullPallet = varCartonsPerFullPallet;
			
			item.PartPallets = varPartPallets;
			
			item.CartonsPerPartPallet = varCartonsPerPartPallet;
			
			item.ActualPPC = varActualPPC;
			
			item.Ts = varTs;
			
			item.EstimatedPPC = varEstimatedPPC;
			
			item.BookLength = varBookLength;
			
			item.BookWidth = varBookWidth;
			
			item.BookDepth = varBookDepth;
			
			item.BookWeight = varBookWeight;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varSubDeliveryID,int? varDeliveryID,int? varTitleID,string varTitle,int? varCopies,int? varCurrentStatusID,string varRemarks,int? varCopiesPerCarton,float? varTotalConsignmentWeight,float? varTotalConsignmentCube,decimal? varCartonLength,decimal? varCartonDepth,decimal? varCartonHeight,int? varTotalCartons,float? varCartonWeight,float? varLastCarton,int? varJackets,int? varFullPallets,int? varCartonsPerFullPallet,int? varPartPallets,int? varCartonsPerPartPallet,decimal? varActualPPC,byte[] varTs,decimal? varEstimatedPPC,decimal? varBookLength,decimal? varBookWidth,decimal? varBookDepth,decimal? varBookWeight)
		{
			DeliverySubSubTable item = new DeliverySubSubTable();
			
				item.SubDeliveryID = varSubDeliveryID;
			
				item.DeliveryID = varDeliveryID;
			
				item.TitleID = varTitleID;
			
				item.Title = varTitle;
			
				item.Copies = varCopies;
			
				item.CurrentStatusID = varCurrentStatusID;
			
				item.Remarks = varRemarks;
			
				item.CopiesPerCarton = varCopiesPerCarton;
			
				item.TotalConsignmentWeight = varTotalConsignmentWeight;
			
				item.TotalConsignmentCube = varTotalConsignmentCube;
			
				item.CartonLength = varCartonLength;
			
				item.CartonDepth = varCartonDepth;
			
				item.CartonHeight = varCartonHeight;
			
				item.TotalCartons = varTotalCartons;
			
				item.CartonWeight = varCartonWeight;
			
				item.LastCarton = varLastCarton;
			
				item.Jackets = varJackets;
			
				item.FullPallets = varFullPallets;
			
				item.CartonsPerFullPallet = varCartonsPerFullPallet;
			
				item.PartPallets = varPartPallets;
			
				item.CartonsPerPartPallet = varCartonsPerPartPallet;
			
				item.ActualPPC = varActualPPC;
			
				item.Ts = varTs;
			
				item.EstimatedPPC = varEstimatedPPC;
			
				item.BookLength = varBookLength;
			
				item.BookWidth = varBookWidth;
			
				item.BookDepth = varBookDepth;
			
				item.BookWeight = varBookWeight;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn SubDeliveryIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn DeliveryIDColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn TitleIDColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn TitleColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn CopiesColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn CurrentStatusIDColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn RemarksColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn CopiesPerCartonColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn TotalConsignmentWeightColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn TotalConsignmentCubeColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn CartonLengthColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn CartonDepthColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn CartonHeightColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn TotalCartonsColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn CartonWeightColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn LastCartonColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        public static TableSchema.TableColumn JacketsColumn
        {
            get { return Schema.Columns[16]; }
        }
        
        
        
        public static TableSchema.TableColumn FullPalletsColumn
        {
            get { return Schema.Columns[17]; }
        }
        
        
        
        public static TableSchema.TableColumn CartonsPerFullPalletColumn
        {
            get { return Schema.Columns[18]; }
        }
        
        
        
        public static TableSchema.TableColumn PartPalletsColumn
        {
            get { return Schema.Columns[19]; }
        }
        
        
        
        public static TableSchema.TableColumn CartonsPerPartPalletColumn
        {
            get { return Schema.Columns[20]; }
        }
        
        
        
        public static TableSchema.TableColumn ActualPPCColumn
        {
            get { return Schema.Columns[21]; }
        }
        
        
        
        public static TableSchema.TableColumn TsColumn
        {
            get { return Schema.Columns[22]; }
        }
        
        
        
        public static TableSchema.TableColumn EstimatedPPCColumn
        {
            get { return Schema.Columns[23]; }
        }
        
        
        
        public static TableSchema.TableColumn BookLengthColumn
        {
            get { return Schema.Columns[24]; }
        }
        
        
        
        public static TableSchema.TableColumn BookWidthColumn
        {
            get { return Schema.Columns[25]; }
        }
        
        
        
        public static TableSchema.TableColumn BookDepthColumn
        {
            get { return Schema.Columns[26]; }
        }
        
        
        
        public static TableSchema.TableColumn BookWeightColumn
        {
            get { return Schema.Columns[27]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string SubDeliveryID = @"SubDeliveryID";
			 public static string DeliveryID = @"DeliveryID";
			 public static string TitleID = @"TitleID";
			 public static string Title = @"Title";
			 public static string Copies = @"Copies";
			 public static string CurrentStatusID = @"CurrentStatusID";
			 public static string Remarks = @"Remarks";
			 public static string CopiesPerCarton = @"CopiesPerCarton";
			 public static string TotalConsignmentWeight = @"TotalConsignmentWeight";
			 public static string TotalConsignmentCube = @"TotalConsignmentCube";
			 public static string CartonLength = @"CartonLength";
			 public static string CartonDepth = @"CartonDepth";
			 public static string CartonHeight = @"CartonHeight";
			 public static string TotalCartons = @"TotalCartons";
			 public static string CartonWeight = @"CartonWeight";
			 public static string LastCarton = @"LastCarton";
			 public static string Jackets = @"Jackets";
			 public static string FullPallets = @"FullPallets";
			 public static string CartonsPerFullPallet = @"CartonsPerFullPallet";
			 public static string PartPallets = @"PartPallets";
			 public static string CartonsPerPartPallet = @"CartonsPerPartPallet";
			 public static string ActualPPC = @"ActualPPC";
			 public static string Ts = @"TS";
			 public static string EstimatedPPC = @"EstimatedPPC";
			 public static string BookLength = @"BookLength";
			 public static string BookWidth = @"BookWidth";
			 public static string BookDepth = @"BookDepth";
			 public static string BookWeight = @"BookWeight";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
