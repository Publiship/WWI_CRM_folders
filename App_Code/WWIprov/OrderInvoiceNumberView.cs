using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DAL.Logistics{
    /// <summary>
    /// Strongly-typed collection for the OrderInvoiceNumberView class.
    /// </summary>
    [Serializable]
    public partial class OrderInvoiceNumberViewCollection : ReadOnlyList<OrderInvoiceNumberView, OrderInvoiceNumberViewCollection>
    {        
        public OrderInvoiceNumberViewCollection() {}
    }
    /// <summary>
    /// This is  Read-only wrapper class for the OrderInvoiceNumberView view.
    /// </summary>
    [Serializable]
    public partial class OrderInvoiceNumberView : ReadOnlyRecord<OrderInvoiceNumberView>, IReadOnlyRecord
    {
    
	    #region Default Settings
	    protected static void SetSQLProps() 
	    {
		    GetTableSchema();
	    }
	    #endregion
        #region Schema Accessor
	    public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                {
                    SetSQLProps();
                }
                return BaseSchema;
            }
        }
    	
        private static void GetTableSchema() 
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("OrderInvoiceNumberView", TableType.View, DataService.GetInstance("WWIprov"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns
                
                TableSchema.TableColumn colvarOrderID = new TableSchema.TableColumn(schema);
                colvarOrderID.ColumnName = "OrderID";
                colvarOrderID.DataType = DbType.Int32;
                colvarOrderID.MaxLength = 0;
                colvarOrderID.AutoIncrement = false;
                colvarOrderID.IsNullable = false;
                colvarOrderID.IsPrimaryKey = false;
                colvarOrderID.IsForeignKey = false;
                colvarOrderID.IsReadOnly = false;
                
                schema.Columns.Add(colvarOrderID);
                
                TableSchema.TableColumn colvarOrderNumber = new TableSchema.TableColumn(schema);
                colvarOrderNumber.ColumnName = "OrderNumber";
                colvarOrderNumber.DataType = DbType.Int32;
                colvarOrderNumber.MaxLength = 0;
                colvarOrderNumber.AutoIncrement = false;
                colvarOrderNumber.IsNullable = true;
                colvarOrderNumber.IsPrimaryKey = false;
                colvarOrderNumber.IsForeignKey = false;
                colvarOrderNumber.IsReadOnly = false;
                
                schema.Columns.Add(colvarOrderNumber);
                
                TableSchema.TableColumn colvarHCCompositeRef = new TableSchema.TableColumn(schema);
                colvarHCCompositeRef.ColumnName = "HCCompositeRef";
                colvarHCCompositeRef.DataType = DbType.String;
                colvarHCCompositeRef.MaxLength = 50;
                colvarHCCompositeRef.AutoIncrement = false;
                colvarHCCompositeRef.IsNullable = true;
                colvarHCCompositeRef.IsPrimaryKey = false;
                colvarHCCompositeRef.IsForeignKey = false;
                colvarHCCompositeRef.IsReadOnly = false;
                
                schema.Columns.Add(colvarHCCompositeRef);
                
                TableSchema.TableColumn colvarHCInvoiceAmount2 = new TableSchema.TableColumn(schema);
                colvarHCInvoiceAmount2.ColumnName = "HCInvoiceAmount2";
                colvarHCInvoiceAmount2.DataType = DbType.Currency;
                colvarHCInvoiceAmount2.MaxLength = 0;
                colvarHCInvoiceAmount2.AutoIncrement = false;
                colvarHCInvoiceAmount2.IsNullable = true;
                colvarHCInvoiceAmount2.IsPrimaryKey = false;
                colvarHCInvoiceAmount2.IsForeignKey = false;
                colvarHCInvoiceAmount2.IsReadOnly = false;
                
                schema.Columns.Add(colvarHCInvoiceAmount2);
                
                TableSchema.TableColumn colvarUnitPricePerCopy = new TableSchema.TableColumn(schema);
                colvarUnitPricePerCopy.ColumnName = "UnitPricePerCopy";
                colvarUnitPricePerCopy.DataType = DbType.Single;
                colvarUnitPricePerCopy.MaxLength = 0;
                colvarUnitPricePerCopy.AutoIncrement = false;
                colvarUnitPricePerCopy.IsNullable = true;
                colvarUnitPricePerCopy.IsPrimaryKey = false;
                colvarUnitPricePerCopy.IsForeignKey = false;
                colvarUnitPricePerCopy.IsReadOnly = false;
                
                schema.Columns.Add(colvarUnitPricePerCopy);
                
                TableSchema.TableColumn colvarHodderPricePerCopy = new TableSchema.TableColumn(schema);
                colvarHodderPricePerCopy.ColumnName = "HodderPricePerCopy";
                colvarHodderPricePerCopy.DataType = DbType.Single;
                colvarHodderPricePerCopy.MaxLength = 0;
                colvarHodderPricePerCopy.AutoIncrement = false;
                colvarHodderPricePerCopy.IsNullable = true;
                colvarHodderPricePerCopy.IsPrimaryKey = false;
                colvarHodderPricePerCopy.IsForeignKey = false;
                colvarHodderPricePerCopy.IsReadOnly = false;
                
                schema.Columns.Add(colvarHodderPricePerCopy);
                
                TableSchema.TableColumn colvarConsolNumber = new TableSchema.TableColumn(schema);
                colvarConsolNumber.ColumnName = "ConsolNumber";
                colvarConsolNumber.DataType = DbType.Int32;
                colvarConsolNumber.MaxLength = 0;
                colvarConsolNumber.AutoIncrement = false;
                colvarConsolNumber.IsNullable = true;
                colvarConsolNumber.IsPrimaryKey = false;
                colvarConsolNumber.IsForeignKey = false;
                colvarConsolNumber.IsReadOnly = false;
                
                schema.Columns.Add(colvarConsolNumber);
                
                
                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["WWIprov"].AddSchema("OrderInvoiceNumberView",schema);
            }
        }
        #endregion
        
        #region Query Accessor
	    public static Query CreateQuery()
	    {
		    return new Query(Schema);
	    }
	    #endregion
	    
	    #region .ctors
	    public OrderInvoiceNumberView()
	    {
            SetSQLProps();
            SetDefaults();
            MarkNew();
        }
        public OrderInvoiceNumberView(bool useDatabaseDefaults)
	    {
		    SetSQLProps();
		    if(useDatabaseDefaults)
		    {
				ForceDefaults();
			}
			MarkNew();
	    }
	    
	    public OrderInvoiceNumberView(object keyID)
	    {
		    SetSQLProps();
		    LoadByKey(keyID);
	    }
    	 
	    public OrderInvoiceNumberView(string columnName, object columnValue)
        {
            SetSQLProps();
            LoadByParam(columnName,columnValue);
        }
        
	    #endregion
	    
	    #region Props
	    
          
        [XmlAttribute("OrderID")]
        [Bindable(true)]
        public int OrderID 
	    {
		    get
		    {
			    return GetColumnValue<int>("OrderID");
		    }
            set 
		    {
			    SetColumnValue("OrderID", value);
            }
        }
	      
        [XmlAttribute("OrderNumber")]
        [Bindable(true)]
        public int? OrderNumber 
	    {
		    get
		    {
			    return GetColumnValue<int?>("OrderNumber");
		    }
            set 
		    {
			    SetColumnValue("OrderNumber", value);
            }
        }
	      
        [XmlAttribute("HCCompositeRef")]
        [Bindable(true)]
        public string HCCompositeRef 
	    {
		    get
		    {
			    return GetColumnValue<string>("HCCompositeRef");
		    }
            set 
		    {
			    SetColumnValue("HCCompositeRef", value);
            }
        }
	      
        [XmlAttribute("HCInvoiceAmount2")]
        [Bindable(true)]
        public decimal? HCInvoiceAmount2 
	    {
		    get
		    {
			    return GetColumnValue<decimal?>("HCInvoiceAmount2");
		    }
            set 
		    {
			    SetColumnValue("HCInvoiceAmount2", value);
            }
        }
	      
        [XmlAttribute("UnitPricePerCopy")]
        [Bindable(true)]
        public float? UnitPricePerCopy 
	    {
		    get
		    {
			    return GetColumnValue<float?>("UnitPricePerCopy");
		    }
            set 
		    {
			    SetColumnValue("UnitPricePerCopy", value);
            }
        }
	      
        [XmlAttribute("HodderPricePerCopy")]
        [Bindable(true)]
        public float? HodderPricePerCopy 
	    {
		    get
		    {
			    return GetColumnValue<float?>("HodderPricePerCopy");
		    }
            set 
		    {
			    SetColumnValue("HodderPricePerCopy", value);
            }
        }
	      
        [XmlAttribute("ConsolNumber")]
        [Bindable(true)]
        public int? ConsolNumber 
	    {
		    get
		    {
			    return GetColumnValue<int?>("ConsolNumber");
		    }
            set 
		    {
			    SetColumnValue("ConsolNumber", value);
            }
        }
	    
	    #endregion
    
	    #region Columns Struct
	    public struct Columns
	    {
		    
		    
            public static string OrderID = @"OrderID";
            
            public static string OrderNumber = @"OrderNumber";
            
            public static string HCCompositeRef = @"HCCompositeRef";
            
            public static string HCInvoiceAmount2 = @"HCInvoiceAmount2";
            
            public static string UnitPricePerCopy = @"UnitPricePerCopy";
            
            public static string HodderPricePerCopy = @"HodderPricePerCopy";
            
            public static string ConsolNumber = @"ConsolNumber";
            
	    }
	    #endregion
	    
	    
	    #region IAbstractRecord Members
        public new CT GetColumnValue<CT>(string columnName) {
            return base.GetColumnValue<CT>(columnName);
        }
        public object GetColumnValue(string columnName) {
            return base.GetColumnValue<object>(columnName);
        }
        #endregion
	    
    }
}
