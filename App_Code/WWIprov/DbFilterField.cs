using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DAL.Logistics
{
	/// <summary>
	/// Strongly-typed collection for the DbFilterField class.
	/// </summary>
    [Serializable]
	public partial class DbFilterFieldCollection : ActiveList<DbFilterField, DbFilterFieldCollection>
	{	   
		public DbFilterFieldCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>DbFilterFieldCollection</returns>
		public DbFilterFieldCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                DbFilterField o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the db_filter_fields table.
	/// </summary>
	[Serializable]
	public partial class DbFilterField : ActiveRecord<DbFilterField>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public DbFilterField()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public DbFilterField(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public DbFilterField(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public DbFilterField(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("db_filter_fields", TableType.Table, DataService.GetInstance("WWIprov"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarFilterFieldId = new TableSchema.TableColumn(schema);
				colvarFilterFieldId.ColumnName = "filter_field_ID";
				colvarFilterFieldId.DataType = DbType.Int32;
				colvarFilterFieldId.MaxLength = 0;
				colvarFilterFieldId.AutoIncrement = true;
				colvarFilterFieldId.IsNullable = false;
				colvarFilterFieldId.IsPrimaryKey = true;
				colvarFilterFieldId.IsForeignKey = false;
				colvarFilterFieldId.IsReadOnly = false;
				colvarFilterFieldId.DefaultSetting = @"";
				colvarFilterFieldId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFilterFieldId);
				
				TableSchema.TableColumn colvarFilterCaption = new TableSchema.TableColumn(schema);
				colvarFilterCaption.ColumnName = "filter_caption";
				colvarFilterCaption.DataType = DbType.String;
				colvarFilterCaption.MaxLength = 50;
				colvarFilterCaption.AutoIncrement = false;
				colvarFilterCaption.IsNullable = true;
				colvarFilterCaption.IsPrimaryKey = false;
				colvarFilterCaption.IsForeignKey = false;
				colvarFilterCaption.IsReadOnly = false;
				colvarFilterCaption.DefaultSetting = @"";
				colvarFilterCaption.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFilterCaption);
				
				TableSchema.TableColumn colvarFieldName = new TableSchema.TableColumn(schema);
				colvarFieldName.ColumnName = "field_name";
				colvarFieldName.DataType = DbType.String;
				colvarFieldName.MaxLength = 50;
				colvarFieldName.AutoIncrement = false;
				colvarFieldName.IsNullable = true;
				colvarFieldName.IsPrimaryKey = false;
				colvarFieldName.IsForeignKey = false;
				colvarFieldName.IsReadOnly = false;
				colvarFieldName.DefaultSetting = @"";
				colvarFieldName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFieldName);
				
				TableSchema.TableColumn colvarFieldSource = new TableSchema.TableColumn(schema);
				colvarFieldSource.ColumnName = "field_source";
				colvarFieldSource.DataType = DbType.String;
				colvarFieldSource.MaxLength = 50;
				colvarFieldSource.AutoIncrement = false;
				colvarFieldSource.IsNullable = true;
				colvarFieldSource.IsPrimaryKey = false;
				colvarFieldSource.IsForeignKey = false;
				colvarFieldSource.IsReadOnly = false;
				colvarFieldSource.DefaultSetting = @"";
				colvarFieldSource.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFieldSource);
				
				TableSchema.TableColumn colvarColumnType = new TableSchema.TableColumn(schema);
				colvarColumnType.ColumnName = "column_type";
				colvarColumnType.DataType = DbType.String;
				colvarColumnType.MaxLength = 20;
				colvarColumnType.AutoIncrement = false;
				colvarColumnType.IsNullable = true;
				colvarColumnType.IsPrimaryKey = false;
				colvarColumnType.IsForeignKey = false;
				colvarColumnType.IsReadOnly = false;
				colvarColumnType.DefaultSetting = @"";
				colvarColumnType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarColumnType);
				
				TableSchema.TableColumn colvarCriteriaString = new TableSchema.TableColumn(schema);
				colvarCriteriaString.ColumnName = "criteria_string";
				colvarCriteriaString.DataType = DbType.String;
				colvarCriteriaString.MaxLength = 20;
				colvarCriteriaString.AutoIncrement = false;
				colvarCriteriaString.IsNullable = true;
				colvarCriteriaString.IsPrimaryKey = false;
				colvarCriteriaString.IsForeignKey = false;
				colvarCriteriaString.IsReadOnly = false;
				colvarCriteriaString.DefaultSetting = @"";
				colvarCriteriaString.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCriteriaString);
				
				TableSchema.TableColumn colvarAppliesToDeprecated = new TableSchema.TableColumn(schema);
				colvarAppliesToDeprecated.ColumnName = "applies_to_deprecated";
				colvarAppliesToDeprecated.DataType = DbType.String;
				colvarAppliesToDeprecated.MaxLength = 15;
				colvarAppliesToDeprecated.AutoIncrement = false;
				colvarAppliesToDeprecated.IsNullable = true;
				colvarAppliesToDeprecated.IsPrimaryKey = false;
				colvarAppliesToDeprecated.IsForeignKey = false;
				colvarAppliesToDeprecated.IsReadOnly = false;
				colvarAppliesToDeprecated.DefaultSetting = @"";
				colvarAppliesToDeprecated.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAppliesToDeprecated);
				
				TableSchema.TableColumn colvarAppliesTo = new TableSchema.TableColumn(schema);
				colvarAppliesTo.ColumnName = "applies_to";
				colvarAppliesTo.DataType = DbType.String;
				colvarAppliesTo.MaxLength = 15;
				colvarAppliesTo.AutoIncrement = false;
				colvarAppliesTo.IsNullable = true;
				colvarAppliesTo.IsPrimaryKey = false;
				colvarAppliesTo.IsForeignKey = false;
				colvarAppliesTo.IsReadOnly = false;
				colvarAppliesTo.DefaultSetting = @"";
				colvarAppliesTo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAppliesTo);
				
				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "is_active";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = true;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);
				
				TableSchema.TableColumn colvarIsQuickFilter = new TableSchema.TableColumn(schema);
				colvarIsQuickFilter.ColumnName = "is_quick_filter";
				colvarIsQuickFilter.DataType = DbType.Boolean;
				colvarIsQuickFilter.MaxLength = 0;
				colvarIsQuickFilter.AutoIncrement = false;
				colvarIsQuickFilter.IsNullable = true;
				colvarIsQuickFilter.IsPrimaryKey = false;
				colvarIsQuickFilter.IsForeignKey = false;
				colvarIsQuickFilter.IsReadOnly = false;
				
						colvarIsQuickFilter.DefaultSetting = @"((0))";
				colvarIsQuickFilter.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsQuickFilter);
				
				TableSchema.TableColumn colvarLoginRequired = new TableSchema.TableColumn(schema);
				colvarLoginRequired.ColumnName = "login_required";
				colvarLoginRequired.DataType = DbType.Boolean;
				colvarLoginRequired.MaxLength = 0;
				colvarLoginRequired.AutoIncrement = false;
				colvarLoginRequired.IsNullable = true;
				colvarLoginRequired.IsPrimaryKey = false;
				colvarLoginRequired.IsForeignKey = false;
				colvarLoginRequired.IsReadOnly = false;
				
						colvarLoginRequired.DefaultSetting = @"((0))";
				colvarLoginRequired.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLoginRequired);
				
				TableSchema.TableColumn colvarSortOrder = new TableSchema.TableColumn(schema);
				colvarSortOrder.ColumnName = "sort_order";
				colvarSortOrder.DataType = DbType.Int32;
				colvarSortOrder.MaxLength = 0;
				colvarSortOrder.AutoIncrement = false;
				colvarSortOrder.IsNullable = true;
				colvarSortOrder.IsPrimaryKey = false;
				colvarSortOrder.IsForeignKey = false;
				colvarSortOrder.IsReadOnly = false;
				
						colvarSortOrder.DefaultSetting = @"((0))";
				colvarSortOrder.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSortOrder);
				
				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "created_by";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 10;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = true;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);
				
				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "created_on";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = true;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);
				
				TableSchema.TableColumn colvarMsTimestamp = new TableSchema.TableColumn(schema);
				colvarMsTimestamp.ColumnName = "ms_timestamp";
				colvarMsTimestamp.DataType = DbType.Binary;
				colvarMsTimestamp.MaxLength = 0;
				colvarMsTimestamp.AutoIncrement = false;
				colvarMsTimestamp.IsNullable = false;
				colvarMsTimestamp.IsPrimaryKey = false;
				colvarMsTimestamp.IsForeignKey = false;
				colvarMsTimestamp.IsReadOnly = true;
				colvarMsTimestamp.DefaultSetting = @"";
				colvarMsTimestamp.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMsTimestamp);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["WWIprov"].AddSchema("db_filter_fields",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("FilterFieldId")]
		[Bindable(true)]
		public int FilterFieldId 
		{
			get { return GetColumnValue<int>(Columns.FilterFieldId); }
			set { SetColumnValue(Columns.FilterFieldId, value); }
		}
		  
		[XmlAttribute("FilterCaption")]
		[Bindable(true)]
		public string FilterCaption 
		{
			get { return GetColumnValue<string>(Columns.FilterCaption); }
			set { SetColumnValue(Columns.FilterCaption, value); }
		}
		  
		[XmlAttribute("FieldName")]
		[Bindable(true)]
		public string FieldName 
		{
			get { return GetColumnValue<string>(Columns.FieldName); }
			set { SetColumnValue(Columns.FieldName, value); }
		}
		  
		[XmlAttribute("FieldSource")]
		[Bindable(true)]
		public string FieldSource 
		{
			get { return GetColumnValue<string>(Columns.FieldSource); }
			set { SetColumnValue(Columns.FieldSource, value); }
		}
		  
		[XmlAttribute("ColumnType")]
		[Bindable(true)]
		public string ColumnType 
		{
			get { return GetColumnValue<string>(Columns.ColumnType); }
			set { SetColumnValue(Columns.ColumnType, value); }
		}
		  
		[XmlAttribute("CriteriaString")]
		[Bindable(true)]
		public string CriteriaString 
		{
			get { return GetColumnValue<string>(Columns.CriteriaString); }
			set { SetColumnValue(Columns.CriteriaString, value); }
		}
		  
		[XmlAttribute("AppliesToDeprecated")]
		[Bindable(true)]
		public string AppliesToDeprecated 
		{
			get { return GetColumnValue<string>(Columns.AppliesToDeprecated); }
			set { SetColumnValue(Columns.AppliesToDeprecated, value); }
		}
		  
		[XmlAttribute("AppliesTo")]
		[Bindable(true)]
		public string AppliesTo 
		{
			get { return GetColumnValue<string>(Columns.AppliesTo); }
			set { SetColumnValue(Columns.AppliesTo, value); }
		}
		  
		[XmlAttribute("IsActive")]
		[Bindable(true)]
		public bool? IsActive 
		{
			get { return GetColumnValue<bool?>(Columns.IsActive); }
			set { SetColumnValue(Columns.IsActive, value); }
		}
		  
		[XmlAttribute("IsQuickFilter")]
		[Bindable(true)]
		public bool? IsQuickFilter 
		{
			get { return GetColumnValue<bool?>(Columns.IsQuickFilter); }
			set { SetColumnValue(Columns.IsQuickFilter, value); }
		}
		  
		[XmlAttribute("LoginRequired")]
		[Bindable(true)]
		public bool? LoginRequired 
		{
			get { return GetColumnValue<bool?>(Columns.LoginRequired); }
			set { SetColumnValue(Columns.LoginRequired, value); }
		}
		  
		[XmlAttribute("SortOrder")]
		[Bindable(true)]
		public int? SortOrder 
		{
			get { return GetColumnValue<int?>(Columns.SortOrder); }
			set { SetColumnValue(Columns.SortOrder, value); }
		}
		  
		[XmlAttribute("CreatedBy")]
		[Bindable(true)]
		public string CreatedBy 
		{
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set { SetColumnValue(Columns.CreatedBy, value); }
		}
		  
		[XmlAttribute("CreatedOn")]
		[Bindable(true)]
		public DateTime? CreatedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.CreatedOn); }
			set { SetColumnValue(Columns.CreatedOn, value); }
		}
		  
		[XmlAttribute("MsTimestamp")]
		[Bindable(true)]
		public byte[] MsTimestamp 
		{
			get { return GetColumnValue<byte[]>(Columns.MsTimestamp); }
			set { SetColumnValue(Columns.MsTimestamp, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varFilterCaption,string varFieldName,string varFieldSource,string varColumnType,string varCriteriaString,string varAppliesToDeprecated,string varAppliesTo,bool? varIsActive,bool? varIsQuickFilter,bool? varLoginRequired,int? varSortOrder,string varCreatedBy,DateTime? varCreatedOn,byte[] varMsTimestamp)
		{
			DbFilterField item = new DbFilterField();
			
			item.FilterCaption = varFilterCaption;
			
			item.FieldName = varFieldName;
			
			item.FieldSource = varFieldSource;
			
			item.ColumnType = varColumnType;
			
			item.CriteriaString = varCriteriaString;
			
			item.AppliesToDeprecated = varAppliesToDeprecated;
			
			item.AppliesTo = varAppliesTo;
			
			item.IsActive = varIsActive;
			
			item.IsQuickFilter = varIsQuickFilter;
			
			item.LoginRequired = varLoginRequired;
			
			item.SortOrder = varSortOrder;
			
			item.CreatedBy = varCreatedBy;
			
			item.CreatedOn = varCreatedOn;
			
			item.MsTimestamp = varMsTimestamp;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varFilterFieldId,string varFilterCaption,string varFieldName,string varFieldSource,string varColumnType,string varCriteriaString,string varAppliesToDeprecated,string varAppliesTo,bool? varIsActive,bool? varIsQuickFilter,bool? varLoginRequired,int? varSortOrder,string varCreatedBy,DateTime? varCreatedOn,byte[] varMsTimestamp)
		{
			DbFilterField item = new DbFilterField();
			
				item.FilterFieldId = varFilterFieldId;
			
				item.FilterCaption = varFilterCaption;
			
				item.FieldName = varFieldName;
			
				item.FieldSource = varFieldSource;
			
				item.ColumnType = varColumnType;
			
				item.CriteriaString = varCriteriaString;
			
				item.AppliesToDeprecated = varAppliesToDeprecated;
			
				item.AppliesTo = varAppliesTo;
			
				item.IsActive = varIsActive;
			
				item.IsQuickFilter = varIsQuickFilter;
			
				item.LoginRequired = varLoginRequired;
			
				item.SortOrder = varSortOrder;
			
				item.CreatedBy = varCreatedBy;
			
				item.CreatedOn = varCreatedOn;
			
				item.MsTimestamp = varMsTimestamp;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn FilterFieldIdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn FilterCaptionColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn FieldNameColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn FieldSourceColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn ColumnTypeColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn CriteriaStringColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn AppliesToDeprecatedColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn AppliesToColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn IsActiveColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn IsQuickFilterColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn LoginRequiredColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn SortOrderColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedByColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedOnColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn MsTimestampColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string FilterFieldId = @"filter_field_ID";
			 public static string FilterCaption = @"filter_caption";
			 public static string FieldName = @"field_name";
			 public static string FieldSource = @"field_source";
			 public static string ColumnType = @"column_type";
			 public static string CriteriaString = @"criteria_string";
			 public static string AppliesToDeprecated = @"applies_to_deprecated";
			 public static string AppliesTo = @"applies_to";
			 public static string IsActive = @"is_active";
			 public static string IsQuickFilter = @"is_quick_filter";
			 public static string LoginRequired = @"login_required";
			 public static string SortOrder = @"sort_order";
			 public static string CreatedBy = @"created_by";
			 public static string CreatedOn = @"created_on";
			 public static string MsTimestamp = @"ms_timestamp";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
