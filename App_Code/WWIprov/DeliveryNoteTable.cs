using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DAL.Logistics
{
	/// <summary>
	/// Strongly-typed collection for the DeliveryNoteTable class.
	/// </summary>
    [Serializable]
	public partial class DeliveryNoteTableCollection : ActiveList<DeliveryNoteTable, DeliveryNoteTableCollection>
	{	   
		public DeliveryNoteTableCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>DeliveryNoteTableCollection</returns>
		public DeliveryNoteTableCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                DeliveryNoteTable o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the DeliveryNoteTable table.
	/// </summary>
	[Serializable]
	public partial class DeliveryNoteTable : ActiveRecord<DeliveryNoteTable>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public DeliveryNoteTable()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public DeliveryNoteTable(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public DeliveryNoteTable(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public DeliveryNoteTable(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("DeliveryNoteTable", TableType.Table, DataService.GetInstance("WWIprov"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarDeliveryNoteID = new TableSchema.TableColumn(schema);
				colvarDeliveryNoteID.ColumnName = "DeliveryNoteID";
				colvarDeliveryNoteID.DataType = DbType.Int32;
				colvarDeliveryNoteID.MaxLength = 0;
				colvarDeliveryNoteID.AutoIncrement = true;
				colvarDeliveryNoteID.IsNullable = false;
				colvarDeliveryNoteID.IsPrimaryKey = true;
				colvarDeliveryNoteID.IsForeignKey = false;
				colvarDeliveryNoteID.IsReadOnly = false;
				colvarDeliveryNoteID.DefaultSetting = @"";
				colvarDeliveryNoteID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDeliveryNoteID);
				
				TableSchema.TableColumn colvarDeliveryPointID = new TableSchema.TableColumn(schema);
				colvarDeliveryPointID.ColumnName = "DeliveryPointID";
				colvarDeliveryPointID.DataType = DbType.Int32;
				colvarDeliveryPointID.MaxLength = 0;
				colvarDeliveryPointID.AutoIncrement = false;
				colvarDeliveryPointID.IsNullable = true;
				colvarDeliveryPointID.IsPrimaryKey = false;
				colvarDeliveryPointID.IsForeignKey = false;
				colvarDeliveryPointID.IsReadOnly = false;
				colvarDeliveryPointID.DefaultSetting = @"";
				colvarDeliveryPointID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDeliveryPointID);
				
				TableSchema.TableColumn colvarPublisher = new TableSchema.TableColumn(schema);
				colvarPublisher.ColumnName = "Publisher";
				colvarPublisher.DataType = DbType.Int32;
				colvarPublisher.MaxLength = 0;
				colvarPublisher.AutoIncrement = false;
				colvarPublisher.IsNullable = true;
				colvarPublisher.IsPrimaryKey = false;
				colvarPublisher.IsForeignKey = false;
				colvarPublisher.IsReadOnly = false;
				colvarPublisher.DefaultSetting = @"";
				colvarPublisher.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPublisher);
				
				TableSchema.TableColumn colvarBookingReference = new TableSchema.TableColumn(schema);
				colvarBookingReference.ColumnName = "BookingReference";
				colvarBookingReference.DataType = DbType.String;
				colvarBookingReference.MaxLength = 50;
				colvarBookingReference.AutoIncrement = false;
				colvarBookingReference.IsNullable = true;
				colvarBookingReference.IsPrimaryKey = false;
				colvarBookingReference.IsForeignKey = false;
				colvarBookingReference.IsReadOnly = false;
				colvarBookingReference.DefaultSetting = @"";
				colvarBookingReference.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBookingReference);
				
				TableSchema.TableColumn colvarHaulierID = new TableSchema.TableColumn(schema);
				colvarHaulierID.ColumnName = "HaulierID";
				colvarHaulierID.DataType = DbType.Int32;
				colvarHaulierID.MaxLength = 0;
				colvarHaulierID.AutoIncrement = false;
				colvarHaulierID.IsNullable = true;
				colvarHaulierID.IsPrimaryKey = false;
				colvarHaulierID.IsForeignKey = false;
				colvarHaulierID.IsReadOnly = false;
				colvarHaulierID.DefaultSetting = @"";
				colvarHaulierID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHaulierID);
				
				TableSchema.TableColumn colvarRegNumber = new TableSchema.TableColumn(schema);
				colvarRegNumber.ColumnName = "RegNumber";
				colvarRegNumber.DataType = DbType.String;
				colvarRegNumber.MaxLength = 50;
				colvarRegNumber.AutoIncrement = false;
				colvarRegNumber.IsNullable = true;
				colvarRegNumber.IsPrimaryKey = false;
				colvarRegNumber.IsForeignKey = false;
				colvarRegNumber.IsReadOnly = false;
				colvarRegNumber.DefaultSetting = @"";
				colvarRegNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRegNumber);
				
				TableSchema.TableColumn colvarBookingDate = new TableSchema.TableColumn(schema);
				colvarBookingDate.ColumnName = "BookingDate";
				colvarBookingDate.DataType = DbType.DateTime;
				colvarBookingDate.MaxLength = 0;
				colvarBookingDate.AutoIncrement = false;
				colvarBookingDate.IsNullable = true;
				colvarBookingDate.IsPrimaryKey = false;
				colvarBookingDate.IsForeignKey = false;
				colvarBookingDate.IsReadOnly = false;
				colvarBookingDate.DefaultSetting = @"";
				colvarBookingDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBookingDate);
				
				TableSchema.TableColumn colvarBookingTime = new TableSchema.TableColumn(schema);
				colvarBookingTime.ColumnName = "BookingTime";
				colvarBookingTime.DataType = DbType.String;
				colvarBookingTime.MaxLength = 50;
				colvarBookingTime.AutoIncrement = false;
				colvarBookingTime.IsNullable = true;
				colvarBookingTime.IsPrimaryKey = false;
				colvarBookingTime.IsForeignKey = false;
				colvarBookingTime.IsReadOnly = false;
				colvarBookingTime.DefaultSetting = @"";
				colvarBookingTime.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBookingTime);
				
				TableSchema.TableColumn colvarTotalPackages = new TableSchema.TableColumn(schema);
				colvarTotalPackages.ColumnName = "TotalPackages";
				colvarTotalPackages.DataType = DbType.Int32;
				colvarTotalPackages.MaxLength = 0;
				colvarTotalPackages.AutoIncrement = false;
				colvarTotalPackages.IsNullable = true;
				colvarTotalPackages.IsPrimaryKey = false;
				colvarTotalPackages.IsForeignKey = false;
				colvarTotalPackages.IsReadOnly = false;
				colvarTotalPackages.DefaultSetting = @"";
				colvarTotalPackages.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTotalPackages);
				
				TableSchema.TableColumn colvarTotalWeight = new TableSchema.TableColumn(schema);
				colvarTotalWeight.ColumnName = "TotalWeight";
				colvarTotalWeight.DataType = DbType.Int32;
				colvarTotalWeight.MaxLength = 0;
				colvarTotalWeight.AutoIncrement = false;
				colvarTotalWeight.IsNullable = true;
				colvarTotalWeight.IsPrimaryKey = false;
				colvarTotalWeight.IsForeignKey = false;
				colvarTotalWeight.IsReadOnly = false;
				colvarTotalWeight.DefaultSetting = @"";
				colvarTotalWeight.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTotalWeight);
				
				TableSchema.TableColumn colvarTotalCube = new TableSchema.TableColumn(schema);
				colvarTotalCube.ColumnName = "TotalCube";
				colvarTotalCube.DataType = DbType.Decimal;
				colvarTotalCube.MaxLength = 0;
				colvarTotalCube.AutoIncrement = false;
				colvarTotalCube.IsNullable = true;
				colvarTotalCube.IsPrimaryKey = false;
				colvarTotalCube.IsForeignKey = false;
				colvarTotalCube.IsReadOnly = false;
				colvarTotalCube.DefaultSetting = @"";
				colvarTotalCube.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTotalCube);
				
				TableSchema.TableColumn colvarSignedFor = new TableSchema.TableColumn(schema);
				colvarSignedFor.ColumnName = "SignedFor";
				colvarSignedFor.DataType = DbType.String;
				colvarSignedFor.MaxLength = 1073741823;
				colvarSignedFor.AutoIncrement = false;
				colvarSignedFor.IsNullable = true;
				colvarSignedFor.IsPrimaryKey = false;
				colvarSignedFor.IsForeignKey = false;
				colvarSignedFor.IsReadOnly = false;
				colvarSignedFor.DefaultSetting = @"";
				colvarSignedFor.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSignedFor);
				
				TableSchema.TableColumn colvarNotes = new TableSchema.TableColumn(schema);
				colvarNotes.ColumnName = "Notes";
				colvarNotes.DataType = DbType.String;
				colvarNotes.MaxLength = 1073741823;
				colvarNotes.AutoIncrement = false;
				colvarNotes.IsNullable = true;
				colvarNotes.IsPrimaryKey = false;
				colvarNotes.IsForeignKey = false;
				colvarNotes.IsReadOnly = false;
				colvarNotes.DefaultSetting = @"";
				colvarNotes.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNotes);
				
				TableSchema.TableColumn colvarUKZone = new TableSchema.TableColumn(schema);
				colvarUKZone.ColumnName = "UKZone";
				colvarUKZone.DataType = DbType.Int32;
				colvarUKZone.MaxLength = 0;
				colvarUKZone.AutoIncrement = false;
				colvarUKZone.IsNullable = true;
				colvarUKZone.IsPrimaryKey = false;
				colvarUKZone.IsForeignKey = false;
				colvarUKZone.IsReadOnly = false;
				colvarUKZone.DefaultSetting = @"";
				colvarUKZone.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUKZone);
				
				TableSchema.TableColumn colvarPalletSpec = new TableSchema.TableColumn(schema);
				colvarPalletSpec.ColumnName = "PalletSpec";
				colvarPalletSpec.DataType = DbType.Int32;
				colvarPalletSpec.MaxLength = 0;
				colvarPalletSpec.AutoIncrement = false;
				colvarPalletSpec.IsNullable = true;
				colvarPalletSpec.IsPrimaryKey = false;
				colvarPalletSpec.IsForeignKey = false;
				colvarPalletSpec.IsReadOnly = false;
				colvarPalletSpec.DefaultSetting = @"";
				colvarPalletSpec.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPalletSpec);
				
				TableSchema.TableColumn colvarTs = new TableSchema.TableColumn(schema);
				colvarTs.ColumnName = "TS";
				colvarTs.DataType = DbType.Binary;
				colvarTs.MaxLength = 0;
				colvarTs.AutoIncrement = false;
				colvarTs.IsNullable = true;
				colvarTs.IsPrimaryKey = false;
				colvarTs.IsForeignKey = false;
				colvarTs.IsReadOnly = true;
				colvarTs.DefaultSetting = @"";
				colvarTs.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTs);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["WWIprov"].AddSchema("DeliveryNoteTable",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("DeliveryNoteID")]
		[Bindable(true)]
		public int DeliveryNoteID 
		{
			get { return GetColumnValue<int>(Columns.DeliveryNoteID); }
			set { SetColumnValue(Columns.DeliveryNoteID, value); }
		}
		  
		[XmlAttribute("DeliveryPointID")]
		[Bindable(true)]
		public int? DeliveryPointID 
		{
			get { return GetColumnValue<int?>(Columns.DeliveryPointID); }
			set { SetColumnValue(Columns.DeliveryPointID, value); }
		}
		  
		[XmlAttribute("Publisher")]
		[Bindable(true)]
		public int? Publisher 
		{
			get { return GetColumnValue<int?>(Columns.Publisher); }
			set { SetColumnValue(Columns.Publisher, value); }
		}
		  
		[XmlAttribute("BookingReference")]
		[Bindable(true)]
		public string BookingReference 
		{
			get { return GetColumnValue<string>(Columns.BookingReference); }
			set { SetColumnValue(Columns.BookingReference, value); }
		}
		  
		[XmlAttribute("HaulierID")]
		[Bindable(true)]
		public int? HaulierID 
		{
			get { return GetColumnValue<int?>(Columns.HaulierID); }
			set { SetColumnValue(Columns.HaulierID, value); }
		}
		  
		[XmlAttribute("RegNumber")]
		[Bindable(true)]
		public string RegNumber 
		{
			get { return GetColumnValue<string>(Columns.RegNumber); }
			set { SetColumnValue(Columns.RegNumber, value); }
		}
		  
		[XmlAttribute("BookingDate")]
		[Bindable(true)]
		public DateTime? BookingDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.BookingDate); }
			set { SetColumnValue(Columns.BookingDate, value); }
		}
		  
		[XmlAttribute("BookingTime")]
		[Bindable(true)]
		public string BookingTime 
		{
			get { return GetColumnValue<string>(Columns.BookingTime); }
			set { SetColumnValue(Columns.BookingTime, value); }
		}
		  
		[XmlAttribute("TotalPackages")]
		[Bindable(true)]
		public int? TotalPackages 
		{
			get { return GetColumnValue<int?>(Columns.TotalPackages); }
			set { SetColumnValue(Columns.TotalPackages, value); }
		}
		  
		[XmlAttribute("TotalWeight")]
		[Bindable(true)]
		public int? TotalWeight 
		{
			get { return GetColumnValue<int?>(Columns.TotalWeight); }
			set { SetColumnValue(Columns.TotalWeight, value); }
		}
		  
		[XmlAttribute("TotalCube")]
		[Bindable(true)]
		public decimal? TotalCube 
		{
			get { return GetColumnValue<decimal?>(Columns.TotalCube); }
			set { SetColumnValue(Columns.TotalCube, value); }
		}
		  
		[XmlAttribute("SignedFor")]
		[Bindable(true)]
		public string SignedFor 
		{
			get { return GetColumnValue<string>(Columns.SignedFor); }
			set { SetColumnValue(Columns.SignedFor, value); }
		}
		  
		[XmlAttribute("Notes")]
		[Bindable(true)]
		public string Notes 
		{
			get { return GetColumnValue<string>(Columns.Notes); }
			set { SetColumnValue(Columns.Notes, value); }
		}
		  
		[XmlAttribute("UKZone")]
		[Bindable(true)]
		public int? UKZone 
		{
			get { return GetColumnValue<int?>(Columns.UKZone); }
			set { SetColumnValue(Columns.UKZone, value); }
		}
		  
		[XmlAttribute("PalletSpec")]
		[Bindable(true)]
		public int? PalletSpec 
		{
			get { return GetColumnValue<int?>(Columns.PalletSpec); }
			set { SetColumnValue(Columns.PalletSpec, value); }
		}
		  
		[XmlAttribute("Ts")]
		[Bindable(true)]
		public byte[] Ts 
		{
			get { return GetColumnValue<byte[]>(Columns.Ts); }
			set { SetColumnValue(Columns.Ts, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int? varDeliveryPointID,int? varPublisher,string varBookingReference,int? varHaulierID,string varRegNumber,DateTime? varBookingDate,string varBookingTime,int? varTotalPackages,int? varTotalWeight,decimal? varTotalCube,string varSignedFor,string varNotes,int? varUKZone,int? varPalletSpec,byte[] varTs)
		{
			DeliveryNoteTable item = new DeliveryNoteTable();
			
			item.DeliveryPointID = varDeliveryPointID;
			
			item.Publisher = varPublisher;
			
			item.BookingReference = varBookingReference;
			
			item.HaulierID = varHaulierID;
			
			item.RegNumber = varRegNumber;
			
			item.BookingDate = varBookingDate;
			
			item.BookingTime = varBookingTime;
			
			item.TotalPackages = varTotalPackages;
			
			item.TotalWeight = varTotalWeight;
			
			item.TotalCube = varTotalCube;
			
			item.SignedFor = varSignedFor;
			
			item.Notes = varNotes;
			
			item.UKZone = varUKZone;
			
			item.PalletSpec = varPalletSpec;
			
			item.Ts = varTs;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varDeliveryNoteID,int? varDeliveryPointID,int? varPublisher,string varBookingReference,int? varHaulierID,string varRegNumber,DateTime? varBookingDate,string varBookingTime,int? varTotalPackages,int? varTotalWeight,decimal? varTotalCube,string varSignedFor,string varNotes,int? varUKZone,int? varPalletSpec,byte[] varTs)
		{
			DeliveryNoteTable item = new DeliveryNoteTable();
			
				item.DeliveryNoteID = varDeliveryNoteID;
			
				item.DeliveryPointID = varDeliveryPointID;
			
				item.Publisher = varPublisher;
			
				item.BookingReference = varBookingReference;
			
				item.HaulierID = varHaulierID;
			
				item.RegNumber = varRegNumber;
			
				item.BookingDate = varBookingDate;
			
				item.BookingTime = varBookingTime;
			
				item.TotalPackages = varTotalPackages;
			
				item.TotalWeight = varTotalWeight;
			
				item.TotalCube = varTotalCube;
			
				item.SignedFor = varSignedFor;
			
				item.Notes = varNotes;
			
				item.UKZone = varUKZone;
			
				item.PalletSpec = varPalletSpec;
			
				item.Ts = varTs;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn DeliveryNoteIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn DeliveryPointIDColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn PublisherColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn BookingReferenceColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn HaulierIDColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn RegNumberColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn BookingDateColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn BookingTimeColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn TotalPackagesColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn TotalWeightColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn TotalCubeColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn SignedForColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn NotesColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn UKZoneColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn PalletSpecColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn TsColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string DeliveryNoteID = @"DeliveryNoteID";
			 public static string DeliveryPointID = @"DeliveryPointID";
			 public static string Publisher = @"Publisher";
			 public static string BookingReference = @"BookingReference";
			 public static string HaulierID = @"HaulierID";
			 public static string RegNumber = @"RegNumber";
			 public static string BookingDate = @"BookingDate";
			 public static string BookingTime = @"BookingTime";
			 public static string TotalPackages = @"TotalPackages";
			 public static string TotalWeight = @"TotalWeight";
			 public static string TotalCube = @"TotalCube";
			 public static string SignedFor = @"SignedFor";
			 public static string Notes = @"Notes";
			 public static string UKZone = @"UKZone";
			 public static string PalletSpec = @"PalletSpec";
			 public static string Ts = @"TS";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
