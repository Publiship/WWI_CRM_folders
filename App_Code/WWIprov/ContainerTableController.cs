using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DAL.Logistics
{
    /// <summary>
    /// Controller class for ContainerTable
    /// </summary>
    [System.ComponentModel.DataObject]
    public partial class ContainerTableController
    {
        // Preload our schema..
        ContainerTable thisSchemaLoad = new ContainerTable();
        private string userName = String.Empty;
        protected string UserName
        {
            get
            {
				if (userName.Length == 0) 
				{
    				if (System.Web.HttpContext.Current != null)
    				{
						userName=System.Web.HttpContext.Current.User.Identity.Name;
					}
					else
					{
						userName=System.Threading.Thread.CurrentPrincipal.Identity.Name;
					}
				}
				return userName;
            }
        }
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public ContainerTableCollection FetchAll()
        {
            ContainerTableCollection coll = new ContainerTableCollection();
            Query qry = new Query(ContainerTable.Schema);
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public ContainerTableCollection FetchByID(object ContainerID)
        {
            ContainerTableCollection coll = new ContainerTableCollection().Where("ContainerID", ContainerID).Load();
            return coll;
        }
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
        public ContainerTableCollection FetchByQuery(Query qry)
        {
            ContainerTableCollection coll = new ContainerTableCollection();
            coll.LoadAndCloseReader(qry.ExecuteReader()); 
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool Delete(object ContainerID)
        {
            return (ContainerTable.Delete(ContainerID) == 1);
        }
        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public bool Destroy(object ContainerID)
        {
            return (ContainerTable.Destroy(ContainerID) == 1);
        }
        
        
    	
	    /// <summary>
	    /// Inserts a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
	    public void Insert(string ContainerNumber,int? SizeTypeID,int? VoyageID,int? OriginPortID,int? DestinationPortID,int? Cycfs,DateTime? DevanDate,int? DevanWarehouseID,bool? Devanned,DateTime? DeliveryDate,bool? Delivered,bool? LoadedOnBoard,DateTime? Updated,string DevanNotes,int? OriginControllerID,int? DestinationControllerID,DateTime? DeliveryTime,string BookingRef,int? ContainerStatusID,byte[] Ts)
	    {
		    ContainerTable item = new ContainerTable();
		    
            item.ContainerNumber = ContainerNumber;
            
            item.SizeTypeID = SizeTypeID;
            
            item.VoyageID = VoyageID;
            
            item.OriginPortID = OriginPortID;
            
            item.DestinationPortID = DestinationPortID;
            
            item.Cycfs = Cycfs;
            
            item.DevanDate = DevanDate;
            
            item.DevanWarehouseID = DevanWarehouseID;
            
            item.Devanned = Devanned;
            
            item.DeliveryDate = DeliveryDate;
            
            item.Delivered = Delivered;
            
            item.LoadedOnBoard = LoadedOnBoard;
            
            item.Updated = Updated;
            
            item.DevanNotes = DevanNotes;
            
            item.OriginControllerID = OriginControllerID;
            
            item.DestinationControllerID = DestinationControllerID;
            
            item.DeliveryTime = DeliveryTime;
            
            item.BookingRef = BookingRef;
            
            item.ContainerStatusID = ContainerStatusID;
            
            item.Ts = Ts;
            
	    
		    item.Save(UserName);
	    }
    	
	    /// <summary>
	    /// Updates a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
	    public void Update(int ContainerID,string ContainerNumber,int? SizeTypeID,int? VoyageID,int? OriginPortID,int? DestinationPortID,int? Cycfs,DateTime? DevanDate,int? DevanWarehouseID,bool? Devanned,DateTime? DeliveryDate,bool? Delivered,bool? LoadedOnBoard,DateTime? Updated,string DevanNotes,int? OriginControllerID,int? DestinationControllerID,DateTime? DeliveryTime,string BookingRef,int? ContainerStatusID,byte[] Ts)
	    {
		    ContainerTable item = new ContainerTable();
	        item.MarkOld();
	        item.IsLoaded = true;
		    
			item.ContainerID = ContainerID;
				
			item.ContainerNumber = ContainerNumber;
				
			item.SizeTypeID = SizeTypeID;
				
			item.VoyageID = VoyageID;
				
			item.OriginPortID = OriginPortID;
				
			item.DestinationPortID = DestinationPortID;
				
			item.Cycfs = Cycfs;
				
			item.DevanDate = DevanDate;
				
			item.DevanWarehouseID = DevanWarehouseID;
				
			item.Devanned = Devanned;
				
			item.DeliveryDate = DeliveryDate;
				
			item.Delivered = Delivered;
				
			item.LoadedOnBoard = LoadedOnBoard;
				
			item.Updated = Updated;
				
			item.DevanNotes = DevanNotes;
				
			item.OriginControllerID = OriginControllerID;
				
			item.DestinationControllerID = DestinationControllerID;
				
			item.DeliveryTime = DeliveryTime;
				
			item.BookingRef = BookingRef;
				
			item.ContainerStatusID = ContainerStatusID;
				
			item.Ts = Ts;
				
	        item.Save(UserName);
	    }
    }
}
