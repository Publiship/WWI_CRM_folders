using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DAL.Logistics
{
	/// <summary>
	/// Strongly-typed collection for the B3Job class.
	/// </summary>
    [Serializable]
	public partial class B3JobCollection : ActiveList<B3Job, B3JobCollection>
	{	   
		public B3JobCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>B3JobCollection</returns>
		public B3JobCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                B3Job o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the B3Jobs table.
	/// </summary>
	[Serializable]
	public partial class B3Job : ActiveRecord<B3Job>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public B3Job()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public B3Job(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public B3Job(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public B3Job(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("B3Jobs", TableType.Table, DataService.GetInstance("WWIprov"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "ID";
				colvarId.DataType = DbType.Int32;
				colvarId.MaxLength = 0;
				colvarId.AutoIncrement = true;
				colvarId.IsNullable = false;
				colvarId.IsPrimaryKey = true;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				colvarId.DefaultSetting = @"";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarJobID = new TableSchema.TableColumn(schema);
				colvarJobID.ColumnName = "JobID";
				colvarJobID.DataType = DbType.Int32;
				colvarJobID.MaxLength = 0;
				colvarJobID.AutoIncrement = false;
				colvarJobID.IsNullable = true;
				colvarJobID.IsPrimaryKey = false;
				colvarJobID.IsForeignKey = false;
				colvarJobID.IsReadOnly = false;
				colvarJobID.DefaultSetting = @"";
				colvarJobID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarJobID);
				
				TableSchema.TableColumn colvarJobIDParent = new TableSchema.TableColumn(schema);
				colvarJobIDParent.ColumnName = "JobIDParent";
				colvarJobIDParent.DataType = DbType.Int32;
				colvarJobIDParent.MaxLength = 0;
				colvarJobIDParent.AutoIncrement = false;
				colvarJobIDParent.IsNullable = true;
				colvarJobIDParent.IsPrimaryKey = false;
				colvarJobIDParent.IsForeignKey = false;
				colvarJobIDParent.IsReadOnly = false;
				colvarJobIDParent.DefaultSetting = @"";
				colvarJobIDParent.ForeignKeyTableName = "";
				schema.Columns.Add(colvarJobIDParent);
				
				TableSchema.TableColumn colvarFreightSupplierCode = new TableSchema.TableColumn(schema);
				colvarFreightSupplierCode.ColumnName = "FreightSupplierCode";
				colvarFreightSupplierCode.DataType = DbType.AnsiString;
				colvarFreightSupplierCode.MaxLength = 50;
				colvarFreightSupplierCode.AutoIncrement = false;
				colvarFreightSupplierCode.IsNullable = true;
				colvarFreightSupplierCode.IsPrimaryKey = false;
				colvarFreightSupplierCode.IsForeignKey = false;
				colvarFreightSupplierCode.IsReadOnly = false;
				colvarFreightSupplierCode.DefaultSetting = @"";
				colvarFreightSupplierCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFreightSupplierCode);
				
				TableSchema.TableColumn colvarFreightSupplierName = new TableSchema.TableColumn(schema);
				colvarFreightSupplierName.ColumnName = "FreightSupplierName";
				colvarFreightSupplierName.DataType = DbType.AnsiString;
				colvarFreightSupplierName.MaxLength = 50;
				colvarFreightSupplierName.AutoIncrement = false;
				colvarFreightSupplierName.IsNullable = true;
				colvarFreightSupplierName.IsPrimaryKey = false;
				colvarFreightSupplierName.IsForeignKey = false;
				colvarFreightSupplierName.IsReadOnly = false;
				colvarFreightSupplierName.DefaultSetting = @"";
				colvarFreightSupplierName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFreightSupplierName);
				
				TableSchema.TableColumn colvarProcessLogRecordID = new TableSchema.TableColumn(schema);
				colvarProcessLogRecordID.ColumnName = "ProcessLogRecordID";
				colvarProcessLogRecordID.DataType = DbType.Int32;
				colvarProcessLogRecordID.MaxLength = 0;
				colvarProcessLogRecordID.AutoIncrement = false;
				colvarProcessLogRecordID.IsNullable = true;
				colvarProcessLogRecordID.IsPrimaryKey = false;
				colvarProcessLogRecordID.IsForeignKey = false;
				colvarProcessLogRecordID.IsReadOnly = false;
				colvarProcessLogRecordID.DefaultSetting = @"";
				colvarProcessLogRecordID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarProcessLogRecordID);
				
				TableSchema.TableColumn colvarCancelled = new TableSchema.TableColumn(schema);
				colvarCancelled.ColumnName = "Cancelled";
				colvarCancelled.DataType = DbType.AnsiStringFixedLength;
				colvarCancelled.MaxLength = 1;
				colvarCancelled.AutoIncrement = false;
				colvarCancelled.IsNullable = true;
				colvarCancelled.IsPrimaryKey = false;
				colvarCancelled.IsForeignKey = false;
				colvarCancelled.IsReadOnly = false;
				colvarCancelled.DefaultSetting = @"";
				colvarCancelled.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCancelled);
				
				TableSchema.TableColumn colvarSupplierPurchaseOrderNo = new TableSchema.TableColumn(schema);
				colvarSupplierPurchaseOrderNo.ColumnName = "SupplierPurchaseOrderNo";
				colvarSupplierPurchaseOrderNo.DataType = DbType.AnsiString;
				colvarSupplierPurchaseOrderNo.MaxLength = 10;
				colvarSupplierPurchaseOrderNo.AutoIncrement = false;
				colvarSupplierPurchaseOrderNo.IsNullable = true;
				colvarSupplierPurchaseOrderNo.IsPrimaryKey = false;
				colvarSupplierPurchaseOrderNo.IsForeignKey = false;
				colvarSupplierPurchaseOrderNo.IsReadOnly = false;
				colvarSupplierPurchaseOrderNo.DefaultSetting = @"";
				colvarSupplierPurchaseOrderNo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSupplierPurchaseOrderNo);
				
				TableSchema.TableColumn colvarFreightPurchaseOrderNo = new TableSchema.TableColumn(schema);
				colvarFreightPurchaseOrderNo.ColumnName = "FreightPurchaseOrderNo";
				colvarFreightPurchaseOrderNo.DataType = DbType.AnsiString;
				colvarFreightPurchaseOrderNo.MaxLength = 8;
				colvarFreightPurchaseOrderNo.AutoIncrement = false;
				colvarFreightPurchaseOrderNo.IsNullable = true;
				colvarFreightPurchaseOrderNo.IsPrimaryKey = false;
				colvarFreightPurchaseOrderNo.IsForeignKey = false;
				colvarFreightPurchaseOrderNo.IsReadOnly = false;
				colvarFreightPurchaseOrderNo.DefaultSetting = @"";
				colvarFreightPurchaseOrderNo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFreightPurchaseOrderNo);
				
				TableSchema.TableColumn colvarPickUpLocationID = new TableSchema.TableColumn(schema);
				colvarPickUpLocationID.ColumnName = "PickUpLocationID";
				colvarPickUpLocationID.DataType = DbType.Int32;
				colvarPickUpLocationID.MaxLength = 0;
				colvarPickUpLocationID.AutoIncrement = false;
				colvarPickUpLocationID.IsNullable = true;
				colvarPickUpLocationID.IsPrimaryKey = false;
				colvarPickUpLocationID.IsForeignKey = false;
				colvarPickUpLocationID.IsReadOnly = false;
				colvarPickUpLocationID.DefaultSetting = @"";
				colvarPickUpLocationID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPickUpLocationID);
				
				TableSchema.TableColumn colvarPickUpLocationDesc = new TableSchema.TableColumn(schema);
				colvarPickUpLocationDesc.ColumnName = "PickUpLocationDesc";
				colvarPickUpLocationDesc.DataType = DbType.AnsiString;
				colvarPickUpLocationDesc.MaxLength = 255;
				colvarPickUpLocationDesc.AutoIncrement = false;
				colvarPickUpLocationDesc.IsNullable = true;
				colvarPickUpLocationDesc.IsPrimaryKey = false;
				colvarPickUpLocationDesc.IsForeignKey = false;
				colvarPickUpLocationDesc.IsReadOnly = false;
				colvarPickUpLocationDesc.DefaultSetting = @"";
				colvarPickUpLocationDesc.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPickUpLocationDesc);
				
				TableSchema.TableColumn colvarPickUpCountryISO = new TableSchema.TableColumn(schema);
				colvarPickUpCountryISO.ColumnName = "PickUpCountryISO";
				colvarPickUpCountryISO.DataType = DbType.AnsiString;
				colvarPickUpCountryISO.MaxLength = 3;
				colvarPickUpCountryISO.AutoIncrement = false;
				colvarPickUpCountryISO.IsNullable = true;
				colvarPickUpCountryISO.IsPrimaryKey = false;
				colvarPickUpCountryISO.IsForeignKey = false;
				colvarPickUpCountryISO.IsReadOnly = false;
				colvarPickUpCountryISO.DefaultSetting = @"";
				colvarPickUpCountryISO.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPickUpCountryISO);
				
				TableSchema.TableColumn colvarPortOfEntry = new TableSchema.TableColumn(schema);
				colvarPortOfEntry.ColumnName = "PortOfEntry";
				colvarPortOfEntry.DataType = DbType.AnsiString;
				colvarPortOfEntry.MaxLength = 255;
				colvarPortOfEntry.AutoIncrement = false;
				colvarPortOfEntry.IsNullable = true;
				colvarPortOfEntry.IsPrimaryKey = false;
				colvarPortOfEntry.IsForeignKey = false;
				colvarPortOfEntry.IsReadOnly = false;
				colvarPortOfEntry.DefaultSetting = @"";
				colvarPortOfEntry.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPortOfEntry);
				
				TableSchema.TableColumn colvarActualPortOfEntry = new TableSchema.TableColumn(schema);
				colvarActualPortOfEntry.ColumnName = "ActualPortOfEntry";
				colvarActualPortOfEntry.DataType = DbType.AnsiString;
				colvarActualPortOfEntry.MaxLength = 255;
				colvarActualPortOfEntry.AutoIncrement = false;
				colvarActualPortOfEntry.IsNullable = true;
				colvarActualPortOfEntry.IsPrimaryKey = false;
				colvarActualPortOfEntry.IsForeignKey = false;
				colvarActualPortOfEntry.IsReadOnly = false;
				colvarActualPortOfEntry.DefaultSetting = @"";
				colvarActualPortOfEntry.ForeignKeyTableName = "";
				schema.Columns.Add(colvarActualPortOfEntry);
				
				TableSchema.TableColumn colvarVessel = new TableSchema.TableColumn(schema);
				colvarVessel.ColumnName = "Vessel";
				colvarVessel.DataType = DbType.AnsiString;
				colvarVessel.MaxLength = 255;
				colvarVessel.AutoIncrement = false;
				colvarVessel.IsNullable = true;
				colvarVessel.IsPrimaryKey = false;
				colvarVessel.IsForeignKey = false;
				colvarVessel.IsReadOnly = false;
				colvarVessel.DefaultSetting = @"";
				colvarVessel.ForeignKeyTableName = "";
				schema.Columns.Add(colvarVessel);
				
				TableSchema.TableColumn colvarRAPDate = new TableSchema.TableColumn(schema);
				colvarRAPDate.ColumnName = "RAPDate";
				colvarRAPDate.DataType = DbType.DateTime;
				colvarRAPDate.MaxLength = 0;
				colvarRAPDate.AutoIncrement = false;
				colvarRAPDate.IsNullable = true;
				colvarRAPDate.IsPrimaryKey = false;
				colvarRAPDate.IsForeignKey = false;
				colvarRAPDate.IsReadOnly = false;
				colvarRAPDate.DefaultSetting = @"";
				colvarRAPDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRAPDate);
				
				TableSchema.TableColumn colvarEstimatedDeliveryDate = new TableSchema.TableColumn(schema);
				colvarEstimatedDeliveryDate.ColumnName = "EstimatedDeliveryDate";
				colvarEstimatedDeliveryDate.DataType = DbType.DateTime;
				colvarEstimatedDeliveryDate.MaxLength = 0;
				colvarEstimatedDeliveryDate.AutoIncrement = false;
				colvarEstimatedDeliveryDate.IsNullable = true;
				colvarEstimatedDeliveryDate.IsPrimaryKey = false;
				colvarEstimatedDeliveryDate.IsForeignKey = false;
				colvarEstimatedDeliveryDate.IsReadOnly = false;
				colvarEstimatedDeliveryDate.DefaultSetting = @"";
				colvarEstimatedDeliveryDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEstimatedDeliveryDate);
				
				TableSchema.TableColumn colvarCriticalDate = new TableSchema.TableColumn(schema);
				colvarCriticalDate.ColumnName = "CriticalDate";
				colvarCriticalDate.DataType = DbType.DateTime;
				colvarCriticalDate.MaxLength = 0;
				colvarCriticalDate.AutoIncrement = false;
				colvarCriticalDate.IsNullable = true;
				colvarCriticalDate.IsPrimaryKey = false;
				colvarCriticalDate.IsForeignKey = false;
				colvarCriticalDate.IsReadOnly = false;
				colvarCriticalDate.DefaultSetting = @"";
				colvarCriticalDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCriticalDate);
				
				TableSchema.TableColumn colvarPrinterSupplierID = new TableSchema.TableColumn(schema);
				colvarPrinterSupplierID.ColumnName = "PrinterSupplierID";
				colvarPrinterSupplierID.DataType = DbType.Int32;
				colvarPrinterSupplierID.MaxLength = 0;
				colvarPrinterSupplierID.AutoIncrement = false;
				colvarPrinterSupplierID.IsNullable = true;
				colvarPrinterSupplierID.IsPrimaryKey = false;
				colvarPrinterSupplierID.IsForeignKey = false;
				colvarPrinterSupplierID.IsReadOnly = false;
				colvarPrinterSupplierID.DefaultSetting = @"";
				colvarPrinterSupplierID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPrinterSupplierID);
				
				TableSchema.TableColumn colvarPrinterSupplierName = new TableSchema.TableColumn(schema);
				colvarPrinterSupplierName.ColumnName = "PrinterSupplierName";
				colvarPrinterSupplierName.DataType = DbType.AnsiString;
				colvarPrinterSupplierName.MaxLength = 50;
				colvarPrinterSupplierName.AutoIncrement = false;
				colvarPrinterSupplierName.IsNullable = true;
				colvarPrinterSupplierName.IsPrimaryKey = false;
				colvarPrinterSupplierName.IsForeignKey = false;
				colvarPrinterSupplierName.IsReadOnly = false;
				colvarPrinterSupplierName.DefaultSetting = @"";
				colvarPrinterSupplierName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPrinterSupplierName);
				
				TableSchema.TableColumn colvarControllerID = new TableSchema.TableColumn(schema);
				colvarControllerID.ColumnName = "ControllerID";
				colvarControllerID.DataType = DbType.Int32;
				colvarControllerID.MaxLength = 0;
				colvarControllerID.AutoIncrement = false;
				colvarControllerID.IsNullable = true;
				colvarControllerID.IsPrimaryKey = false;
				colvarControllerID.IsForeignKey = false;
				colvarControllerID.IsReadOnly = false;
				colvarControllerID.DefaultSetting = @"";
				colvarControllerID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarControllerID);
				
				TableSchema.TableColumn colvarControllerName = new TableSchema.TableColumn(schema);
				colvarControllerName.ColumnName = "ControllerName";
				colvarControllerName.DataType = DbType.AnsiString;
				colvarControllerName.MaxLength = 255;
				colvarControllerName.AutoIncrement = false;
				colvarControllerName.IsNullable = true;
				colvarControllerName.IsPrimaryKey = false;
				colvarControllerName.IsForeignKey = false;
				colvarControllerName.IsReadOnly = false;
				colvarControllerName.DefaultSetting = @"";
				colvarControllerName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarControllerName);
				
				TableSchema.TableColumn colvarCustomerID = new TableSchema.TableColumn(schema);
				colvarCustomerID.ColumnName = "CustomerID";
				colvarCustomerID.DataType = DbType.Int32;
				colvarCustomerID.MaxLength = 0;
				colvarCustomerID.AutoIncrement = false;
				colvarCustomerID.IsNullable = true;
				colvarCustomerID.IsPrimaryKey = false;
				colvarCustomerID.IsForeignKey = false;
				colvarCustomerID.IsReadOnly = false;
				colvarCustomerID.DefaultSetting = @"";
				colvarCustomerID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerID);
				
				TableSchema.TableColumn colvarCustomerName = new TableSchema.TableColumn(schema);
				colvarCustomerName.ColumnName = "CustomerName";
				colvarCustomerName.DataType = DbType.AnsiString;
				colvarCustomerName.MaxLength = 255;
				colvarCustomerName.AutoIncrement = false;
				colvarCustomerName.IsNullable = true;
				colvarCustomerName.IsPrimaryKey = false;
				colvarCustomerName.IsForeignKey = false;
				colvarCustomerName.IsReadOnly = false;
				colvarCustomerName.DefaultSetting = @"";
				colvarCustomerName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerName);
				
				TableSchema.TableColumn colvarPrinterDelay = new TableSchema.TableColumn(schema);
				colvarPrinterDelay.ColumnName = "PrinterDelay";
				colvarPrinterDelay.DataType = DbType.Boolean;
				colvarPrinterDelay.MaxLength = 0;
				colvarPrinterDelay.AutoIncrement = false;
				colvarPrinterDelay.IsNullable = true;
				colvarPrinterDelay.IsPrimaryKey = false;
				colvarPrinterDelay.IsForeignKey = false;
				colvarPrinterDelay.IsReadOnly = false;
				colvarPrinterDelay.DefaultSetting = @"";
				colvarPrinterDelay.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPrinterDelay);
				
				TableSchema.TableColumn colvarBooked = new TableSchema.TableColumn(schema);
				colvarBooked.ColumnName = "Booked";
				colvarBooked.DataType = DbType.Boolean;
				colvarBooked.MaxLength = 0;
				colvarBooked.AutoIncrement = false;
				colvarBooked.IsNullable = true;
				colvarBooked.IsPrimaryKey = false;
				colvarBooked.IsForeignKey = false;
				colvarBooked.IsReadOnly = false;
				colvarBooked.DefaultSetting = @"";
				colvarBooked.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBooked);
				
				TableSchema.TableColumn colvarCompleted = new TableSchema.TableColumn(schema);
				colvarCompleted.ColumnName = "Completed";
				colvarCompleted.DataType = DbType.Boolean;
				colvarCompleted.MaxLength = 0;
				colvarCompleted.AutoIncrement = false;
				colvarCompleted.IsNullable = true;
				colvarCompleted.IsPrimaryKey = false;
				colvarCompleted.IsForeignKey = false;
				colvarCompleted.IsReadOnly = false;
				colvarCompleted.DefaultSetting = @"";
				colvarCompleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCompleted);
				
				TableSchema.TableColumn colvarBookingInReference = new TableSchema.TableColumn(schema);
				colvarBookingInReference.ColumnName = "BookingInReference";
				colvarBookingInReference.DataType = DbType.AnsiString;
				colvarBookingInReference.MaxLength = 255;
				colvarBookingInReference.AutoIncrement = false;
				colvarBookingInReference.IsNullable = true;
				colvarBookingInReference.IsPrimaryKey = false;
				colvarBookingInReference.IsForeignKey = false;
				colvarBookingInReference.IsReadOnly = false;
				colvarBookingInReference.DefaultSetting = @"";
				colvarBookingInReference.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBookingInReference);
				
				TableSchema.TableColumn colvarManualDropShip = new TableSchema.TableColumn(schema);
				colvarManualDropShip.ColumnName = "ManualDropShip";
				colvarManualDropShip.DataType = DbType.Boolean;
				colvarManualDropShip.MaxLength = 0;
				colvarManualDropShip.AutoIncrement = false;
				colvarManualDropShip.IsNullable = true;
				colvarManualDropShip.IsPrimaryKey = false;
				colvarManualDropShip.IsForeignKey = false;
				colvarManualDropShip.IsReadOnly = false;
				colvarManualDropShip.DefaultSetting = @"";
				colvarManualDropShip.ForeignKeyTableName = "";
				schema.Columns.Add(colvarManualDropShip);
				
				TableSchema.TableColumn colvarRemarks = new TableSchema.TableColumn(schema);
				colvarRemarks.ColumnName = "Remarks";
				colvarRemarks.DataType = DbType.AnsiString;
				colvarRemarks.MaxLength = 500;
				colvarRemarks.AutoIncrement = false;
				colvarRemarks.IsNullable = true;
				colvarRemarks.IsPrimaryKey = false;
				colvarRemarks.IsForeignKey = false;
				colvarRemarks.IsReadOnly = false;
				colvarRemarks.DefaultSetting = @"";
				colvarRemarks.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRemarks);
				
				TableSchema.TableColumn colvarLoadItemID = new TableSchema.TableColumn(schema);
				colvarLoadItemID.ColumnName = "LoadItemID";
				colvarLoadItemID.DataType = DbType.Int32;
				colvarLoadItemID.MaxLength = 0;
				colvarLoadItemID.AutoIncrement = false;
				colvarLoadItemID.IsNullable = true;
				colvarLoadItemID.IsPrimaryKey = false;
				colvarLoadItemID.IsForeignKey = false;
				colvarLoadItemID.IsReadOnly = false;
				colvarLoadItemID.DefaultSetting = @"";
				colvarLoadItemID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLoadItemID);
				
				TableSchema.TableColumn colvarAllUnitsShipped = new TableSchema.TableColumn(schema);
				colvarAllUnitsShipped.ColumnName = "AllUnitsShipped";
				colvarAllUnitsShipped.DataType = DbType.Boolean;
				colvarAllUnitsShipped.MaxLength = 0;
				colvarAllUnitsShipped.AutoIncrement = false;
				colvarAllUnitsShipped.IsNullable = true;
				colvarAllUnitsShipped.IsPrimaryKey = false;
				colvarAllUnitsShipped.IsForeignKey = false;
				colvarAllUnitsShipped.IsReadOnly = false;
				colvarAllUnitsShipped.DefaultSetting = @"";
				colvarAllUnitsShipped.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAllUnitsShipped);
				
				TableSchema.TableColumn colvarTitle = new TableSchema.TableColumn(schema);
				colvarTitle.ColumnName = "Title";
				colvarTitle.DataType = DbType.AnsiString;
				colvarTitle.MaxLength = 255;
				colvarTitle.AutoIncrement = false;
				colvarTitle.IsNullable = true;
				colvarTitle.IsPrimaryKey = false;
				colvarTitle.IsForeignKey = false;
				colvarTitle.IsReadOnly = false;
				colvarTitle.DefaultSetting = @"";
				colvarTitle.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTitle);
				
				TableSchema.TableColumn colvarIsbn = new TableSchema.TableColumn(schema);
				colvarIsbn.ColumnName = "ISBN";
				colvarIsbn.DataType = DbType.AnsiString;
				colvarIsbn.MaxLength = 13;
				colvarIsbn.AutoIncrement = false;
				colvarIsbn.IsNullable = true;
				colvarIsbn.IsPrimaryKey = false;
				colvarIsbn.IsForeignKey = false;
				colvarIsbn.IsReadOnly = false;
				colvarIsbn.DefaultSetting = @"";
				colvarIsbn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsbn);
				
				TableSchema.TableColumn colvarBookCode = new TableSchema.TableColumn(schema);
				colvarBookCode.ColumnName = "BookCode";
				colvarBookCode.DataType = DbType.AnsiString;
				colvarBookCode.MaxLength = 255;
				colvarBookCode.AutoIncrement = false;
				colvarBookCode.IsNullable = true;
				colvarBookCode.IsPrimaryKey = false;
				colvarBookCode.IsForeignKey = false;
				colvarBookCode.IsReadOnly = false;
				colvarBookCode.DefaultSetting = @"";
				colvarBookCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBookCode);
				
				TableSchema.TableColumn colvarSupplyEdition = new TableSchema.TableColumn(schema);
				colvarSupplyEdition.ColumnName = "SupplyEdition";
				colvarSupplyEdition.DataType = DbType.Int32;
				colvarSupplyEdition.MaxLength = 0;
				colvarSupplyEdition.AutoIncrement = false;
				colvarSupplyEdition.IsNullable = true;
				colvarSupplyEdition.IsPrimaryKey = false;
				colvarSupplyEdition.IsForeignKey = false;
				colvarSupplyEdition.IsReadOnly = false;
				colvarSupplyEdition.DefaultSetting = @"";
				colvarSupplyEdition.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSupplyEdition);
				
				TableSchema.TableColumn colvarRvd = new TableSchema.TableColumn(schema);
				colvarRvd.ColumnName = "RVD";
				colvarRvd.DataType = DbType.Decimal;
				colvarRvd.MaxLength = 0;
				colvarRvd.AutoIncrement = false;
				colvarRvd.IsNullable = true;
				colvarRvd.IsPrimaryKey = false;
				colvarRvd.IsForeignKey = false;
				colvarRvd.IsReadOnly = false;
				colvarRvd.DefaultSetting = @"";
				colvarRvd.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRvd);
				
				TableSchema.TableColumn colvarDealNo = new TableSchema.TableColumn(schema);
				colvarDealNo.ColumnName = "DealNo";
				colvarDealNo.DataType = DbType.Int32;
				colvarDealNo.MaxLength = 0;
				colvarDealNo.AutoIncrement = false;
				colvarDealNo.IsNullable = true;
				colvarDealNo.IsPrimaryKey = false;
				colvarDealNo.IsForeignKey = false;
				colvarDealNo.IsReadOnly = false;
				colvarDealNo.DefaultSetting = @"";
				colvarDealNo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDealNo);
				
				TableSchema.TableColumn colvarCustomerOrderRef = new TableSchema.TableColumn(schema);
				colvarCustomerOrderRef.ColumnName = "CustomerOrderRef";
				colvarCustomerOrderRef.DataType = DbType.AnsiString;
				colvarCustomerOrderRef.MaxLength = 50;
				colvarCustomerOrderRef.AutoIncrement = false;
				colvarCustomerOrderRef.IsNullable = true;
				colvarCustomerOrderRef.IsPrimaryKey = false;
				colvarCustomerOrderRef.IsForeignKey = false;
				colvarCustomerOrderRef.IsReadOnly = false;
				colvarCustomerOrderRef.DefaultSetting = @"";
				colvarCustomerOrderRef.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerOrderRef);
				
				TableSchema.TableColumn colvarCurrency = new TableSchema.TableColumn(schema);
				colvarCurrency.ColumnName = "Currency";
				colvarCurrency.DataType = DbType.AnsiString;
				colvarCurrency.MaxLength = 3;
				colvarCurrency.AutoIncrement = false;
				colvarCurrency.IsNullable = true;
				colvarCurrency.IsPrimaryKey = false;
				colvarCurrency.IsForeignKey = false;
				colvarCurrency.IsReadOnly = false;
				colvarCurrency.DefaultSetting = @"";
				colvarCurrency.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCurrency);
				
				TableSchema.TableColumn colvarProformaValue = new TableSchema.TableColumn(schema);
				colvarProformaValue.ColumnName = "ProformaValue";
				colvarProformaValue.DataType = DbType.Decimal;
				colvarProformaValue.MaxLength = 0;
				colvarProformaValue.AutoIncrement = false;
				colvarProformaValue.IsNullable = true;
				colvarProformaValue.IsPrimaryKey = false;
				colvarProformaValue.IsForeignKey = false;
				colvarProformaValue.IsReadOnly = false;
				colvarProformaValue.DefaultSetting = @"";
				colvarProformaValue.ForeignKeyTableName = "";
				schema.Columns.Add(colvarProformaValue);
				
				TableSchema.TableColumn colvarB3DeliveryID = new TableSchema.TableColumn(schema);
				colvarB3DeliveryID.ColumnName = "B3DeliveryID";
				colvarB3DeliveryID.DataType = DbType.Int32;
				colvarB3DeliveryID.MaxLength = 0;
				colvarB3DeliveryID.AutoIncrement = false;
				colvarB3DeliveryID.IsNullable = true;
				colvarB3DeliveryID.IsPrimaryKey = false;
				colvarB3DeliveryID.IsForeignKey = false;
				colvarB3DeliveryID.IsReadOnly = false;
				colvarB3DeliveryID.DefaultSetting = @"";
				colvarB3DeliveryID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarB3DeliveryID);
				
				TableSchema.TableColumn colvarDeliveryAddressID = new TableSchema.TableColumn(schema);
				colvarDeliveryAddressID.ColumnName = "DeliveryAddressID";
				colvarDeliveryAddressID.DataType = DbType.Int32;
				colvarDeliveryAddressID.MaxLength = 0;
				colvarDeliveryAddressID.AutoIncrement = false;
				colvarDeliveryAddressID.IsNullable = true;
				colvarDeliveryAddressID.IsPrimaryKey = false;
				colvarDeliveryAddressID.IsForeignKey = false;
				colvarDeliveryAddressID.IsReadOnly = false;
				colvarDeliveryAddressID.DefaultSetting = @"";
				colvarDeliveryAddressID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDeliveryAddressID);
				
				TableSchema.TableColumn colvarDeliveryAddressDesc = new TableSchema.TableColumn(schema);
				colvarDeliveryAddressDesc.ColumnName = "DeliveryAddressDesc";
				colvarDeliveryAddressDesc.DataType = DbType.AnsiString;
				colvarDeliveryAddressDesc.MaxLength = 255;
				colvarDeliveryAddressDesc.AutoIncrement = false;
				colvarDeliveryAddressDesc.IsNullable = true;
				colvarDeliveryAddressDesc.IsPrimaryKey = false;
				colvarDeliveryAddressDesc.IsForeignKey = false;
				colvarDeliveryAddressDesc.IsReadOnly = false;
				colvarDeliveryAddressDesc.DefaultSetting = @"";
				colvarDeliveryAddressDesc.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDeliveryAddressDesc);
				
				TableSchema.TableColumn colvarQuantity = new TableSchema.TableColumn(schema);
				colvarQuantity.ColumnName = "Quantity";
				colvarQuantity.DataType = DbType.Int32;
				colvarQuantity.MaxLength = 0;
				colvarQuantity.AutoIncrement = false;
				colvarQuantity.IsNullable = true;
				colvarQuantity.IsPrimaryKey = false;
				colvarQuantity.IsForeignKey = false;
				colvarQuantity.IsReadOnly = false;
				colvarQuantity.DefaultSetting = @"";
				colvarQuantity.ForeignKeyTableName = "";
				schema.Columns.Add(colvarQuantity);
				
				TableSchema.TableColumn colvarDestinationLocationID = new TableSchema.TableColumn(schema);
				colvarDestinationLocationID.ColumnName = "DestinationLocationID";
				colvarDestinationLocationID.DataType = DbType.Int32;
				colvarDestinationLocationID.MaxLength = 0;
				colvarDestinationLocationID.AutoIncrement = false;
				colvarDestinationLocationID.IsNullable = true;
				colvarDestinationLocationID.IsPrimaryKey = false;
				colvarDestinationLocationID.IsForeignKey = false;
				colvarDestinationLocationID.IsReadOnly = false;
				colvarDestinationLocationID.DefaultSetting = @"";
				colvarDestinationLocationID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDestinationLocationID);
				
				TableSchema.TableColumn colvarDestinationLocationDesc = new TableSchema.TableColumn(schema);
				colvarDestinationLocationDesc.ColumnName = "DestinationLocationDesc";
				colvarDestinationLocationDesc.DataType = DbType.AnsiString;
				colvarDestinationLocationDesc.MaxLength = 255;
				colvarDestinationLocationDesc.AutoIncrement = false;
				colvarDestinationLocationDesc.IsNullable = true;
				colvarDestinationLocationDesc.IsPrimaryKey = false;
				colvarDestinationLocationDesc.IsForeignKey = false;
				colvarDestinationLocationDesc.IsReadOnly = false;
				colvarDestinationLocationDesc.DefaultSetting = @"";
				colvarDestinationLocationDesc.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDestinationLocationDesc);
				
				TableSchema.TableColumn colvarDestinationCountryISO = new TableSchema.TableColumn(schema);
				colvarDestinationCountryISO.ColumnName = "DestinationCountryISO";
				colvarDestinationCountryISO.DataType = DbType.AnsiString;
				colvarDestinationCountryISO.MaxLength = 3;
				colvarDestinationCountryISO.AutoIncrement = false;
				colvarDestinationCountryISO.IsNullable = true;
				colvarDestinationCountryISO.IsPrimaryKey = false;
				colvarDestinationCountryISO.IsForeignKey = false;
				colvarDestinationCountryISO.IsReadOnly = false;
				colvarDestinationCountryISO.DefaultSetting = @"";
				colvarDestinationCountryISO.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDestinationCountryISO);
				
				TableSchema.TableColumn colvarIncoterm = new TableSchema.TableColumn(schema);
				colvarIncoterm.ColumnName = "Incoterm";
				colvarIncoterm.DataType = DbType.AnsiString;
				colvarIncoterm.MaxLength = 50;
				colvarIncoterm.AutoIncrement = false;
				colvarIncoterm.IsNullable = true;
				colvarIncoterm.IsPrimaryKey = false;
				colvarIncoterm.IsForeignKey = false;
				colvarIncoterm.IsReadOnly = false;
				colvarIncoterm.DefaultSetting = @"";
				colvarIncoterm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIncoterm);
				
				TableSchema.TableColumn colvarTransportMode = new TableSchema.TableColumn(schema);
				colvarTransportMode.ColumnName = "TransportMode";
				colvarTransportMode.DataType = DbType.AnsiString;
				colvarTransportMode.MaxLength = 50;
				colvarTransportMode.AutoIncrement = false;
				colvarTransportMode.IsNullable = true;
				colvarTransportMode.IsPrimaryKey = false;
				colvarTransportMode.IsForeignKey = false;
				colvarTransportMode.IsReadOnly = false;
				colvarTransportMode.DefaultSetting = @"";
				colvarTransportMode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTransportMode);
				
				TableSchema.TableColumn colvarCartonLength = new TableSchema.TableColumn(schema);
				colvarCartonLength.ColumnName = "CartonLength";
				colvarCartonLength.DataType = DbType.Int32;
				colvarCartonLength.MaxLength = 0;
				colvarCartonLength.AutoIncrement = false;
				colvarCartonLength.IsNullable = true;
				colvarCartonLength.IsPrimaryKey = false;
				colvarCartonLength.IsForeignKey = false;
				colvarCartonLength.IsReadOnly = false;
				colvarCartonLength.DefaultSetting = @"";
				colvarCartonLength.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCartonLength);
				
				TableSchema.TableColumn colvarCartonWidth = new TableSchema.TableColumn(schema);
				colvarCartonWidth.ColumnName = "CartonWidth";
				colvarCartonWidth.DataType = DbType.Int32;
				colvarCartonWidth.MaxLength = 0;
				colvarCartonWidth.AutoIncrement = false;
				colvarCartonWidth.IsNullable = true;
				colvarCartonWidth.IsPrimaryKey = false;
				colvarCartonWidth.IsForeignKey = false;
				colvarCartonWidth.IsReadOnly = false;
				colvarCartonWidth.DefaultSetting = @"";
				colvarCartonWidth.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCartonWidth);
				
				TableSchema.TableColumn colvarCartonHeight = new TableSchema.TableColumn(schema);
				colvarCartonHeight.ColumnName = "CartonHeight";
				colvarCartonHeight.DataType = DbType.Int32;
				colvarCartonHeight.MaxLength = 0;
				colvarCartonHeight.AutoIncrement = false;
				colvarCartonHeight.IsNullable = true;
				colvarCartonHeight.IsPrimaryKey = false;
				colvarCartonHeight.IsForeignKey = false;
				colvarCartonHeight.IsReadOnly = false;
				colvarCartonHeight.DefaultSetting = @"";
				colvarCartonHeight.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCartonHeight);
				
				TableSchema.TableColumn colvarCartonWeight = new TableSchema.TableColumn(schema);
				colvarCartonWeight.ColumnName = "CartonWeight";
				colvarCartonWeight.DataType = DbType.Int32;
				colvarCartonWeight.MaxLength = 0;
				colvarCartonWeight.AutoIncrement = false;
				colvarCartonWeight.IsNullable = true;
				colvarCartonWeight.IsPrimaryKey = false;
				colvarCartonWeight.IsForeignKey = false;
				colvarCartonWeight.IsReadOnly = false;
				colvarCartonWeight.DefaultSetting = @"";
				colvarCartonWeight.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCartonWeight);
				
				TableSchema.TableColumn colvarUnitsPerCarton = new TableSchema.TableColumn(schema);
				colvarUnitsPerCarton.ColumnName = "UnitsPerCarton";
				colvarUnitsPerCarton.DataType = DbType.Int32;
				colvarUnitsPerCarton.MaxLength = 0;
				colvarUnitsPerCarton.AutoIncrement = false;
				colvarUnitsPerCarton.IsNullable = true;
				colvarUnitsPerCarton.IsPrimaryKey = false;
				colvarUnitsPerCarton.IsForeignKey = false;
				colvarUnitsPerCarton.IsReadOnly = false;
				colvarUnitsPerCarton.DefaultSetting = @"";
				colvarUnitsPerCarton.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUnitsPerCarton);
				
				TableSchema.TableColumn colvarNetCartonWeight = new TableSchema.TableColumn(schema);
				colvarNetCartonWeight.ColumnName = "NetCartonWeight";
				colvarNetCartonWeight.DataType = DbType.Int32;
				colvarNetCartonWeight.MaxLength = 0;
				colvarNetCartonWeight.AutoIncrement = false;
				colvarNetCartonWeight.IsNullable = true;
				colvarNetCartonWeight.IsPrimaryKey = false;
				colvarNetCartonWeight.IsForeignKey = false;
				colvarNetCartonWeight.IsReadOnly = false;
				colvarNetCartonWeight.DefaultSetting = @"";
				colvarNetCartonWeight.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNetCartonWeight);
				
				TableSchema.TableColumn colvarOrderedQuantity = new TableSchema.TableColumn(schema);
				colvarOrderedQuantity.ColumnName = "OrderedQuantity";
				colvarOrderedQuantity.DataType = DbType.Int32;
				colvarOrderedQuantity.MaxLength = 0;
				colvarOrderedQuantity.AutoIncrement = false;
				colvarOrderedQuantity.IsNullable = true;
				colvarOrderedQuantity.IsPrimaryKey = false;
				colvarOrderedQuantity.IsForeignKey = false;
				colvarOrderedQuantity.IsReadOnly = false;
				colvarOrderedQuantity.DefaultSetting = @"";
				colvarOrderedQuantity.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOrderedQuantity);
				
				TableSchema.TableColumn colvarTotalCartons = new TableSchema.TableColumn(schema);
				colvarTotalCartons.ColumnName = "TotalCartons";
				colvarTotalCartons.DataType = DbType.Int32;
				colvarTotalCartons.MaxLength = 0;
				colvarTotalCartons.AutoIncrement = false;
				colvarTotalCartons.IsNullable = true;
				colvarTotalCartons.IsPrimaryKey = false;
				colvarTotalCartons.IsForeignKey = false;
				colvarTotalCartons.IsReadOnly = false;
				colvarTotalCartons.DefaultSetting = @"";
				colvarTotalCartons.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTotalCartons);
				
				TableSchema.TableColumn colvarPalletType = new TableSchema.TableColumn(schema);
				colvarPalletType.ColumnName = "PalletType";
				colvarPalletType.DataType = DbType.Int32;
				colvarPalletType.MaxLength = 0;
				colvarPalletType.AutoIncrement = false;
				colvarPalletType.IsNullable = true;
				colvarPalletType.IsPrimaryKey = false;
				colvarPalletType.IsForeignKey = false;
				colvarPalletType.IsReadOnly = false;
				colvarPalletType.DefaultSetting = @"";
				colvarPalletType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPalletType);
				
				TableSchema.TableColumn colvarNumPallets = new TableSchema.TableColumn(schema);
				colvarNumPallets.ColumnName = "NumPallets";
				colvarNumPallets.DataType = DbType.Int32;
				colvarNumPallets.MaxLength = 0;
				colvarNumPallets.AutoIncrement = false;
				colvarNumPallets.IsNullable = true;
				colvarNumPallets.IsPrimaryKey = false;
				colvarNumPallets.IsForeignKey = false;
				colvarNumPallets.IsReadOnly = false;
				colvarNumPallets.DefaultSetting = @"";
				colvarNumPallets.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNumPallets);
				
				TableSchema.TableColumn colvarNumFullPalletLabels = new TableSchema.TableColumn(schema);
				colvarNumFullPalletLabels.ColumnName = "NumFullPalletLabels";
				colvarNumFullPalletLabels.DataType = DbType.Int32;
				colvarNumFullPalletLabels.MaxLength = 0;
				colvarNumFullPalletLabels.AutoIncrement = false;
				colvarNumFullPalletLabels.IsNullable = true;
				colvarNumFullPalletLabels.IsPrimaryKey = false;
				colvarNumFullPalletLabels.IsForeignKey = false;
				colvarNumFullPalletLabels.IsReadOnly = false;
				colvarNumFullPalletLabels.DefaultSetting = @"";
				colvarNumFullPalletLabels.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNumFullPalletLabels);
				
				TableSchema.TableColumn colvarNumPartPalletLabels = new TableSchema.TableColumn(schema);
				colvarNumPartPalletLabels.ColumnName = "NumPartPalletLabels";
				colvarNumPartPalletLabels.DataType = DbType.Int32;
				colvarNumPartPalletLabels.MaxLength = 0;
				colvarNumPartPalletLabels.AutoIncrement = false;
				colvarNumPartPalletLabels.IsNullable = true;
				colvarNumPartPalletLabels.IsPrimaryKey = false;
				colvarNumPartPalletLabels.IsForeignKey = false;
				colvarNumPartPalletLabels.IsReadOnly = false;
				colvarNumPartPalletLabels.DefaultSetting = @"";
				colvarNumPartPalletLabels.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNumPartPalletLabels);
				
				TableSchema.TableColumn colvarCartonPerFullPalletLayer = new TableSchema.TableColumn(schema);
				colvarCartonPerFullPalletLayer.ColumnName = "CartonPerFullPalletLayer";
				colvarCartonPerFullPalletLayer.DataType = DbType.Int32;
				colvarCartonPerFullPalletLayer.MaxLength = 0;
				colvarCartonPerFullPalletLayer.AutoIncrement = false;
				colvarCartonPerFullPalletLayer.IsNullable = true;
				colvarCartonPerFullPalletLayer.IsPrimaryKey = false;
				colvarCartonPerFullPalletLayer.IsForeignKey = false;
				colvarCartonPerFullPalletLayer.IsReadOnly = false;
				colvarCartonPerFullPalletLayer.DefaultSetting = @"";
				colvarCartonPerFullPalletLayer.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCartonPerFullPalletLayer);
				
				TableSchema.TableColumn colvarLayersPerFullPallet = new TableSchema.TableColumn(schema);
				colvarLayersPerFullPallet.ColumnName = "LayersPerFullPallet";
				colvarLayersPerFullPallet.DataType = DbType.Int32;
				colvarLayersPerFullPallet.MaxLength = 0;
				colvarLayersPerFullPallet.AutoIncrement = false;
				colvarLayersPerFullPallet.IsNullable = true;
				colvarLayersPerFullPallet.IsPrimaryKey = false;
				colvarLayersPerFullPallet.IsForeignKey = false;
				colvarLayersPerFullPallet.IsReadOnly = false;
				colvarLayersPerFullPallet.DefaultSetting = @"";
				colvarLayersPerFullPallet.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLayersPerFullPallet);
				
				TableSchema.TableColumn colvarRemainderCartons = new TableSchema.TableColumn(schema);
				colvarRemainderCartons.ColumnName = "RemainderCartons";
				colvarRemainderCartons.DataType = DbType.Int32;
				colvarRemainderCartons.MaxLength = 0;
				colvarRemainderCartons.AutoIncrement = false;
				colvarRemainderCartons.IsNullable = true;
				colvarRemainderCartons.IsPrimaryKey = false;
				colvarRemainderCartons.IsForeignKey = false;
				colvarRemainderCartons.IsReadOnly = false;
				colvarRemainderCartons.DefaultSetting = @"";
				colvarRemainderCartons.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRemainderCartons);
				
				TableSchema.TableColumn colvarCartonPerFullPallet = new TableSchema.TableColumn(schema);
				colvarCartonPerFullPallet.ColumnName = "CartonPerFullPallet";
				colvarCartonPerFullPallet.DataType = DbType.Int32;
				colvarCartonPerFullPallet.MaxLength = 0;
				colvarCartonPerFullPallet.AutoIncrement = false;
				colvarCartonPerFullPallet.IsNullable = true;
				colvarCartonPerFullPallet.IsPrimaryKey = false;
				colvarCartonPerFullPallet.IsForeignKey = false;
				colvarCartonPerFullPallet.IsReadOnly = false;
				colvarCartonPerFullPallet.DefaultSetting = @"";
				colvarCartonPerFullPallet.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCartonPerFullPallet);
				
				TableSchema.TableColumn colvarShipmentID = new TableSchema.TableColumn(schema);
				colvarShipmentID.ColumnName = "ShipmentID";
				colvarShipmentID.DataType = DbType.Int32;
				colvarShipmentID.MaxLength = 0;
				colvarShipmentID.AutoIncrement = false;
				colvarShipmentID.IsNullable = true;
				colvarShipmentID.IsPrimaryKey = false;
				colvarShipmentID.IsForeignKey = false;
				colvarShipmentID.IsReadOnly = false;
				colvarShipmentID.DefaultSetting = @"";
				colvarShipmentID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarShipmentID);
				
				TableSchema.TableColumn colvarContainer = new TableSchema.TableColumn(schema);
				colvarContainer.ColumnName = "Container";
				colvarContainer.DataType = DbType.AnsiString;
				colvarContainer.MaxLength = 255;
				colvarContainer.AutoIncrement = false;
				colvarContainer.IsNullable = true;
				colvarContainer.IsPrimaryKey = false;
				colvarContainer.IsForeignKey = false;
				colvarContainer.IsReadOnly = false;
				colvarContainer.DefaultSetting = @"";
				colvarContainer.ForeignKeyTableName = "";
				schema.Columns.Add(colvarContainer);
				
				TableSchema.TableColumn colvarShippedQuantity = new TableSchema.TableColumn(schema);
				colvarShippedQuantity.ColumnName = "ShippedQuantity";
				colvarShippedQuantity.DataType = DbType.Int32;
				colvarShippedQuantity.MaxLength = 0;
				colvarShippedQuantity.AutoIncrement = false;
				colvarShippedQuantity.IsNullable = true;
				colvarShippedQuantity.IsPrimaryKey = false;
				colvarShippedQuantity.IsForeignKey = false;
				colvarShippedQuantity.IsReadOnly = false;
				colvarShippedQuantity.DefaultSetting = @"";
				colvarShippedQuantity.ForeignKeyTableName = "";
				schema.Columns.Add(colvarShippedQuantity);
				
				TableSchema.TableColumn colvarLoadWeight = new TableSchema.TableColumn(schema);
				colvarLoadWeight.ColumnName = "LoadWeight";
				colvarLoadWeight.DataType = DbType.AnsiString;
				colvarLoadWeight.MaxLength = 50;
				colvarLoadWeight.AutoIncrement = false;
				colvarLoadWeight.IsNullable = true;
				colvarLoadWeight.IsPrimaryKey = false;
				colvarLoadWeight.IsForeignKey = false;
				colvarLoadWeight.IsReadOnly = false;
				colvarLoadWeight.DefaultSetting = @"";
				colvarLoadWeight.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLoadWeight);
				
				TableSchema.TableColumn colvarLoadVolume = new TableSchema.TableColumn(schema);
				colvarLoadVolume.ColumnName = "LoadVolume";
				colvarLoadVolume.DataType = DbType.AnsiString;
				colvarLoadVolume.MaxLength = 50;
				colvarLoadVolume.AutoIncrement = false;
				colvarLoadVolume.IsNullable = true;
				colvarLoadVolume.IsPrimaryKey = false;
				colvarLoadVolume.IsForeignKey = false;
				colvarLoadVolume.IsReadOnly = false;
				colvarLoadVolume.DefaultSetting = @"";
				colvarLoadVolume.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLoadVolume);
				
				TableSchema.TableColumn colvarComment = new TableSchema.TableColumn(schema);
				colvarComment.ColumnName = "Comment";
				colvarComment.DataType = DbType.AnsiString;
				colvarComment.MaxLength = 500;
				colvarComment.AutoIncrement = false;
				colvarComment.IsNullable = true;
				colvarComment.IsPrimaryKey = false;
				colvarComment.IsForeignKey = false;
				colvarComment.IsReadOnly = false;
				colvarComment.DefaultSetting = @"";
				colvarComment.ForeignKeyTableName = "";
				schema.Columns.Add(colvarComment);
				
				TableSchema.TableColumn colvarEntered = new TableSchema.TableColumn(schema);
				colvarEntered.ColumnName = "Entered";
				colvarEntered.DataType = DbType.DateTime;
				colvarEntered.MaxLength = 0;
				colvarEntered.AutoIncrement = false;
				colvarEntered.IsNullable = true;
				colvarEntered.IsPrimaryKey = false;
				colvarEntered.IsForeignKey = false;
				colvarEntered.IsReadOnly = false;
				colvarEntered.DefaultSetting = @"";
				colvarEntered.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEntered);
				
				TableSchema.TableColumn colvarExWorks = new TableSchema.TableColumn(schema);
				colvarExWorks.ColumnName = "ExWorks";
				colvarExWorks.DataType = DbType.DateTime;
				colvarExWorks.MaxLength = 0;
				colvarExWorks.AutoIncrement = false;
				colvarExWorks.IsNullable = true;
				colvarExWorks.IsPrimaryKey = false;
				colvarExWorks.IsForeignKey = false;
				colvarExWorks.IsReadOnly = false;
				colvarExWorks.DefaultSetting = @"";
				colvarExWorks.ForeignKeyTableName = "";
				schema.Columns.Add(colvarExWorks);
				
				TableSchema.TableColumn colvarOriginal = new TableSchema.TableColumn(schema);
				colvarOriginal.ColumnName = "Original";
				colvarOriginal.DataType = DbType.DateTime;
				colvarOriginal.MaxLength = 0;
				colvarOriginal.AutoIncrement = false;
				colvarOriginal.IsNullable = true;
				colvarOriginal.IsPrimaryKey = false;
				colvarOriginal.IsForeignKey = false;
				colvarOriginal.IsReadOnly = false;
				colvarOriginal.DefaultSetting = @"";
				colvarOriginal.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOriginal);
				
				TableSchema.TableColumn colvarExWorksOriginal = new TableSchema.TableColumn(schema);
				colvarExWorksOriginal.ColumnName = "ExWorksOriginal";
				colvarExWorksOriginal.DataType = DbType.DateTime;
				colvarExWorksOriginal.MaxLength = 0;
				colvarExWorksOriginal.AutoIncrement = false;
				colvarExWorksOriginal.IsNullable = true;
				colvarExWorksOriginal.IsPrimaryKey = false;
				colvarExWorksOriginal.IsForeignKey = false;
				colvarExWorksOriginal.IsReadOnly = false;
				colvarExWorksOriginal.DefaultSetting = @"";
				colvarExWorksOriginal.ForeignKeyTableName = "";
				schema.Columns.Add(colvarExWorksOriginal);
				
				TableSchema.TableColumn colvarExWorksEstimated = new TableSchema.TableColumn(schema);
				colvarExWorksEstimated.ColumnName = "ExWorksEstimated";
				colvarExWorksEstimated.DataType = DbType.DateTime;
				colvarExWorksEstimated.MaxLength = 0;
				colvarExWorksEstimated.AutoIncrement = false;
				colvarExWorksEstimated.IsNullable = true;
				colvarExWorksEstimated.IsPrimaryKey = false;
				colvarExWorksEstimated.IsForeignKey = false;
				colvarExWorksEstimated.IsReadOnly = false;
				colvarExWorksEstimated.DefaultSetting = @"";
				colvarExWorksEstimated.ForeignKeyTableName = "";
				schema.Columns.Add(colvarExWorksEstimated);
				
				TableSchema.TableColumn colvarExWorksActual = new TableSchema.TableColumn(schema);
				colvarExWorksActual.ColumnName = "ExWorksActual";
				colvarExWorksActual.DataType = DbType.DateTime;
				colvarExWorksActual.MaxLength = 0;
				colvarExWorksActual.AutoIncrement = false;
				colvarExWorksActual.IsNullable = true;
				colvarExWorksActual.IsPrimaryKey = false;
				colvarExWorksActual.IsForeignKey = false;
				colvarExWorksActual.IsReadOnly = false;
				colvarExWorksActual.DefaultSetting = @"";
				colvarExWorksActual.ForeignKeyTableName = "";
				schema.Columns.Add(colvarExWorksActual);
				
				TableSchema.TableColumn colvarDepartedOriginal = new TableSchema.TableColumn(schema);
				colvarDepartedOriginal.ColumnName = "DepartedOriginal";
				colvarDepartedOriginal.DataType = DbType.DateTime;
				colvarDepartedOriginal.MaxLength = 0;
				colvarDepartedOriginal.AutoIncrement = false;
				colvarDepartedOriginal.IsNullable = true;
				colvarDepartedOriginal.IsPrimaryKey = false;
				colvarDepartedOriginal.IsForeignKey = false;
				colvarDepartedOriginal.IsReadOnly = false;
				colvarDepartedOriginal.DefaultSetting = @"";
				colvarDepartedOriginal.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDepartedOriginal);
				
				TableSchema.TableColumn colvarDepartedEstimated = new TableSchema.TableColumn(schema);
				colvarDepartedEstimated.ColumnName = "DepartedEstimated";
				colvarDepartedEstimated.DataType = DbType.DateTime;
				colvarDepartedEstimated.MaxLength = 0;
				colvarDepartedEstimated.AutoIncrement = false;
				colvarDepartedEstimated.IsNullable = true;
				colvarDepartedEstimated.IsPrimaryKey = false;
				colvarDepartedEstimated.IsForeignKey = false;
				colvarDepartedEstimated.IsReadOnly = false;
				colvarDepartedEstimated.DefaultSetting = @"";
				colvarDepartedEstimated.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDepartedEstimated);
				
				TableSchema.TableColumn colvarDepartedActual = new TableSchema.TableColumn(schema);
				colvarDepartedActual.ColumnName = "DepartedActual";
				colvarDepartedActual.DataType = DbType.DateTime;
				colvarDepartedActual.MaxLength = 0;
				colvarDepartedActual.AutoIncrement = false;
				colvarDepartedActual.IsNullable = true;
				colvarDepartedActual.IsPrimaryKey = false;
				colvarDepartedActual.IsForeignKey = false;
				colvarDepartedActual.IsReadOnly = false;
				colvarDepartedActual.DefaultSetting = @"";
				colvarDepartedActual.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDepartedActual);
				
				TableSchema.TableColumn colvarArrivedPortOriginal = new TableSchema.TableColumn(schema);
				colvarArrivedPortOriginal.ColumnName = "ArrivedPortOriginal";
				colvarArrivedPortOriginal.DataType = DbType.DateTime;
				colvarArrivedPortOriginal.MaxLength = 0;
				colvarArrivedPortOriginal.AutoIncrement = false;
				colvarArrivedPortOriginal.IsNullable = true;
				colvarArrivedPortOriginal.IsPrimaryKey = false;
				colvarArrivedPortOriginal.IsForeignKey = false;
				colvarArrivedPortOriginal.IsReadOnly = false;
				colvarArrivedPortOriginal.DefaultSetting = @"";
				colvarArrivedPortOriginal.ForeignKeyTableName = "";
				schema.Columns.Add(colvarArrivedPortOriginal);
				
				TableSchema.TableColumn colvarArrivedPortEstimated = new TableSchema.TableColumn(schema);
				colvarArrivedPortEstimated.ColumnName = "ArrivedPortEstimated";
				colvarArrivedPortEstimated.DataType = DbType.DateTime;
				colvarArrivedPortEstimated.MaxLength = 0;
				colvarArrivedPortEstimated.AutoIncrement = false;
				colvarArrivedPortEstimated.IsNullable = true;
				colvarArrivedPortEstimated.IsPrimaryKey = false;
				colvarArrivedPortEstimated.IsForeignKey = false;
				colvarArrivedPortEstimated.IsReadOnly = false;
				colvarArrivedPortEstimated.DefaultSetting = @"";
				colvarArrivedPortEstimated.ForeignKeyTableName = "";
				schema.Columns.Add(colvarArrivedPortEstimated);
				
				TableSchema.TableColumn colvarArrivedPortActual = new TableSchema.TableColumn(schema);
				colvarArrivedPortActual.ColumnName = "ArrivedPortActual";
				colvarArrivedPortActual.DataType = DbType.DateTime;
				colvarArrivedPortActual.MaxLength = 0;
				colvarArrivedPortActual.AutoIncrement = false;
				colvarArrivedPortActual.IsNullable = true;
				colvarArrivedPortActual.IsPrimaryKey = false;
				colvarArrivedPortActual.IsForeignKey = false;
				colvarArrivedPortActual.IsReadOnly = false;
				colvarArrivedPortActual.DefaultSetting = @"";
				colvarArrivedPortActual.ForeignKeyTableName = "";
				schema.Columns.Add(colvarArrivedPortActual);
				
				TableSchema.TableColumn colvarDeliveredOriginal = new TableSchema.TableColumn(schema);
				colvarDeliveredOriginal.ColumnName = "DeliveredOriginal";
				colvarDeliveredOriginal.DataType = DbType.DateTime;
				colvarDeliveredOriginal.MaxLength = 0;
				colvarDeliveredOriginal.AutoIncrement = false;
				colvarDeliveredOriginal.IsNullable = true;
				colvarDeliveredOriginal.IsPrimaryKey = false;
				colvarDeliveredOriginal.IsForeignKey = false;
				colvarDeliveredOriginal.IsReadOnly = false;
				colvarDeliveredOriginal.DefaultSetting = @"";
				colvarDeliveredOriginal.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDeliveredOriginal);
				
				TableSchema.TableColumn colvarDeliveredEstimated = new TableSchema.TableColumn(schema);
				colvarDeliveredEstimated.ColumnName = "DeliveredEstimated";
				colvarDeliveredEstimated.DataType = DbType.DateTime;
				colvarDeliveredEstimated.MaxLength = 0;
				colvarDeliveredEstimated.AutoIncrement = false;
				colvarDeliveredEstimated.IsNullable = true;
				colvarDeliveredEstimated.IsPrimaryKey = false;
				colvarDeliveredEstimated.IsForeignKey = false;
				colvarDeliveredEstimated.IsReadOnly = false;
				colvarDeliveredEstimated.DefaultSetting = @"";
				colvarDeliveredEstimated.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDeliveredEstimated);
				
				TableSchema.TableColumn colvarDeliveredActual = new TableSchema.TableColumn(schema);
				colvarDeliveredActual.ColumnName = "DeliveredActual";
				colvarDeliveredActual.DataType = DbType.DateTime;
				colvarDeliveredActual.MaxLength = 0;
				colvarDeliveredActual.AutoIncrement = false;
				colvarDeliveredActual.IsNullable = true;
				colvarDeliveredActual.IsPrimaryKey = false;
				colvarDeliveredActual.IsForeignKey = false;
				colvarDeliveredActual.IsReadOnly = false;
				colvarDeliveredActual.DefaultSetting = @"";
				colvarDeliveredActual.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDeliveredActual);
				
				TableSchema.TableColumn colvarInvoicedOriginal = new TableSchema.TableColumn(schema);
				colvarInvoicedOriginal.ColumnName = "InvoicedOriginal";
				colvarInvoicedOriginal.DataType = DbType.DateTime;
				colvarInvoicedOriginal.MaxLength = 0;
				colvarInvoicedOriginal.AutoIncrement = false;
				colvarInvoicedOriginal.IsNullable = true;
				colvarInvoicedOriginal.IsPrimaryKey = false;
				colvarInvoicedOriginal.IsForeignKey = false;
				colvarInvoicedOriginal.IsReadOnly = false;
				colvarInvoicedOriginal.DefaultSetting = @"";
				colvarInvoicedOriginal.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInvoicedOriginal);
				
				TableSchema.TableColumn colvarInvoicedEstimated = new TableSchema.TableColumn(schema);
				colvarInvoicedEstimated.ColumnName = "InvoicedEstimated";
				colvarInvoicedEstimated.DataType = DbType.DateTime;
				colvarInvoicedEstimated.MaxLength = 0;
				colvarInvoicedEstimated.AutoIncrement = false;
				colvarInvoicedEstimated.IsNullable = true;
				colvarInvoicedEstimated.IsPrimaryKey = false;
				colvarInvoicedEstimated.IsForeignKey = false;
				colvarInvoicedEstimated.IsReadOnly = false;
				colvarInvoicedEstimated.DefaultSetting = @"";
				colvarInvoicedEstimated.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInvoicedEstimated);
				
				TableSchema.TableColumn colvarInvoicedActual = new TableSchema.TableColumn(schema);
				colvarInvoicedActual.ColumnName = "InvoicedActual";
				colvarInvoicedActual.DataType = DbType.DateTime;
				colvarInvoicedActual.MaxLength = 0;
				colvarInvoicedActual.AutoIncrement = false;
				colvarInvoicedActual.IsNullable = true;
				colvarInvoicedActual.IsPrimaryKey = false;
				colvarInvoicedActual.IsForeignKey = false;
				colvarInvoicedActual.IsReadOnly = false;
				colvarInvoicedActual.DefaultSetting = @"";
				colvarInvoicedActual.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInvoicedActual);
				
				TableSchema.TableColumn colvarCompletedOriginal = new TableSchema.TableColumn(schema);
				colvarCompletedOriginal.ColumnName = "CompletedOriginal";
				colvarCompletedOriginal.DataType = DbType.DateTime;
				colvarCompletedOriginal.MaxLength = 0;
				colvarCompletedOriginal.AutoIncrement = false;
				colvarCompletedOriginal.IsNullable = true;
				colvarCompletedOriginal.IsPrimaryKey = false;
				colvarCompletedOriginal.IsForeignKey = false;
				colvarCompletedOriginal.IsReadOnly = false;
				colvarCompletedOriginal.DefaultSetting = @"";
				colvarCompletedOriginal.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCompletedOriginal);
				
				TableSchema.TableColumn colvarCompletedEstimated = new TableSchema.TableColumn(schema);
				colvarCompletedEstimated.ColumnName = "CompletedEstimated";
				colvarCompletedEstimated.DataType = DbType.DateTime;
				colvarCompletedEstimated.MaxLength = 0;
				colvarCompletedEstimated.AutoIncrement = false;
				colvarCompletedEstimated.IsNullable = true;
				colvarCompletedEstimated.IsPrimaryKey = false;
				colvarCompletedEstimated.IsForeignKey = false;
				colvarCompletedEstimated.IsReadOnly = false;
				colvarCompletedEstimated.DefaultSetting = @"";
				colvarCompletedEstimated.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCompletedEstimated);
				
				TableSchema.TableColumn colvarCompletedActual = new TableSchema.TableColumn(schema);
				colvarCompletedActual.ColumnName = "CompletedActual";
				colvarCompletedActual.DataType = DbType.DateTime;
				colvarCompletedActual.MaxLength = 0;
				colvarCompletedActual.AutoIncrement = false;
				colvarCompletedActual.IsNullable = true;
				colvarCompletedActual.IsPrimaryKey = false;
				colvarCompletedActual.IsForeignKey = false;
				colvarCompletedActual.IsReadOnly = false;
				colvarCompletedActual.DefaultSetting = @"";
				colvarCompletedActual.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCompletedActual);
				
				TableSchema.TableColumn colvarComment1 = new TableSchema.TableColumn(schema);
				colvarComment1.ColumnName = "Comment1";
				colvarComment1.DataType = DbType.AnsiString;
				colvarComment1.MaxLength = 500;
				colvarComment1.AutoIncrement = false;
				colvarComment1.IsNullable = true;
				colvarComment1.IsPrimaryKey = false;
				colvarComment1.IsForeignKey = false;
				colvarComment1.IsReadOnly = false;
				colvarComment1.DefaultSetting = @"";
				colvarComment1.ForeignKeyTableName = "";
				schema.Columns.Add(colvarComment1);
				
				TableSchema.TableColumn colvarComment2 = new TableSchema.TableColumn(schema);
				colvarComment2.ColumnName = "Comment2";
				colvarComment2.DataType = DbType.AnsiString;
				colvarComment2.MaxLength = 500;
				colvarComment2.AutoIncrement = false;
				colvarComment2.IsNullable = true;
				colvarComment2.IsPrimaryKey = false;
				colvarComment2.IsForeignKey = false;
				colvarComment2.IsReadOnly = false;
				colvarComment2.DefaultSetting = @"";
				colvarComment2.ForeignKeyTableName = "";
				schema.Columns.Add(colvarComment2);
				
				TableSchema.TableColumn colvarComment3 = new TableSchema.TableColumn(schema);
				colvarComment3.ColumnName = "Comment3";
				colvarComment3.DataType = DbType.AnsiString;
				colvarComment3.MaxLength = 500;
				colvarComment3.AutoIncrement = false;
				colvarComment3.IsNullable = true;
				colvarComment3.IsPrimaryKey = false;
				colvarComment3.IsForeignKey = false;
				colvarComment3.IsReadOnly = false;
				colvarComment3.DefaultSetting = @"";
				colvarComment3.ForeignKeyTableName = "";
				schema.Columns.Add(colvarComment3);
				
				TableSchema.TableColumn colvarComment4 = new TableSchema.TableColumn(schema);
				colvarComment4.ColumnName = "Comment4";
				colvarComment4.DataType = DbType.AnsiString;
				colvarComment4.MaxLength = 500;
				colvarComment4.AutoIncrement = false;
				colvarComment4.IsNullable = true;
				colvarComment4.IsPrimaryKey = false;
				colvarComment4.IsForeignKey = false;
				colvarComment4.IsReadOnly = false;
				colvarComment4.DefaultSetting = @"";
				colvarComment4.ForeignKeyTableName = "";
				schema.Columns.Add(colvarComment4);
				
				TableSchema.TableColumn colvarComment5 = new TableSchema.TableColumn(schema);
				colvarComment5.ColumnName = "Comment5";
				colvarComment5.DataType = DbType.AnsiString;
				colvarComment5.MaxLength = 500;
				colvarComment5.AutoIncrement = false;
				colvarComment5.IsNullable = true;
				colvarComment5.IsPrimaryKey = false;
				colvarComment5.IsForeignKey = false;
				colvarComment5.IsReadOnly = false;
				colvarComment5.DefaultSetting = @"";
				colvarComment5.ForeignKeyTableName = "";
				schema.Columns.Add(colvarComment5);
				
				TableSchema.TableColumn colvarDealNumber = new TableSchema.TableColumn(schema);
				colvarDealNumber.ColumnName = "DealNumber";
				colvarDealNumber.DataType = DbType.AnsiString;
				colvarDealNumber.MaxLength = 50;
				colvarDealNumber.AutoIncrement = false;
				colvarDealNumber.IsNullable = true;
				colvarDealNumber.IsPrimaryKey = false;
				colvarDealNumber.IsForeignKey = false;
				colvarDealNumber.IsReadOnly = false;
				colvarDealNumber.DefaultSetting = @"";
				colvarDealNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDealNumber);
				
				TableSchema.TableColumn colvarSuccessIndicator = new TableSchema.TableColumn(schema);
				colvarSuccessIndicator.ColumnName = "SuccessIndicator";
				colvarSuccessIndicator.DataType = DbType.AnsiString;
				colvarSuccessIndicator.MaxLength = 50;
				colvarSuccessIndicator.AutoIncrement = false;
				colvarSuccessIndicator.IsNullable = true;
				colvarSuccessIndicator.IsPrimaryKey = false;
				colvarSuccessIndicator.IsForeignKey = false;
				colvarSuccessIndicator.IsReadOnly = false;
				colvarSuccessIndicator.DefaultSetting = @"";
				colvarSuccessIndicator.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSuccessIndicator);
				
				TableSchema.TableColumn colvarMessage = new TableSchema.TableColumn(schema);
				colvarMessage.ColumnName = "Message";
				colvarMessage.DataType = DbType.AnsiString;
				colvarMessage.MaxLength = 50;
				colvarMessage.AutoIncrement = false;
				colvarMessage.IsNullable = true;
				colvarMessage.IsPrimaryKey = false;
				colvarMessage.IsForeignKey = false;
				colvarMessage.IsReadOnly = false;
				colvarMessage.DefaultSetting = @"";
				colvarMessage.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMessage);
				
				TableSchema.TableColumn colvarErrorMsg = new TableSchema.TableColumn(schema);
				colvarErrorMsg.ColumnName = "ErrorMsg";
				colvarErrorMsg.DataType = DbType.AnsiString;
				colvarErrorMsg.MaxLength = 50;
				colvarErrorMsg.AutoIncrement = false;
				colvarErrorMsg.IsNullable = true;
				colvarErrorMsg.IsPrimaryKey = false;
				colvarErrorMsg.IsForeignKey = false;
				colvarErrorMsg.IsReadOnly = false;
				colvarErrorMsg.DefaultSetting = @"";
				colvarErrorMsg.ForeignKeyTableName = "";
				schema.Columns.Add(colvarErrorMsg);
				
				TableSchema.TableColumn colvarDateTimeOfCancellation = new TableSchema.TableColumn(schema);
				colvarDateTimeOfCancellation.ColumnName = "DateTimeOfCancellation";
				colvarDateTimeOfCancellation.DataType = DbType.DateTime;
				colvarDateTimeOfCancellation.MaxLength = 0;
				colvarDateTimeOfCancellation.AutoIncrement = false;
				colvarDateTimeOfCancellation.IsNullable = true;
				colvarDateTimeOfCancellation.IsPrimaryKey = false;
				colvarDateTimeOfCancellation.IsForeignKey = false;
				colvarDateTimeOfCancellation.IsReadOnly = false;
				colvarDateTimeOfCancellation.DefaultSetting = @"";
				colvarDateTimeOfCancellation.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDateTimeOfCancellation);
				
				TableSchema.TableColumn colvarCancelConfirm = new TableSchema.TableColumn(schema);
				colvarCancelConfirm.ColumnName = "CancelConfirm";
				colvarCancelConfirm.DataType = DbType.AnsiString;
				colvarCancelConfirm.MaxLength = 50;
				colvarCancelConfirm.AutoIncrement = false;
				colvarCancelConfirm.IsNullable = true;
				colvarCancelConfirm.IsPrimaryKey = false;
				colvarCancelConfirm.IsForeignKey = false;
				colvarCancelConfirm.IsReadOnly = false;
				colvarCancelConfirm.DefaultSetting = @"";
				colvarCancelConfirm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCancelConfirm);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["WWIprov"].AddSchema("B3Jobs",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public int Id 
		{
			get { return GetColumnValue<int>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("JobID")]
		[Bindable(true)]
		public int? JobID 
		{
			get { return GetColumnValue<int?>(Columns.JobID); }
			set { SetColumnValue(Columns.JobID, value); }
		}
		  
		[XmlAttribute("JobIDParent")]
		[Bindable(true)]
		public int? JobIDParent 
		{
			get { return GetColumnValue<int?>(Columns.JobIDParent); }
			set { SetColumnValue(Columns.JobIDParent, value); }
		}
		  
		[XmlAttribute("FreightSupplierCode")]
		[Bindable(true)]
		public string FreightSupplierCode 
		{
			get { return GetColumnValue<string>(Columns.FreightSupplierCode); }
			set { SetColumnValue(Columns.FreightSupplierCode, value); }
		}
		  
		[XmlAttribute("FreightSupplierName")]
		[Bindable(true)]
		public string FreightSupplierName 
		{
			get { return GetColumnValue<string>(Columns.FreightSupplierName); }
			set { SetColumnValue(Columns.FreightSupplierName, value); }
		}
		  
		[XmlAttribute("ProcessLogRecordID")]
		[Bindable(true)]
		public int? ProcessLogRecordID 
		{
			get { return GetColumnValue<int?>(Columns.ProcessLogRecordID); }
			set { SetColumnValue(Columns.ProcessLogRecordID, value); }
		}
		  
		[XmlAttribute("Cancelled")]
		[Bindable(true)]
		public string Cancelled 
		{
			get { return GetColumnValue<string>(Columns.Cancelled); }
			set { SetColumnValue(Columns.Cancelled, value); }
		}
		  
		[XmlAttribute("SupplierPurchaseOrderNo")]
		[Bindable(true)]
		public string SupplierPurchaseOrderNo 
		{
			get { return GetColumnValue<string>(Columns.SupplierPurchaseOrderNo); }
			set { SetColumnValue(Columns.SupplierPurchaseOrderNo, value); }
		}
		  
		[XmlAttribute("FreightPurchaseOrderNo")]
		[Bindable(true)]
		public string FreightPurchaseOrderNo 
		{
			get { return GetColumnValue<string>(Columns.FreightPurchaseOrderNo); }
			set { SetColumnValue(Columns.FreightPurchaseOrderNo, value); }
		}
		  
		[XmlAttribute("PickUpLocationID")]
		[Bindable(true)]
		public int? PickUpLocationID 
		{
			get { return GetColumnValue<int?>(Columns.PickUpLocationID); }
			set { SetColumnValue(Columns.PickUpLocationID, value); }
		}
		  
		[XmlAttribute("PickUpLocationDesc")]
		[Bindable(true)]
		public string PickUpLocationDesc 
		{
			get { return GetColumnValue<string>(Columns.PickUpLocationDesc); }
			set { SetColumnValue(Columns.PickUpLocationDesc, value); }
		}
		  
		[XmlAttribute("PickUpCountryISO")]
		[Bindable(true)]
		public string PickUpCountryISO 
		{
			get { return GetColumnValue<string>(Columns.PickUpCountryISO); }
			set { SetColumnValue(Columns.PickUpCountryISO, value); }
		}
		  
		[XmlAttribute("PortOfEntry")]
		[Bindable(true)]
		public string PortOfEntry 
		{
			get { return GetColumnValue<string>(Columns.PortOfEntry); }
			set { SetColumnValue(Columns.PortOfEntry, value); }
		}
		  
		[XmlAttribute("ActualPortOfEntry")]
		[Bindable(true)]
		public string ActualPortOfEntry 
		{
			get { return GetColumnValue<string>(Columns.ActualPortOfEntry); }
			set { SetColumnValue(Columns.ActualPortOfEntry, value); }
		}
		  
		[XmlAttribute("Vessel")]
		[Bindable(true)]
		public string Vessel 
		{
			get { return GetColumnValue<string>(Columns.Vessel); }
			set { SetColumnValue(Columns.Vessel, value); }
		}
		  
		[XmlAttribute("RAPDate")]
		[Bindable(true)]
		public DateTime? RAPDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.RAPDate); }
			set { SetColumnValue(Columns.RAPDate, value); }
		}
		  
		[XmlAttribute("EstimatedDeliveryDate")]
		[Bindable(true)]
		public DateTime? EstimatedDeliveryDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.EstimatedDeliveryDate); }
			set { SetColumnValue(Columns.EstimatedDeliveryDate, value); }
		}
		  
		[XmlAttribute("CriticalDate")]
		[Bindable(true)]
		public DateTime? CriticalDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.CriticalDate); }
			set { SetColumnValue(Columns.CriticalDate, value); }
		}
		  
		[XmlAttribute("PrinterSupplierID")]
		[Bindable(true)]
		public int? PrinterSupplierID 
		{
			get { return GetColumnValue<int?>(Columns.PrinterSupplierID); }
			set { SetColumnValue(Columns.PrinterSupplierID, value); }
		}
		  
		[XmlAttribute("PrinterSupplierName")]
		[Bindable(true)]
		public string PrinterSupplierName 
		{
			get { return GetColumnValue<string>(Columns.PrinterSupplierName); }
			set { SetColumnValue(Columns.PrinterSupplierName, value); }
		}
		  
		[XmlAttribute("ControllerID")]
		[Bindable(true)]
		public int? ControllerID 
		{
			get { return GetColumnValue<int?>(Columns.ControllerID); }
			set { SetColumnValue(Columns.ControllerID, value); }
		}
		  
		[XmlAttribute("ControllerName")]
		[Bindable(true)]
		public string ControllerName 
		{
			get { return GetColumnValue<string>(Columns.ControllerName); }
			set { SetColumnValue(Columns.ControllerName, value); }
		}
		  
		[XmlAttribute("CustomerID")]
		[Bindable(true)]
		public int? CustomerID 
		{
			get { return GetColumnValue<int?>(Columns.CustomerID); }
			set { SetColumnValue(Columns.CustomerID, value); }
		}
		  
		[XmlAttribute("CustomerName")]
		[Bindable(true)]
		public string CustomerName 
		{
			get { return GetColumnValue<string>(Columns.CustomerName); }
			set { SetColumnValue(Columns.CustomerName, value); }
		}
		  
		[XmlAttribute("PrinterDelay")]
		[Bindable(true)]
		public bool? PrinterDelay 
		{
			get { return GetColumnValue<bool?>(Columns.PrinterDelay); }
			set { SetColumnValue(Columns.PrinterDelay, value); }
		}
		  
		[XmlAttribute("Booked")]
		[Bindable(true)]
		public bool? Booked 
		{
			get { return GetColumnValue<bool?>(Columns.Booked); }
			set { SetColumnValue(Columns.Booked, value); }
		}
		  
		[XmlAttribute("Completed")]
		[Bindable(true)]
		public bool? Completed 
		{
			get { return GetColumnValue<bool?>(Columns.Completed); }
			set { SetColumnValue(Columns.Completed, value); }
		}
		  
		[XmlAttribute("BookingInReference")]
		[Bindable(true)]
		public string BookingInReference 
		{
			get { return GetColumnValue<string>(Columns.BookingInReference); }
			set { SetColumnValue(Columns.BookingInReference, value); }
		}
		  
		[XmlAttribute("ManualDropShip")]
		[Bindable(true)]
		public bool? ManualDropShip 
		{
			get { return GetColumnValue<bool?>(Columns.ManualDropShip); }
			set { SetColumnValue(Columns.ManualDropShip, value); }
		}
		  
		[XmlAttribute("Remarks")]
		[Bindable(true)]
		public string Remarks 
		{
			get { return GetColumnValue<string>(Columns.Remarks); }
			set { SetColumnValue(Columns.Remarks, value); }
		}
		  
		[XmlAttribute("LoadItemID")]
		[Bindable(true)]
		public int? LoadItemID 
		{
			get { return GetColumnValue<int?>(Columns.LoadItemID); }
			set { SetColumnValue(Columns.LoadItemID, value); }
		}
		  
		[XmlAttribute("AllUnitsShipped")]
		[Bindable(true)]
		public bool? AllUnitsShipped 
		{
			get { return GetColumnValue<bool?>(Columns.AllUnitsShipped); }
			set { SetColumnValue(Columns.AllUnitsShipped, value); }
		}
		  
		[XmlAttribute("Title")]
		[Bindable(true)]
		public string Title 
		{
			get { return GetColumnValue<string>(Columns.Title); }
			set { SetColumnValue(Columns.Title, value); }
		}
		  
		[XmlAttribute("Isbn")]
		[Bindable(true)]
		public string Isbn 
		{
			get { return GetColumnValue<string>(Columns.Isbn); }
			set { SetColumnValue(Columns.Isbn, value); }
		}
		  
		[XmlAttribute("BookCode")]
		[Bindable(true)]
		public string BookCode 
		{
			get { return GetColumnValue<string>(Columns.BookCode); }
			set { SetColumnValue(Columns.BookCode, value); }
		}
		  
		[XmlAttribute("SupplyEdition")]
		[Bindable(true)]
		public int? SupplyEdition 
		{
			get { return GetColumnValue<int?>(Columns.SupplyEdition); }
			set { SetColumnValue(Columns.SupplyEdition, value); }
		}
		  
		[XmlAttribute("Rvd")]
		[Bindable(true)]
		public decimal? Rvd 
		{
			get { return GetColumnValue<decimal?>(Columns.Rvd); }
			set { SetColumnValue(Columns.Rvd, value); }
		}
		  
		[XmlAttribute("DealNo")]
		[Bindable(true)]
		public int? DealNo 
		{
			get { return GetColumnValue<int?>(Columns.DealNo); }
			set { SetColumnValue(Columns.DealNo, value); }
		}
		  
		[XmlAttribute("CustomerOrderRef")]
		[Bindable(true)]
		public string CustomerOrderRef 
		{
			get { return GetColumnValue<string>(Columns.CustomerOrderRef); }
			set { SetColumnValue(Columns.CustomerOrderRef, value); }
		}
		  
		[XmlAttribute("Currency")]
		[Bindable(true)]
		public string Currency 
		{
			get { return GetColumnValue<string>(Columns.Currency); }
			set { SetColumnValue(Columns.Currency, value); }
		}
		  
		[XmlAttribute("ProformaValue")]
		[Bindable(true)]
		public decimal? ProformaValue 
		{
			get { return GetColumnValue<decimal?>(Columns.ProformaValue); }
			set { SetColumnValue(Columns.ProformaValue, value); }
		}
		  
		[XmlAttribute("B3DeliveryID")]
		[Bindable(true)]
		public int? B3DeliveryID 
		{
			get { return GetColumnValue<int?>(Columns.B3DeliveryID); }
			set { SetColumnValue(Columns.B3DeliveryID, value); }
		}
		  
		[XmlAttribute("DeliveryAddressID")]
		[Bindable(true)]
		public int? DeliveryAddressID 
		{
			get { return GetColumnValue<int?>(Columns.DeliveryAddressID); }
			set { SetColumnValue(Columns.DeliveryAddressID, value); }
		}
		  
		[XmlAttribute("DeliveryAddressDesc")]
		[Bindable(true)]
		public string DeliveryAddressDesc 
		{
			get { return GetColumnValue<string>(Columns.DeliveryAddressDesc); }
			set { SetColumnValue(Columns.DeliveryAddressDesc, value); }
		}
		  
		[XmlAttribute("Quantity")]
		[Bindable(true)]
		public int? Quantity 
		{
			get { return GetColumnValue<int?>(Columns.Quantity); }
			set { SetColumnValue(Columns.Quantity, value); }
		}
		  
		[XmlAttribute("DestinationLocationID")]
		[Bindable(true)]
		public int? DestinationLocationID 
		{
			get { return GetColumnValue<int?>(Columns.DestinationLocationID); }
			set { SetColumnValue(Columns.DestinationLocationID, value); }
		}
		  
		[XmlAttribute("DestinationLocationDesc")]
		[Bindable(true)]
		public string DestinationLocationDesc 
		{
			get { return GetColumnValue<string>(Columns.DestinationLocationDesc); }
			set { SetColumnValue(Columns.DestinationLocationDesc, value); }
		}
		  
		[XmlAttribute("DestinationCountryISO")]
		[Bindable(true)]
		public string DestinationCountryISO 
		{
			get { return GetColumnValue<string>(Columns.DestinationCountryISO); }
			set { SetColumnValue(Columns.DestinationCountryISO, value); }
		}
		  
		[XmlAttribute("Incoterm")]
		[Bindable(true)]
		public string Incoterm 
		{
			get { return GetColumnValue<string>(Columns.Incoterm); }
			set { SetColumnValue(Columns.Incoterm, value); }
		}
		  
		[XmlAttribute("TransportMode")]
		[Bindable(true)]
		public string TransportMode 
		{
			get { return GetColumnValue<string>(Columns.TransportMode); }
			set { SetColumnValue(Columns.TransportMode, value); }
		}
		  
		[XmlAttribute("CartonLength")]
		[Bindable(true)]
		public int? CartonLength 
		{
			get { return GetColumnValue<int?>(Columns.CartonLength); }
			set { SetColumnValue(Columns.CartonLength, value); }
		}
		  
		[XmlAttribute("CartonWidth")]
		[Bindable(true)]
		public int? CartonWidth 
		{
			get { return GetColumnValue<int?>(Columns.CartonWidth); }
			set { SetColumnValue(Columns.CartonWidth, value); }
		}
		  
		[XmlAttribute("CartonHeight")]
		[Bindable(true)]
		public int? CartonHeight 
		{
			get { return GetColumnValue<int?>(Columns.CartonHeight); }
			set { SetColumnValue(Columns.CartonHeight, value); }
		}
		  
		[XmlAttribute("CartonWeight")]
		[Bindable(true)]
		public int? CartonWeight 
		{
			get { return GetColumnValue<int?>(Columns.CartonWeight); }
			set { SetColumnValue(Columns.CartonWeight, value); }
		}
		  
		[XmlAttribute("UnitsPerCarton")]
		[Bindable(true)]
		public int? UnitsPerCarton 
		{
			get { return GetColumnValue<int?>(Columns.UnitsPerCarton); }
			set { SetColumnValue(Columns.UnitsPerCarton, value); }
		}
		  
		[XmlAttribute("NetCartonWeight")]
		[Bindable(true)]
		public int? NetCartonWeight 
		{
			get { return GetColumnValue<int?>(Columns.NetCartonWeight); }
			set { SetColumnValue(Columns.NetCartonWeight, value); }
		}
		  
		[XmlAttribute("OrderedQuantity")]
		[Bindable(true)]
		public int? OrderedQuantity 
		{
			get { return GetColumnValue<int?>(Columns.OrderedQuantity); }
			set { SetColumnValue(Columns.OrderedQuantity, value); }
		}
		  
		[XmlAttribute("TotalCartons")]
		[Bindable(true)]
		public int? TotalCartons 
		{
			get { return GetColumnValue<int?>(Columns.TotalCartons); }
			set { SetColumnValue(Columns.TotalCartons, value); }
		}
		  
		[XmlAttribute("PalletType")]
		[Bindable(true)]
		public int? PalletType 
		{
			get { return GetColumnValue<int?>(Columns.PalletType); }
			set { SetColumnValue(Columns.PalletType, value); }
		}
		  
		[XmlAttribute("NumPallets")]
		[Bindable(true)]
		public int? NumPallets 
		{
			get { return GetColumnValue<int?>(Columns.NumPallets); }
			set { SetColumnValue(Columns.NumPallets, value); }
		}
		  
		[XmlAttribute("NumFullPalletLabels")]
		[Bindable(true)]
		public int? NumFullPalletLabels 
		{
			get { return GetColumnValue<int?>(Columns.NumFullPalletLabels); }
			set { SetColumnValue(Columns.NumFullPalletLabels, value); }
		}
		  
		[XmlAttribute("NumPartPalletLabels")]
		[Bindable(true)]
		public int? NumPartPalletLabels 
		{
			get { return GetColumnValue<int?>(Columns.NumPartPalletLabels); }
			set { SetColumnValue(Columns.NumPartPalletLabels, value); }
		}
		  
		[XmlAttribute("CartonPerFullPalletLayer")]
		[Bindable(true)]
		public int? CartonPerFullPalletLayer 
		{
			get { return GetColumnValue<int?>(Columns.CartonPerFullPalletLayer); }
			set { SetColumnValue(Columns.CartonPerFullPalletLayer, value); }
		}
		  
		[XmlAttribute("LayersPerFullPallet")]
		[Bindable(true)]
		public int? LayersPerFullPallet 
		{
			get { return GetColumnValue<int?>(Columns.LayersPerFullPallet); }
			set { SetColumnValue(Columns.LayersPerFullPallet, value); }
		}
		  
		[XmlAttribute("RemainderCartons")]
		[Bindable(true)]
		public int? RemainderCartons 
		{
			get { return GetColumnValue<int?>(Columns.RemainderCartons); }
			set { SetColumnValue(Columns.RemainderCartons, value); }
		}
		  
		[XmlAttribute("CartonPerFullPallet")]
		[Bindable(true)]
		public int? CartonPerFullPallet 
		{
			get { return GetColumnValue<int?>(Columns.CartonPerFullPallet); }
			set { SetColumnValue(Columns.CartonPerFullPallet, value); }
		}
		  
		[XmlAttribute("ShipmentID")]
		[Bindable(true)]
		public int? ShipmentID 
		{
			get { return GetColumnValue<int?>(Columns.ShipmentID); }
			set { SetColumnValue(Columns.ShipmentID, value); }
		}
		  
		[XmlAttribute("Container")]
		[Bindable(true)]
		public string Container 
		{
			get { return GetColumnValue<string>(Columns.Container); }
			set { SetColumnValue(Columns.Container, value); }
		}
		  
		[XmlAttribute("ShippedQuantity")]
		[Bindable(true)]
		public int? ShippedQuantity 
		{
			get { return GetColumnValue<int?>(Columns.ShippedQuantity); }
			set { SetColumnValue(Columns.ShippedQuantity, value); }
		}
		  
		[XmlAttribute("LoadWeight")]
		[Bindable(true)]
		public string LoadWeight 
		{
			get { return GetColumnValue<string>(Columns.LoadWeight); }
			set { SetColumnValue(Columns.LoadWeight, value); }
		}
		  
		[XmlAttribute("LoadVolume")]
		[Bindable(true)]
		public string LoadVolume 
		{
			get { return GetColumnValue<string>(Columns.LoadVolume); }
			set { SetColumnValue(Columns.LoadVolume, value); }
		}
		  
		[XmlAttribute("Comment")]
		[Bindable(true)]
		public string Comment 
		{
			get { return GetColumnValue<string>(Columns.Comment); }
			set { SetColumnValue(Columns.Comment, value); }
		}
		  
		[XmlAttribute("Entered")]
		[Bindable(true)]
		public DateTime? Entered 
		{
			get { return GetColumnValue<DateTime?>(Columns.Entered); }
			set { SetColumnValue(Columns.Entered, value); }
		}
		  
		[XmlAttribute("ExWorks")]
		[Bindable(true)]
		public DateTime? ExWorks 
		{
			get { return GetColumnValue<DateTime?>(Columns.ExWorks); }
			set { SetColumnValue(Columns.ExWorks, value); }
		}
		  
		[XmlAttribute("Original")]
		[Bindable(true)]
		public DateTime? Original 
		{
			get { return GetColumnValue<DateTime?>(Columns.Original); }
			set { SetColumnValue(Columns.Original, value); }
		}
		  
		[XmlAttribute("ExWorksOriginal")]
		[Bindable(true)]
		public DateTime? ExWorksOriginal 
		{
			get { return GetColumnValue<DateTime?>(Columns.ExWorksOriginal); }
			set { SetColumnValue(Columns.ExWorksOriginal, value); }
		}
		  
		[XmlAttribute("ExWorksEstimated")]
		[Bindable(true)]
		public DateTime? ExWorksEstimated 
		{
			get { return GetColumnValue<DateTime?>(Columns.ExWorksEstimated); }
			set { SetColumnValue(Columns.ExWorksEstimated, value); }
		}
		  
		[XmlAttribute("ExWorksActual")]
		[Bindable(true)]
		public DateTime? ExWorksActual 
		{
			get { return GetColumnValue<DateTime?>(Columns.ExWorksActual); }
			set { SetColumnValue(Columns.ExWorksActual, value); }
		}
		  
		[XmlAttribute("DepartedOriginal")]
		[Bindable(true)]
		public DateTime? DepartedOriginal 
		{
			get { return GetColumnValue<DateTime?>(Columns.DepartedOriginal); }
			set { SetColumnValue(Columns.DepartedOriginal, value); }
		}
		  
		[XmlAttribute("DepartedEstimated")]
		[Bindable(true)]
		public DateTime? DepartedEstimated 
		{
			get { return GetColumnValue<DateTime?>(Columns.DepartedEstimated); }
			set { SetColumnValue(Columns.DepartedEstimated, value); }
		}
		  
		[XmlAttribute("DepartedActual")]
		[Bindable(true)]
		public DateTime? DepartedActual 
		{
			get { return GetColumnValue<DateTime?>(Columns.DepartedActual); }
			set { SetColumnValue(Columns.DepartedActual, value); }
		}
		  
		[XmlAttribute("ArrivedPortOriginal")]
		[Bindable(true)]
		public DateTime? ArrivedPortOriginal 
		{
			get { return GetColumnValue<DateTime?>(Columns.ArrivedPortOriginal); }
			set { SetColumnValue(Columns.ArrivedPortOriginal, value); }
		}
		  
		[XmlAttribute("ArrivedPortEstimated")]
		[Bindable(true)]
		public DateTime? ArrivedPortEstimated 
		{
			get { return GetColumnValue<DateTime?>(Columns.ArrivedPortEstimated); }
			set { SetColumnValue(Columns.ArrivedPortEstimated, value); }
		}
		  
		[XmlAttribute("ArrivedPortActual")]
		[Bindable(true)]
		public DateTime? ArrivedPortActual 
		{
			get { return GetColumnValue<DateTime?>(Columns.ArrivedPortActual); }
			set { SetColumnValue(Columns.ArrivedPortActual, value); }
		}
		  
		[XmlAttribute("DeliveredOriginal")]
		[Bindable(true)]
		public DateTime? DeliveredOriginal 
		{
			get { return GetColumnValue<DateTime?>(Columns.DeliveredOriginal); }
			set { SetColumnValue(Columns.DeliveredOriginal, value); }
		}
		  
		[XmlAttribute("DeliveredEstimated")]
		[Bindable(true)]
		public DateTime? DeliveredEstimated 
		{
			get { return GetColumnValue<DateTime?>(Columns.DeliveredEstimated); }
			set { SetColumnValue(Columns.DeliveredEstimated, value); }
		}
		  
		[XmlAttribute("DeliveredActual")]
		[Bindable(true)]
		public DateTime? DeliveredActual 
		{
			get { return GetColumnValue<DateTime?>(Columns.DeliveredActual); }
			set { SetColumnValue(Columns.DeliveredActual, value); }
		}
		  
		[XmlAttribute("InvoicedOriginal")]
		[Bindable(true)]
		public DateTime? InvoicedOriginal 
		{
			get { return GetColumnValue<DateTime?>(Columns.InvoicedOriginal); }
			set { SetColumnValue(Columns.InvoicedOriginal, value); }
		}
		  
		[XmlAttribute("InvoicedEstimated")]
		[Bindable(true)]
		public DateTime? InvoicedEstimated 
		{
			get { return GetColumnValue<DateTime?>(Columns.InvoicedEstimated); }
			set { SetColumnValue(Columns.InvoicedEstimated, value); }
		}
		  
		[XmlAttribute("InvoicedActual")]
		[Bindable(true)]
		public DateTime? InvoicedActual 
		{
			get { return GetColumnValue<DateTime?>(Columns.InvoicedActual); }
			set { SetColumnValue(Columns.InvoicedActual, value); }
		}
		  
		[XmlAttribute("CompletedOriginal")]
		[Bindable(true)]
		public DateTime? CompletedOriginal 
		{
			get { return GetColumnValue<DateTime?>(Columns.CompletedOriginal); }
			set { SetColumnValue(Columns.CompletedOriginal, value); }
		}
		  
		[XmlAttribute("CompletedEstimated")]
		[Bindable(true)]
		public DateTime? CompletedEstimated 
		{
			get { return GetColumnValue<DateTime?>(Columns.CompletedEstimated); }
			set { SetColumnValue(Columns.CompletedEstimated, value); }
		}
		  
		[XmlAttribute("CompletedActual")]
		[Bindable(true)]
		public DateTime? CompletedActual 
		{
			get { return GetColumnValue<DateTime?>(Columns.CompletedActual); }
			set { SetColumnValue(Columns.CompletedActual, value); }
		}
		  
		[XmlAttribute("Comment1")]
		[Bindable(true)]
		public string Comment1 
		{
			get { return GetColumnValue<string>(Columns.Comment1); }
			set { SetColumnValue(Columns.Comment1, value); }
		}
		  
		[XmlAttribute("Comment2")]
		[Bindable(true)]
		public string Comment2 
		{
			get { return GetColumnValue<string>(Columns.Comment2); }
			set { SetColumnValue(Columns.Comment2, value); }
		}
		  
		[XmlAttribute("Comment3")]
		[Bindable(true)]
		public string Comment3 
		{
			get { return GetColumnValue<string>(Columns.Comment3); }
			set { SetColumnValue(Columns.Comment3, value); }
		}
		  
		[XmlAttribute("Comment4")]
		[Bindable(true)]
		public string Comment4 
		{
			get { return GetColumnValue<string>(Columns.Comment4); }
			set { SetColumnValue(Columns.Comment4, value); }
		}
		  
		[XmlAttribute("Comment5")]
		[Bindable(true)]
		public string Comment5 
		{
			get { return GetColumnValue<string>(Columns.Comment5); }
			set { SetColumnValue(Columns.Comment5, value); }
		}
		  
		[XmlAttribute("DealNumber")]
		[Bindable(true)]
		public string DealNumber 
		{
			get { return GetColumnValue<string>(Columns.DealNumber); }
			set { SetColumnValue(Columns.DealNumber, value); }
		}
		  
		[XmlAttribute("SuccessIndicator")]
		[Bindable(true)]
		public string SuccessIndicator 
		{
			get { return GetColumnValue<string>(Columns.SuccessIndicator); }
			set { SetColumnValue(Columns.SuccessIndicator, value); }
		}
		  
		[XmlAttribute("Message")]
		[Bindable(true)]
		public string Message 
		{
			get { return GetColumnValue<string>(Columns.Message); }
			set { SetColumnValue(Columns.Message, value); }
		}
		  
		[XmlAttribute("ErrorMsg")]
		[Bindable(true)]
		public string ErrorMsg 
		{
			get { return GetColumnValue<string>(Columns.ErrorMsg); }
			set { SetColumnValue(Columns.ErrorMsg, value); }
		}
		  
		[XmlAttribute("DateTimeOfCancellation")]
		[Bindable(true)]
		public DateTime? DateTimeOfCancellation 
		{
			get { return GetColumnValue<DateTime?>(Columns.DateTimeOfCancellation); }
			set { SetColumnValue(Columns.DateTimeOfCancellation, value); }
		}
		  
		[XmlAttribute("CancelConfirm")]
		[Bindable(true)]
		public string CancelConfirm 
		{
			get { return GetColumnValue<string>(Columns.CancelConfirm); }
			set { SetColumnValue(Columns.CancelConfirm, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int? varJobID,int? varJobIDParent,string varFreightSupplierCode,string varFreightSupplierName,int? varProcessLogRecordID,string varCancelled,string varSupplierPurchaseOrderNo,string varFreightPurchaseOrderNo,int? varPickUpLocationID,string varPickUpLocationDesc,string varPickUpCountryISO,string varPortOfEntry,string varActualPortOfEntry,string varVessel,DateTime? varRAPDate,DateTime? varEstimatedDeliveryDate,DateTime? varCriticalDate,int? varPrinterSupplierID,string varPrinterSupplierName,int? varControllerID,string varControllerName,int? varCustomerID,string varCustomerName,bool? varPrinterDelay,bool? varBooked,bool? varCompleted,string varBookingInReference,bool? varManualDropShip,string varRemarks,int? varLoadItemID,bool? varAllUnitsShipped,string varTitle,string varIsbn,string varBookCode,int? varSupplyEdition,decimal? varRvd,int? varDealNo,string varCustomerOrderRef,string varCurrency,decimal? varProformaValue,int? varB3DeliveryID,int? varDeliveryAddressID,string varDeliveryAddressDesc,int? varQuantity,int? varDestinationLocationID,string varDestinationLocationDesc,string varDestinationCountryISO,string varIncoterm,string varTransportMode,int? varCartonLength,int? varCartonWidth,int? varCartonHeight,int? varCartonWeight,int? varUnitsPerCarton,int? varNetCartonWeight,int? varOrderedQuantity,int? varTotalCartons,int? varPalletType,int? varNumPallets,int? varNumFullPalletLabels,int? varNumPartPalletLabels,int? varCartonPerFullPalletLayer,int? varLayersPerFullPallet,int? varRemainderCartons,int? varCartonPerFullPallet,int? varShipmentID,string varContainer,int? varShippedQuantity,string varLoadWeight,string varLoadVolume,string varComment,DateTime? varEntered,DateTime? varExWorks,DateTime? varOriginal,DateTime? varExWorksOriginal,DateTime? varExWorksEstimated,DateTime? varExWorksActual,DateTime? varDepartedOriginal,DateTime? varDepartedEstimated,DateTime? varDepartedActual,DateTime? varArrivedPortOriginal,DateTime? varArrivedPortEstimated,DateTime? varArrivedPortActual,DateTime? varDeliveredOriginal,DateTime? varDeliveredEstimated,DateTime? varDeliveredActual,DateTime? varInvoicedOriginal,DateTime? varInvoicedEstimated,DateTime? varInvoicedActual,DateTime? varCompletedOriginal,DateTime? varCompletedEstimated,DateTime? varCompletedActual,string varComment1,string varComment2,string varComment3,string varComment4,string varComment5,string varDealNumber,string varSuccessIndicator,string varMessage,string varErrorMsg,DateTime? varDateTimeOfCancellation,string varCancelConfirm)
		{
			B3Job item = new B3Job();
			
			item.JobID = varJobID;
			
			item.JobIDParent = varJobIDParent;
			
			item.FreightSupplierCode = varFreightSupplierCode;
			
			item.FreightSupplierName = varFreightSupplierName;
			
			item.ProcessLogRecordID = varProcessLogRecordID;
			
			item.Cancelled = varCancelled;
			
			item.SupplierPurchaseOrderNo = varSupplierPurchaseOrderNo;
			
			item.FreightPurchaseOrderNo = varFreightPurchaseOrderNo;
			
			item.PickUpLocationID = varPickUpLocationID;
			
			item.PickUpLocationDesc = varPickUpLocationDesc;
			
			item.PickUpCountryISO = varPickUpCountryISO;
			
			item.PortOfEntry = varPortOfEntry;
			
			item.ActualPortOfEntry = varActualPortOfEntry;
			
			item.Vessel = varVessel;
			
			item.RAPDate = varRAPDate;
			
			item.EstimatedDeliveryDate = varEstimatedDeliveryDate;
			
			item.CriticalDate = varCriticalDate;
			
			item.PrinterSupplierID = varPrinterSupplierID;
			
			item.PrinterSupplierName = varPrinterSupplierName;
			
			item.ControllerID = varControllerID;
			
			item.ControllerName = varControllerName;
			
			item.CustomerID = varCustomerID;
			
			item.CustomerName = varCustomerName;
			
			item.PrinterDelay = varPrinterDelay;
			
			item.Booked = varBooked;
			
			item.Completed = varCompleted;
			
			item.BookingInReference = varBookingInReference;
			
			item.ManualDropShip = varManualDropShip;
			
			item.Remarks = varRemarks;
			
			item.LoadItemID = varLoadItemID;
			
			item.AllUnitsShipped = varAllUnitsShipped;
			
			item.Title = varTitle;
			
			item.Isbn = varIsbn;
			
			item.BookCode = varBookCode;
			
			item.SupplyEdition = varSupplyEdition;
			
			item.Rvd = varRvd;
			
			item.DealNo = varDealNo;
			
			item.CustomerOrderRef = varCustomerOrderRef;
			
			item.Currency = varCurrency;
			
			item.ProformaValue = varProformaValue;
			
			item.B3DeliveryID = varB3DeliveryID;
			
			item.DeliveryAddressID = varDeliveryAddressID;
			
			item.DeliveryAddressDesc = varDeliveryAddressDesc;
			
			item.Quantity = varQuantity;
			
			item.DestinationLocationID = varDestinationLocationID;
			
			item.DestinationLocationDesc = varDestinationLocationDesc;
			
			item.DestinationCountryISO = varDestinationCountryISO;
			
			item.Incoterm = varIncoterm;
			
			item.TransportMode = varTransportMode;
			
			item.CartonLength = varCartonLength;
			
			item.CartonWidth = varCartonWidth;
			
			item.CartonHeight = varCartonHeight;
			
			item.CartonWeight = varCartonWeight;
			
			item.UnitsPerCarton = varUnitsPerCarton;
			
			item.NetCartonWeight = varNetCartonWeight;
			
			item.OrderedQuantity = varOrderedQuantity;
			
			item.TotalCartons = varTotalCartons;
			
			item.PalletType = varPalletType;
			
			item.NumPallets = varNumPallets;
			
			item.NumFullPalletLabels = varNumFullPalletLabels;
			
			item.NumPartPalletLabels = varNumPartPalletLabels;
			
			item.CartonPerFullPalletLayer = varCartonPerFullPalletLayer;
			
			item.LayersPerFullPallet = varLayersPerFullPallet;
			
			item.RemainderCartons = varRemainderCartons;
			
			item.CartonPerFullPallet = varCartonPerFullPallet;
			
			item.ShipmentID = varShipmentID;
			
			item.Container = varContainer;
			
			item.ShippedQuantity = varShippedQuantity;
			
			item.LoadWeight = varLoadWeight;
			
			item.LoadVolume = varLoadVolume;
			
			item.Comment = varComment;
			
			item.Entered = varEntered;
			
			item.ExWorks = varExWorks;
			
			item.Original = varOriginal;
			
			item.ExWorksOriginal = varExWorksOriginal;
			
			item.ExWorksEstimated = varExWorksEstimated;
			
			item.ExWorksActual = varExWorksActual;
			
			item.DepartedOriginal = varDepartedOriginal;
			
			item.DepartedEstimated = varDepartedEstimated;
			
			item.DepartedActual = varDepartedActual;
			
			item.ArrivedPortOriginal = varArrivedPortOriginal;
			
			item.ArrivedPortEstimated = varArrivedPortEstimated;
			
			item.ArrivedPortActual = varArrivedPortActual;
			
			item.DeliveredOriginal = varDeliveredOriginal;
			
			item.DeliveredEstimated = varDeliveredEstimated;
			
			item.DeliveredActual = varDeliveredActual;
			
			item.InvoicedOriginal = varInvoicedOriginal;
			
			item.InvoicedEstimated = varInvoicedEstimated;
			
			item.InvoicedActual = varInvoicedActual;
			
			item.CompletedOriginal = varCompletedOriginal;
			
			item.CompletedEstimated = varCompletedEstimated;
			
			item.CompletedActual = varCompletedActual;
			
			item.Comment1 = varComment1;
			
			item.Comment2 = varComment2;
			
			item.Comment3 = varComment3;
			
			item.Comment4 = varComment4;
			
			item.Comment5 = varComment5;
			
			item.DealNumber = varDealNumber;
			
			item.SuccessIndicator = varSuccessIndicator;
			
			item.Message = varMessage;
			
			item.ErrorMsg = varErrorMsg;
			
			item.DateTimeOfCancellation = varDateTimeOfCancellation;
			
			item.CancelConfirm = varCancelConfirm;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varId,int? varJobID,int? varJobIDParent,string varFreightSupplierCode,string varFreightSupplierName,int? varProcessLogRecordID,string varCancelled,string varSupplierPurchaseOrderNo,string varFreightPurchaseOrderNo,int? varPickUpLocationID,string varPickUpLocationDesc,string varPickUpCountryISO,string varPortOfEntry,string varActualPortOfEntry,string varVessel,DateTime? varRAPDate,DateTime? varEstimatedDeliveryDate,DateTime? varCriticalDate,int? varPrinterSupplierID,string varPrinterSupplierName,int? varControllerID,string varControllerName,int? varCustomerID,string varCustomerName,bool? varPrinterDelay,bool? varBooked,bool? varCompleted,string varBookingInReference,bool? varManualDropShip,string varRemarks,int? varLoadItemID,bool? varAllUnitsShipped,string varTitle,string varIsbn,string varBookCode,int? varSupplyEdition,decimal? varRvd,int? varDealNo,string varCustomerOrderRef,string varCurrency,decimal? varProformaValue,int? varB3DeliveryID,int? varDeliveryAddressID,string varDeliveryAddressDesc,int? varQuantity,int? varDestinationLocationID,string varDestinationLocationDesc,string varDestinationCountryISO,string varIncoterm,string varTransportMode,int? varCartonLength,int? varCartonWidth,int? varCartonHeight,int? varCartonWeight,int? varUnitsPerCarton,int? varNetCartonWeight,int? varOrderedQuantity,int? varTotalCartons,int? varPalletType,int? varNumPallets,int? varNumFullPalletLabels,int? varNumPartPalletLabels,int? varCartonPerFullPalletLayer,int? varLayersPerFullPallet,int? varRemainderCartons,int? varCartonPerFullPallet,int? varShipmentID,string varContainer,int? varShippedQuantity,string varLoadWeight,string varLoadVolume,string varComment,DateTime? varEntered,DateTime? varExWorks,DateTime? varOriginal,DateTime? varExWorksOriginal,DateTime? varExWorksEstimated,DateTime? varExWorksActual,DateTime? varDepartedOriginal,DateTime? varDepartedEstimated,DateTime? varDepartedActual,DateTime? varArrivedPortOriginal,DateTime? varArrivedPortEstimated,DateTime? varArrivedPortActual,DateTime? varDeliveredOriginal,DateTime? varDeliveredEstimated,DateTime? varDeliveredActual,DateTime? varInvoicedOriginal,DateTime? varInvoicedEstimated,DateTime? varInvoicedActual,DateTime? varCompletedOriginal,DateTime? varCompletedEstimated,DateTime? varCompletedActual,string varComment1,string varComment2,string varComment3,string varComment4,string varComment5,string varDealNumber,string varSuccessIndicator,string varMessage,string varErrorMsg,DateTime? varDateTimeOfCancellation,string varCancelConfirm)
		{
			B3Job item = new B3Job();
			
				item.Id = varId;
			
				item.JobID = varJobID;
			
				item.JobIDParent = varJobIDParent;
			
				item.FreightSupplierCode = varFreightSupplierCode;
			
				item.FreightSupplierName = varFreightSupplierName;
			
				item.ProcessLogRecordID = varProcessLogRecordID;
			
				item.Cancelled = varCancelled;
			
				item.SupplierPurchaseOrderNo = varSupplierPurchaseOrderNo;
			
				item.FreightPurchaseOrderNo = varFreightPurchaseOrderNo;
			
				item.PickUpLocationID = varPickUpLocationID;
			
				item.PickUpLocationDesc = varPickUpLocationDesc;
			
				item.PickUpCountryISO = varPickUpCountryISO;
			
				item.PortOfEntry = varPortOfEntry;
			
				item.ActualPortOfEntry = varActualPortOfEntry;
			
				item.Vessel = varVessel;
			
				item.RAPDate = varRAPDate;
			
				item.EstimatedDeliveryDate = varEstimatedDeliveryDate;
			
				item.CriticalDate = varCriticalDate;
			
				item.PrinterSupplierID = varPrinterSupplierID;
			
				item.PrinterSupplierName = varPrinterSupplierName;
			
				item.ControllerID = varControllerID;
			
				item.ControllerName = varControllerName;
			
				item.CustomerID = varCustomerID;
			
				item.CustomerName = varCustomerName;
			
				item.PrinterDelay = varPrinterDelay;
			
				item.Booked = varBooked;
			
				item.Completed = varCompleted;
			
				item.BookingInReference = varBookingInReference;
			
				item.ManualDropShip = varManualDropShip;
			
				item.Remarks = varRemarks;
			
				item.LoadItemID = varLoadItemID;
			
				item.AllUnitsShipped = varAllUnitsShipped;
			
				item.Title = varTitle;
			
				item.Isbn = varIsbn;
			
				item.BookCode = varBookCode;
			
				item.SupplyEdition = varSupplyEdition;
			
				item.Rvd = varRvd;
			
				item.DealNo = varDealNo;
			
				item.CustomerOrderRef = varCustomerOrderRef;
			
				item.Currency = varCurrency;
			
				item.ProformaValue = varProformaValue;
			
				item.B3DeliveryID = varB3DeliveryID;
			
				item.DeliveryAddressID = varDeliveryAddressID;
			
				item.DeliveryAddressDesc = varDeliveryAddressDesc;
			
				item.Quantity = varQuantity;
			
				item.DestinationLocationID = varDestinationLocationID;
			
				item.DestinationLocationDesc = varDestinationLocationDesc;
			
				item.DestinationCountryISO = varDestinationCountryISO;
			
				item.Incoterm = varIncoterm;
			
				item.TransportMode = varTransportMode;
			
				item.CartonLength = varCartonLength;
			
				item.CartonWidth = varCartonWidth;
			
				item.CartonHeight = varCartonHeight;
			
				item.CartonWeight = varCartonWeight;
			
				item.UnitsPerCarton = varUnitsPerCarton;
			
				item.NetCartonWeight = varNetCartonWeight;
			
				item.OrderedQuantity = varOrderedQuantity;
			
				item.TotalCartons = varTotalCartons;
			
				item.PalletType = varPalletType;
			
				item.NumPallets = varNumPallets;
			
				item.NumFullPalletLabels = varNumFullPalletLabels;
			
				item.NumPartPalletLabels = varNumPartPalletLabels;
			
				item.CartonPerFullPalletLayer = varCartonPerFullPalletLayer;
			
				item.LayersPerFullPallet = varLayersPerFullPallet;
			
				item.RemainderCartons = varRemainderCartons;
			
				item.CartonPerFullPallet = varCartonPerFullPallet;
			
				item.ShipmentID = varShipmentID;
			
				item.Container = varContainer;
			
				item.ShippedQuantity = varShippedQuantity;
			
				item.LoadWeight = varLoadWeight;
			
				item.LoadVolume = varLoadVolume;
			
				item.Comment = varComment;
			
				item.Entered = varEntered;
			
				item.ExWorks = varExWorks;
			
				item.Original = varOriginal;
			
				item.ExWorksOriginal = varExWorksOriginal;
			
				item.ExWorksEstimated = varExWorksEstimated;
			
				item.ExWorksActual = varExWorksActual;
			
				item.DepartedOriginal = varDepartedOriginal;
			
				item.DepartedEstimated = varDepartedEstimated;
			
				item.DepartedActual = varDepartedActual;
			
				item.ArrivedPortOriginal = varArrivedPortOriginal;
			
				item.ArrivedPortEstimated = varArrivedPortEstimated;
			
				item.ArrivedPortActual = varArrivedPortActual;
			
				item.DeliveredOriginal = varDeliveredOriginal;
			
				item.DeliveredEstimated = varDeliveredEstimated;
			
				item.DeliveredActual = varDeliveredActual;
			
				item.InvoicedOriginal = varInvoicedOriginal;
			
				item.InvoicedEstimated = varInvoicedEstimated;
			
				item.InvoicedActual = varInvoicedActual;
			
				item.CompletedOriginal = varCompletedOriginal;
			
				item.CompletedEstimated = varCompletedEstimated;
			
				item.CompletedActual = varCompletedActual;
			
				item.Comment1 = varComment1;
			
				item.Comment2 = varComment2;
			
				item.Comment3 = varComment3;
			
				item.Comment4 = varComment4;
			
				item.Comment5 = varComment5;
			
				item.DealNumber = varDealNumber;
			
				item.SuccessIndicator = varSuccessIndicator;
			
				item.Message = varMessage;
			
				item.ErrorMsg = varErrorMsg;
			
				item.DateTimeOfCancellation = varDateTimeOfCancellation;
			
				item.CancelConfirm = varCancelConfirm;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn JobIDColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn JobIDParentColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn FreightSupplierCodeColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn FreightSupplierNameColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn ProcessLogRecordIDColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn CancelledColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn SupplierPurchaseOrderNoColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn FreightPurchaseOrderNoColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn PickUpLocationIDColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn PickUpLocationDescColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn PickUpCountryISOColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn PortOfEntryColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn ActualPortOfEntryColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn VesselColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn RAPDateColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        public static TableSchema.TableColumn EstimatedDeliveryDateColumn
        {
            get { return Schema.Columns[16]; }
        }
        
        
        
        public static TableSchema.TableColumn CriticalDateColumn
        {
            get { return Schema.Columns[17]; }
        }
        
        
        
        public static TableSchema.TableColumn PrinterSupplierIDColumn
        {
            get { return Schema.Columns[18]; }
        }
        
        
        
        public static TableSchema.TableColumn PrinterSupplierNameColumn
        {
            get { return Schema.Columns[19]; }
        }
        
        
        
        public static TableSchema.TableColumn ControllerIDColumn
        {
            get { return Schema.Columns[20]; }
        }
        
        
        
        public static TableSchema.TableColumn ControllerNameColumn
        {
            get { return Schema.Columns[21]; }
        }
        
        
        
        public static TableSchema.TableColumn CustomerIDColumn
        {
            get { return Schema.Columns[22]; }
        }
        
        
        
        public static TableSchema.TableColumn CustomerNameColumn
        {
            get { return Schema.Columns[23]; }
        }
        
        
        
        public static TableSchema.TableColumn PrinterDelayColumn
        {
            get { return Schema.Columns[24]; }
        }
        
        
        
        public static TableSchema.TableColumn BookedColumn
        {
            get { return Schema.Columns[25]; }
        }
        
        
        
        public static TableSchema.TableColumn CompletedColumn
        {
            get { return Schema.Columns[26]; }
        }
        
        
        
        public static TableSchema.TableColumn BookingInReferenceColumn
        {
            get { return Schema.Columns[27]; }
        }
        
        
        
        public static TableSchema.TableColumn ManualDropShipColumn
        {
            get { return Schema.Columns[28]; }
        }
        
        
        
        public static TableSchema.TableColumn RemarksColumn
        {
            get { return Schema.Columns[29]; }
        }
        
        
        
        public static TableSchema.TableColumn LoadItemIDColumn
        {
            get { return Schema.Columns[30]; }
        }
        
        
        
        public static TableSchema.TableColumn AllUnitsShippedColumn
        {
            get { return Schema.Columns[31]; }
        }
        
        
        
        public static TableSchema.TableColumn TitleColumn
        {
            get { return Schema.Columns[32]; }
        }
        
        
        
        public static TableSchema.TableColumn IsbnColumn
        {
            get { return Schema.Columns[33]; }
        }
        
        
        
        public static TableSchema.TableColumn BookCodeColumn
        {
            get { return Schema.Columns[34]; }
        }
        
        
        
        public static TableSchema.TableColumn SupplyEditionColumn
        {
            get { return Schema.Columns[35]; }
        }
        
        
        
        public static TableSchema.TableColumn RvdColumn
        {
            get { return Schema.Columns[36]; }
        }
        
        
        
        public static TableSchema.TableColumn DealNoColumn
        {
            get { return Schema.Columns[37]; }
        }
        
        
        
        public static TableSchema.TableColumn CustomerOrderRefColumn
        {
            get { return Schema.Columns[38]; }
        }
        
        
        
        public static TableSchema.TableColumn CurrencyColumn
        {
            get { return Schema.Columns[39]; }
        }
        
        
        
        public static TableSchema.TableColumn ProformaValueColumn
        {
            get { return Schema.Columns[40]; }
        }
        
        
        
        public static TableSchema.TableColumn B3DeliveryIDColumn
        {
            get { return Schema.Columns[41]; }
        }
        
        
        
        public static TableSchema.TableColumn DeliveryAddressIDColumn
        {
            get { return Schema.Columns[42]; }
        }
        
        
        
        public static TableSchema.TableColumn DeliveryAddressDescColumn
        {
            get { return Schema.Columns[43]; }
        }
        
        
        
        public static TableSchema.TableColumn QuantityColumn
        {
            get { return Schema.Columns[44]; }
        }
        
        
        
        public static TableSchema.TableColumn DestinationLocationIDColumn
        {
            get { return Schema.Columns[45]; }
        }
        
        
        
        public static TableSchema.TableColumn DestinationLocationDescColumn
        {
            get { return Schema.Columns[46]; }
        }
        
        
        
        public static TableSchema.TableColumn DestinationCountryISOColumn
        {
            get { return Schema.Columns[47]; }
        }
        
        
        
        public static TableSchema.TableColumn IncotermColumn
        {
            get { return Schema.Columns[48]; }
        }
        
        
        
        public static TableSchema.TableColumn TransportModeColumn
        {
            get { return Schema.Columns[49]; }
        }
        
        
        
        public static TableSchema.TableColumn CartonLengthColumn
        {
            get { return Schema.Columns[50]; }
        }
        
        
        
        public static TableSchema.TableColumn CartonWidthColumn
        {
            get { return Schema.Columns[51]; }
        }
        
        
        
        public static TableSchema.TableColumn CartonHeightColumn
        {
            get { return Schema.Columns[52]; }
        }
        
        
        
        public static TableSchema.TableColumn CartonWeightColumn
        {
            get { return Schema.Columns[53]; }
        }
        
        
        
        public static TableSchema.TableColumn UnitsPerCartonColumn
        {
            get { return Schema.Columns[54]; }
        }
        
        
        
        public static TableSchema.TableColumn NetCartonWeightColumn
        {
            get { return Schema.Columns[55]; }
        }
        
        
        
        public static TableSchema.TableColumn OrderedQuantityColumn
        {
            get { return Schema.Columns[56]; }
        }
        
        
        
        public static TableSchema.TableColumn TotalCartonsColumn
        {
            get { return Schema.Columns[57]; }
        }
        
        
        
        public static TableSchema.TableColumn PalletTypeColumn
        {
            get { return Schema.Columns[58]; }
        }
        
        
        
        public static TableSchema.TableColumn NumPalletsColumn
        {
            get { return Schema.Columns[59]; }
        }
        
        
        
        public static TableSchema.TableColumn NumFullPalletLabelsColumn
        {
            get { return Schema.Columns[60]; }
        }
        
        
        
        public static TableSchema.TableColumn NumPartPalletLabelsColumn
        {
            get { return Schema.Columns[61]; }
        }
        
        
        
        public static TableSchema.TableColumn CartonPerFullPalletLayerColumn
        {
            get { return Schema.Columns[62]; }
        }
        
        
        
        public static TableSchema.TableColumn LayersPerFullPalletColumn
        {
            get { return Schema.Columns[63]; }
        }
        
        
        
        public static TableSchema.TableColumn RemainderCartonsColumn
        {
            get { return Schema.Columns[64]; }
        }
        
        
        
        public static TableSchema.TableColumn CartonPerFullPalletColumn
        {
            get { return Schema.Columns[65]; }
        }
        
        
        
        public static TableSchema.TableColumn ShipmentIDColumn
        {
            get { return Schema.Columns[66]; }
        }
        
        
        
        public static TableSchema.TableColumn ContainerColumn
        {
            get { return Schema.Columns[67]; }
        }
        
        
        
        public static TableSchema.TableColumn ShippedQuantityColumn
        {
            get { return Schema.Columns[68]; }
        }
        
        
        
        public static TableSchema.TableColumn LoadWeightColumn
        {
            get { return Schema.Columns[69]; }
        }
        
        
        
        public static TableSchema.TableColumn LoadVolumeColumn
        {
            get { return Schema.Columns[70]; }
        }
        
        
        
        public static TableSchema.TableColumn CommentColumn
        {
            get { return Schema.Columns[71]; }
        }
        
        
        
        public static TableSchema.TableColumn EnteredColumn
        {
            get { return Schema.Columns[72]; }
        }
        
        
        
        public static TableSchema.TableColumn ExWorksColumn
        {
            get { return Schema.Columns[73]; }
        }
        
        
        
        public static TableSchema.TableColumn OriginalColumn
        {
            get { return Schema.Columns[74]; }
        }
        
        
        
        public static TableSchema.TableColumn ExWorksOriginalColumn
        {
            get { return Schema.Columns[75]; }
        }
        
        
        
        public static TableSchema.TableColumn ExWorksEstimatedColumn
        {
            get { return Schema.Columns[76]; }
        }
        
        
        
        public static TableSchema.TableColumn ExWorksActualColumn
        {
            get { return Schema.Columns[77]; }
        }
        
        
        
        public static TableSchema.TableColumn DepartedOriginalColumn
        {
            get { return Schema.Columns[78]; }
        }
        
        
        
        public static TableSchema.TableColumn DepartedEstimatedColumn
        {
            get { return Schema.Columns[79]; }
        }
        
        
        
        public static TableSchema.TableColumn DepartedActualColumn
        {
            get { return Schema.Columns[80]; }
        }
        
        
        
        public static TableSchema.TableColumn ArrivedPortOriginalColumn
        {
            get { return Schema.Columns[81]; }
        }
        
        
        
        public static TableSchema.TableColumn ArrivedPortEstimatedColumn
        {
            get { return Schema.Columns[82]; }
        }
        
        
        
        public static TableSchema.TableColumn ArrivedPortActualColumn
        {
            get { return Schema.Columns[83]; }
        }
        
        
        
        public static TableSchema.TableColumn DeliveredOriginalColumn
        {
            get { return Schema.Columns[84]; }
        }
        
        
        
        public static TableSchema.TableColumn DeliveredEstimatedColumn
        {
            get { return Schema.Columns[85]; }
        }
        
        
        
        public static TableSchema.TableColumn DeliveredActualColumn
        {
            get { return Schema.Columns[86]; }
        }
        
        
        
        public static TableSchema.TableColumn InvoicedOriginalColumn
        {
            get { return Schema.Columns[87]; }
        }
        
        
        
        public static TableSchema.TableColumn InvoicedEstimatedColumn
        {
            get { return Schema.Columns[88]; }
        }
        
        
        
        public static TableSchema.TableColumn InvoicedActualColumn
        {
            get { return Schema.Columns[89]; }
        }
        
        
        
        public static TableSchema.TableColumn CompletedOriginalColumn
        {
            get { return Schema.Columns[90]; }
        }
        
        
        
        public static TableSchema.TableColumn CompletedEstimatedColumn
        {
            get { return Schema.Columns[91]; }
        }
        
        
        
        public static TableSchema.TableColumn CompletedActualColumn
        {
            get { return Schema.Columns[92]; }
        }
        
        
        
        public static TableSchema.TableColumn Comment1Column
        {
            get { return Schema.Columns[93]; }
        }
        
        
        
        public static TableSchema.TableColumn Comment2Column
        {
            get { return Schema.Columns[94]; }
        }
        
        
        
        public static TableSchema.TableColumn Comment3Column
        {
            get { return Schema.Columns[95]; }
        }
        
        
        
        public static TableSchema.TableColumn Comment4Column
        {
            get { return Schema.Columns[96]; }
        }
        
        
        
        public static TableSchema.TableColumn Comment5Column
        {
            get { return Schema.Columns[97]; }
        }
        
        
        
        public static TableSchema.TableColumn DealNumberColumn
        {
            get { return Schema.Columns[98]; }
        }
        
        
        
        public static TableSchema.TableColumn SuccessIndicatorColumn
        {
            get { return Schema.Columns[99]; }
        }
        
        
        
        public static TableSchema.TableColumn MessageColumn
        {
            get { return Schema.Columns[100]; }
        }
        
        
        
        public static TableSchema.TableColumn ErrorMsgColumn
        {
            get { return Schema.Columns[101]; }
        }
        
        
        
        public static TableSchema.TableColumn DateTimeOfCancellationColumn
        {
            get { return Schema.Columns[102]; }
        }
        
        
        
        public static TableSchema.TableColumn CancelConfirmColumn
        {
            get { return Schema.Columns[103]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"ID";
			 public static string JobID = @"JobID";
			 public static string JobIDParent = @"JobIDParent";
			 public static string FreightSupplierCode = @"FreightSupplierCode";
			 public static string FreightSupplierName = @"FreightSupplierName";
			 public static string ProcessLogRecordID = @"ProcessLogRecordID";
			 public static string Cancelled = @"Cancelled";
			 public static string SupplierPurchaseOrderNo = @"SupplierPurchaseOrderNo";
			 public static string FreightPurchaseOrderNo = @"FreightPurchaseOrderNo";
			 public static string PickUpLocationID = @"PickUpLocationID";
			 public static string PickUpLocationDesc = @"PickUpLocationDesc";
			 public static string PickUpCountryISO = @"PickUpCountryISO";
			 public static string PortOfEntry = @"PortOfEntry";
			 public static string ActualPortOfEntry = @"ActualPortOfEntry";
			 public static string Vessel = @"Vessel";
			 public static string RAPDate = @"RAPDate";
			 public static string EstimatedDeliveryDate = @"EstimatedDeliveryDate";
			 public static string CriticalDate = @"CriticalDate";
			 public static string PrinterSupplierID = @"PrinterSupplierID";
			 public static string PrinterSupplierName = @"PrinterSupplierName";
			 public static string ControllerID = @"ControllerID";
			 public static string ControllerName = @"ControllerName";
			 public static string CustomerID = @"CustomerID";
			 public static string CustomerName = @"CustomerName";
			 public static string PrinterDelay = @"PrinterDelay";
			 public static string Booked = @"Booked";
			 public static string Completed = @"Completed";
			 public static string BookingInReference = @"BookingInReference";
			 public static string ManualDropShip = @"ManualDropShip";
			 public static string Remarks = @"Remarks";
			 public static string LoadItemID = @"LoadItemID";
			 public static string AllUnitsShipped = @"AllUnitsShipped";
			 public static string Title = @"Title";
			 public static string Isbn = @"ISBN";
			 public static string BookCode = @"BookCode";
			 public static string SupplyEdition = @"SupplyEdition";
			 public static string Rvd = @"RVD";
			 public static string DealNo = @"DealNo";
			 public static string CustomerOrderRef = @"CustomerOrderRef";
			 public static string Currency = @"Currency";
			 public static string ProformaValue = @"ProformaValue";
			 public static string B3DeliveryID = @"B3DeliveryID";
			 public static string DeliveryAddressID = @"DeliveryAddressID";
			 public static string DeliveryAddressDesc = @"DeliveryAddressDesc";
			 public static string Quantity = @"Quantity";
			 public static string DestinationLocationID = @"DestinationLocationID";
			 public static string DestinationLocationDesc = @"DestinationLocationDesc";
			 public static string DestinationCountryISO = @"DestinationCountryISO";
			 public static string Incoterm = @"Incoterm";
			 public static string TransportMode = @"TransportMode";
			 public static string CartonLength = @"CartonLength";
			 public static string CartonWidth = @"CartonWidth";
			 public static string CartonHeight = @"CartonHeight";
			 public static string CartonWeight = @"CartonWeight";
			 public static string UnitsPerCarton = @"UnitsPerCarton";
			 public static string NetCartonWeight = @"NetCartonWeight";
			 public static string OrderedQuantity = @"OrderedQuantity";
			 public static string TotalCartons = @"TotalCartons";
			 public static string PalletType = @"PalletType";
			 public static string NumPallets = @"NumPallets";
			 public static string NumFullPalletLabels = @"NumFullPalletLabels";
			 public static string NumPartPalletLabels = @"NumPartPalletLabels";
			 public static string CartonPerFullPalletLayer = @"CartonPerFullPalletLayer";
			 public static string LayersPerFullPallet = @"LayersPerFullPallet";
			 public static string RemainderCartons = @"RemainderCartons";
			 public static string CartonPerFullPallet = @"CartonPerFullPallet";
			 public static string ShipmentID = @"ShipmentID";
			 public static string Container = @"Container";
			 public static string ShippedQuantity = @"ShippedQuantity";
			 public static string LoadWeight = @"LoadWeight";
			 public static string LoadVolume = @"LoadVolume";
			 public static string Comment = @"Comment";
			 public static string Entered = @"Entered";
			 public static string ExWorks = @"ExWorks";
			 public static string Original = @"Original";
			 public static string ExWorksOriginal = @"ExWorksOriginal";
			 public static string ExWorksEstimated = @"ExWorksEstimated";
			 public static string ExWorksActual = @"ExWorksActual";
			 public static string DepartedOriginal = @"DepartedOriginal";
			 public static string DepartedEstimated = @"DepartedEstimated";
			 public static string DepartedActual = @"DepartedActual";
			 public static string ArrivedPortOriginal = @"ArrivedPortOriginal";
			 public static string ArrivedPortEstimated = @"ArrivedPortEstimated";
			 public static string ArrivedPortActual = @"ArrivedPortActual";
			 public static string DeliveredOriginal = @"DeliveredOriginal";
			 public static string DeliveredEstimated = @"DeliveredEstimated";
			 public static string DeliveredActual = @"DeliveredActual";
			 public static string InvoicedOriginal = @"InvoicedOriginal";
			 public static string InvoicedEstimated = @"InvoicedEstimated";
			 public static string InvoicedActual = @"InvoicedActual";
			 public static string CompletedOriginal = @"CompletedOriginal";
			 public static string CompletedEstimated = @"CompletedEstimated";
			 public static string CompletedActual = @"CompletedActual";
			 public static string Comment1 = @"Comment1";
			 public static string Comment2 = @"Comment2";
			 public static string Comment3 = @"Comment3";
			 public static string Comment4 = @"Comment4";
			 public static string Comment5 = @"Comment5";
			 public static string DealNumber = @"DealNumber";
			 public static string SuccessIndicator = @"SuccessIndicator";
			 public static string Message = @"Message";
			 public static string ErrorMsg = @"ErrorMsg";
			 public static string DateTimeOfCancellation = @"DateTimeOfCancellation";
			 public static string CancelConfirm = @"CancelConfirm";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
