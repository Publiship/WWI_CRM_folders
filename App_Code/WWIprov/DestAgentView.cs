using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DAL.Logistics{
    /// <summary>
    /// Strongly-typed collection for the DestAgentView class.
    /// </summary>
    [Serializable]
    public partial class DestAgentViewCollection : ReadOnlyList<DestAgentView, DestAgentViewCollection>
    {        
        public DestAgentViewCollection() {}
    }
    /// <summary>
    /// This is  Read-only wrapper class for the DestAgentView view.
    /// </summary>
    [Serializable]
    public partial class DestAgentView : ReadOnlyRecord<DestAgentView>, IReadOnlyRecord
    {
    
	    #region Default Settings
	    protected static void SetSQLProps() 
	    {
		    GetTableSchema();
	    }
	    #endregion
        #region Schema Accessor
	    public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                {
                    SetSQLProps();
                }
                return BaseSchema;
            }
        }
    	
        private static void GetTableSchema() 
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("DestAgentView", TableType.View, DataService.GetInstance("WWIprov"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns
                
                TableSchema.TableColumn colvarDestAgentID = new TableSchema.TableColumn(schema);
                colvarDestAgentID.ColumnName = "DestAgentID";
                colvarDestAgentID.DataType = DbType.Int32;
                colvarDestAgentID.MaxLength = 0;
                colvarDestAgentID.AutoIncrement = false;
                colvarDestAgentID.IsNullable = false;
                colvarDestAgentID.IsPrimaryKey = false;
                colvarDestAgentID.IsForeignKey = false;
                colvarDestAgentID.IsReadOnly = false;
                
                schema.Columns.Add(colvarDestAgentID);
                
                TableSchema.TableColumn colvarDestAgent = new TableSchema.TableColumn(schema);
                colvarDestAgent.ColumnName = "DestAgent";
                colvarDestAgent.DataType = DbType.String;
                colvarDestAgent.MaxLength = 50;
                colvarDestAgent.AutoIncrement = false;
                colvarDestAgent.IsNullable = true;
                colvarDestAgent.IsPrimaryKey = false;
                colvarDestAgent.IsForeignKey = false;
                colvarDestAgent.IsReadOnly = false;
                
                schema.Columns.Add(colvarDestAgent);
                
                TableSchema.TableColumn colvarDestAgentAddress1 = new TableSchema.TableColumn(schema);
                colvarDestAgentAddress1.ColumnName = "DestAgentAddress1";
                colvarDestAgentAddress1.DataType = DbType.String;
                colvarDestAgentAddress1.MaxLength = 40;
                colvarDestAgentAddress1.AutoIncrement = false;
                colvarDestAgentAddress1.IsNullable = true;
                colvarDestAgentAddress1.IsPrimaryKey = false;
                colvarDestAgentAddress1.IsForeignKey = false;
                colvarDestAgentAddress1.IsReadOnly = false;
                
                schema.Columns.Add(colvarDestAgentAddress1);
                
                TableSchema.TableColumn colvarDestAgentAddress2 = new TableSchema.TableColumn(schema);
                colvarDestAgentAddress2.ColumnName = "DestAgentAddress2";
                colvarDestAgentAddress2.DataType = DbType.String;
                colvarDestAgentAddress2.MaxLength = 40;
                colvarDestAgentAddress2.AutoIncrement = false;
                colvarDestAgentAddress2.IsNullable = true;
                colvarDestAgentAddress2.IsPrimaryKey = false;
                colvarDestAgentAddress2.IsForeignKey = false;
                colvarDestAgentAddress2.IsReadOnly = false;
                
                schema.Columns.Add(colvarDestAgentAddress2);
                
                TableSchema.TableColumn colvarDestAgentAddress3 = new TableSchema.TableColumn(schema);
                colvarDestAgentAddress3.ColumnName = "DestAgentAddress3";
                colvarDestAgentAddress3.DataType = DbType.String;
                colvarDestAgentAddress3.MaxLength = 40;
                colvarDestAgentAddress3.AutoIncrement = false;
                colvarDestAgentAddress3.IsNullable = true;
                colvarDestAgentAddress3.IsPrimaryKey = false;
                colvarDestAgentAddress3.IsForeignKey = false;
                colvarDestAgentAddress3.IsReadOnly = false;
                
                schema.Columns.Add(colvarDestAgentAddress3);
                
                TableSchema.TableColumn colvarDestAgentCountry = new TableSchema.TableColumn(schema);
                colvarDestAgentCountry.ColumnName = "DestAgentCountry";
                colvarDestAgentCountry.DataType = DbType.String;
                colvarDestAgentCountry.MaxLength = 50;
                colvarDestAgentCountry.AutoIncrement = false;
                colvarDestAgentCountry.IsNullable = false;
                colvarDestAgentCountry.IsPrimaryKey = false;
                colvarDestAgentCountry.IsForeignKey = false;
                colvarDestAgentCountry.IsReadOnly = false;
                
                schema.Columns.Add(colvarDestAgentCountry);
                
                TableSchema.TableColumn colvarTypeID = new TableSchema.TableColumn(schema);
                colvarTypeID.ColumnName = "TypeID";
                colvarTypeID.DataType = DbType.Int32;
                colvarTypeID.MaxLength = 0;
                colvarTypeID.AutoIncrement = false;
                colvarTypeID.IsNullable = true;
                colvarTypeID.IsPrimaryKey = false;
                colvarTypeID.IsForeignKey = false;
                colvarTypeID.IsReadOnly = false;
                
                schema.Columns.Add(colvarTypeID);
                
                
                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["WWIprov"].AddSchema("DestAgentView",schema);
            }
        }
        #endregion
        
        #region Query Accessor
	    public static Query CreateQuery()
	    {
		    return new Query(Schema);
	    }
	    #endregion
	    
	    #region .ctors
	    public DestAgentView()
	    {
            SetSQLProps();
            SetDefaults();
            MarkNew();
        }
        public DestAgentView(bool useDatabaseDefaults)
	    {
		    SetSQLProps();
		    if(useDatabaseDefaults)
		    {
				ForceDefaults();
			}
			MarkNew();
	    }
	    
	    public DestAgentView(object keyID)
	    {
		    SetSQLProps();
		    LoadByKey(keyID);
	    }
    	 
	    public DestAgentView(string columnName, object columnValue)
        {
            SetSQLProps();
            LoadByParam(columnName,columnValue);
        }
        
	    #endregion
	    
	    #region Props
	    
          
        [XmlAttribute("DestAgentID")]
        [Bindable(true)]
        public int DestAgentID 
	    {
		    get
		    {
			    return GetColumnValue<int>("DestAgentID");
		    }
            set 
		    {
			    SetColumnValue("DestAgentID", value);
            }
        }
	      
        [XmlAttribute("DestAgent")]
        [Bindable(true)]
        public string DestAgent 
	    {
		    get
		    {
			    return GetColumnValue<string>("DestAgent");
		    }
            set 
		    {
			    SetColumnValue("DestAgent", value);
            }
        }
	      
        [XmlAttribute("DestAgentAddress1")]
        [Bindable(true)]
        public string DestAgentAddress1 
	    {
		    get
		    {
			    return GetColumnValue<string>("DestAgentAddress1");
		    }
            set 
		    {
			    SetColumnValue("DestAgentAddress1", value);
            }
        }
	      
        [XmlAttribute("DestAgentAddress2")]
        [Bindable(true)]
        public string DestAgentAddress2 
	    {
		    get
		    {
			    return GetColumnValue<string>("DestAgentAddress2");
		    }
            set 
		    {
			    SetColumnValue("DestAgentAddress2", value);
            }
        }
	      
        [XmlAttribute("DestAgentAddress3")]
        [Bindable(true)]
        public string DestAgentAddress3 
	    {
		    get
		    {
			    return GetColumnValue<string>("DestAgentAddress3");
		    }
            set 
		    {
			    SetColumnValue("DestAgentAddress3", value);
            }
        }
	      
        [XmlAttribute("DestAgentCountry")]
        [Bindable(true)]
        public string DestAgentCountry 
	    {
		    get
		    {
			    return GetColumnValue<string>("DestAgentCountry");
		    }
            set 
		    {
			    SetColumnValue("DestAgentCountry", value);
            }
        }
	      
        [XmlAttribute("TypeID")]
        [Bindable(true)]
        public int? TypeID 
	    {
		    get
		    {
			    return GetColumnValue<int?>("TypeID");
		    }
            set 
		    {
			    SetColumnValue("TypeID", value);
            }
        }
	    
	    #endregion
    
	    #region Columns Struct
	    public struct Columns
	    {
		    
		    
            public static string DestAgentID = @"DestAgentID";
            
            public static string DestAgent = @"DestAgent";
            
            public static string DestAgentAddress1 = @"DestAgentAddress1";
            
            public static string DestAgentAddress2 = @"DestAgentAddress2";
            
            public static string DestAgentAddress3 = @"DestAgentAddress3";
            
            public static string DestAgentCountry = @"DestAgentCountry";
            
            public static string TypeID = @"TypeID";
            
	    }
	    #endregion
	    
	    
	    #region IAbstractRecord Members
        public new CT GetColumnValue<CT>(string columnName) {
            return base.GetColumnValue<CT>(columnName);
        }
        public object GetColumnValue(string columnName) {
            return base.GetColumnValue<object>(columnName);
        }
        #endregion
	    
    }
}
