using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DAL.Logistics
{
	/// <summary>
	/// Strongly-typed collection for the DbQueryLog class.
	/// </summary>
    [Serializable]
	public partial class DbQueryLogCollection : ActiveList<DbQueryLog, DbQueryLogCollection>
	{	   
		public DbQueryLogCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>DbQueryLogCollection</returns>
		public DbQueryLogCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                DbQueryLog o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the db_query_log table.
	/// </summary>
	[Serializable]
	public partial class DbQueryLog : ActiveRecord<DbQueryLog>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public DbQueryLog()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public DbQueryLog(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public DbQueryLog(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public DbQueryLog(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("db_query_log", TableType.Table, DataService.GetInstance("WWIprov"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarQryId = new TableSchema.TableColumn(schema);
				colvarQryId.ColumnName = "qry_ID";
				colvarQryId.DataType = DbType.Int32;
				colvarQryId.MaxLength = 0;
				colvarQryId.AutoIncrement = true;
				colvarQryId.IsNullable = false;
				colvarQryId.IsPrimaryKey = true;
				colvarQryId.IsForeignKey = false;
				colvarQryId.IsReadOnly = false;
				colvarQryId.DefaultSetting = @"";
				colvarQryId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarQryId);
				
				TableSchema.TableColumn colvarQryDesc = new TableSchema.TableColumn(schema);
				colvarQryDesc.ColumnName = "qry_desc";
				colvarQryDesc.DataType = DbType.String;
				colvarQryDesc.MaxLength = 150;
				colvarQryDesc.AutoIncrement = false;
				colvarQryDesc.IsNullable = false;
				colvarQryDesc.IsPrimaryKey = false;
				colvarQryDesc.IsForeignKey = false;
				colvarQryDesc.IsReadOnly = false;
				colvarQryDesc.DefaultSetting = @"";
				colvarQryDesc.ForeignKeyTableName = "";
				schema.Columns.Add(colvarQryDesc);
				
				TableSchema.TableColumn colvarQryText = new TableSchema.TableColumn(schema);
				colvarQryText.ColumnName = "qry_text";
				colvarQryText.DataType = DbType.String;
				colvarQryText.MaxLength = 1073741823;
				colvarQryText.AutoIncrement = false;
				colvarQryText.IsNullable = false;
				colvarQryText.IsPrimaryKey = false;
				colvarQryText.IsForeignKey = false;
				colvarQryText.IsReadOnly = false;
				colvarQryText.DefaultSetting = @"";
				colvarQryText.ForeignKeyTableName = "";
				schema.Columns.Add(colvarQryText);
				
				TableSchema.TableColumn colvarByEmployeeID = new TableSchema.TableColumn(schema);
				colvarByEmployeeID.ColumnName = "by_employeeID";
				colvarByEmployeeID.DataType = DbType.Int32;
				colvarByEmployeeID.MaxLength = 0;
				colvarByEmployeeID.AutoIncrement = false;
				colvarByEmployeeID.IsNullable = true;
				colvarByEmployeeID.IsPrimaryKey = false;
				colvarByEmployeeID.IsForeignKey = false;
				colvarByEmployeeID.IsReadOnly = false;
				
						colvarByEmployeeID.DefaultSetting = @"((0))";
				colvarByEmployeeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarByEmployeeID);
				
				TableSchema.TableColumn colvarByContactID = new TableSchema.TableColumn(schema);
				colvarByContactID.ColumnName = "by_contactID";
				colvarByContactID.DataType = DbType.Int32;
				colvarByContactID.MaxLength = 0;
				colvarByContactID.AutoIncrement = false;
				colvarByContactID.IsNullable = true;
				colvarByContactID.IsPrimaryKey = false;
				colvarByContactID.IsForeignKey = false;
				colvarByContactID.IsReadOnly = false;
				
						colvarByContactID.DefaultSetting = @"((0))";
				colvarByContactID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarByContactID);
				
				TableSchema.TableColumn colvarLogIp = new TableSchema.TableColumn(schema);
				colvarLogIp.ColumnName = "log_ip";
				colvarLogIp.DataType = DbType.String;
				colvarLogIp.MaxLength = 20;
				colvarLogIp.AutoIncrement = false;
				colvarLogIp.IsNullable = true;
				colvarLogIp.IsPrimaryKey = false;
				colvarLogIp.IsForeignKey = false;
				colvarLogIp.IsReadOnly = false;
				colvarLogIp.DefaultSetting = @"";
				colvarLogIp.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLogIp);
				
				TableSchema.TableColumn colvarLogQryDate = new TableSchema.TableColumn(schema);
				colvarLogQryDate.ColumnName = "log_qry_date";
				colvarLogQryDate.DataType = DbType.DateTime;
				colvarLogQryDate.MaxLength = 0;
				colvarLogQryDate.AutoIncrement = false;
				colvarLogQryDate.IsNullable = true;
				colvarLogQryDate.IsPrimaryKey = false;
				colvarLogQryDate.IsForeignKey = false;
				colvarLogQryDate.IsReadOnly = false;
				colvarLogQryDate.DefaultSetting = @"";
				colvarLogQryDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLogQryDate);
				
				TableSchema.TableColumn colvarQrySourceDeprecated = new TableSchema.TableColumn(schema);
				colvarQrySourceDeprecated.ColumnName = "qry_source_deprecated";
				colvarQrySourceDeprecated.DataType = DbType.String;
				colvarQrySourceDeprecated.MaxLength = 5;
				colvarQrySourceDeprecated.AutoIncrement = false;
				colvarQrySourceDeprecated.IsNullable = true;
				colvarQrySourceDeprecated.IsPrimaryKey = false;
				colvarQrySourceDeprecated.IsForeignKey = false;
				colvarQrySourceDeprecated.IsReadOnly = false;
				colvarQrySourceDeprecated.DefaultSetting = @"";
				colvarQrySourceDeprecated.ForeignKeyTableName = "";
				schema.Columns.Add(colvarQrySourceDeprecated);
				
				TableSchema.TableColumn colvarQrySource = new TableSchema.TableColumn(schema);
				colvarQrySource.ColumnName = "qry_source";
				colvarQrySource.DataType = DbType.String;
				colvarQrySource.MaxLength = 20;
				colvarQrySource.AutoIncrement = false;
				colvarQrySource.IsNullable = true;
				colvarQrySource.IsPrimaryKey = false;
				colvarQrySource.IsForeignKey = false;
				colvarQrySource.IsReadOnly = false;
				colvarQrySource.DefaultSetting = @"";
				colvarQrySource.ForeignKeyTableName = "";
				schema.Columns.Add(colvarQrySource);
				
				TableSchema.TableColumn colvarLogQryTs = new TableSchema.TableColumn(schema);
				colvarLogQryTs.ColumnName = "log_qry_ts";
				colvarLogQryTs.DataType = DbType.Binary;
				colvarLogQryTs.MaxLength = 0;
				colvarLogQryTs.AutoIncrement = false;
				colvarLogQryTs.IsNullable = false;
				colvarLogQryTs.IsPrimaryKey = false;
				colvarLogQryTs.IsForeignKey = false;
				colvarLogQryTs.IsReadOnly = true;
				colvarLogQryTs.DefaultSetting = @"";
				colvarLogQryTs.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLogQryTs);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["WWIprov"].AddSchema("db_query_log",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("QryId")]
		[Bindable(true)]
		public int QryId 
		{
			get { return GetColumnValue<int>(Columns.QryId); }
			set { SetColumnValue(Columns.QryId, value); }
		}
		  
		[XmlAttribute("QryDesc")]
		[Bindable(true)]
		public string QryDesc 
		{
			get { return GetColumnValue<string>(Columns.QryDesc); }
			set { SetColumnValue(Columns.QryDesc, value); }
		}
		  
		[XmlAttribute("QryText")]
		[Bindable(true)]
		public string QryText 
		{
			get { return GetColumnValue<string>(Columns.QryText); }
			set { SetColumnValue(Columns.QryText, value); }
		}
		  
		[XmlAttribute("ByEmployeeID")]
		[Bindable(true)]
		public int? ByEmployeeID 
		{
			get { return GetColumnValue<int?>(Columns.ByEmployeeID); }
			set { SetColumnValue(Columns.ByEmployeeID, value); }
		}
		  
		[XmlAttribute("ByContactID")]
		[Bindable(true)]
		public int? ByContactID 
		{
			get { return GetColumnValue<int?>(Columns.ByContactID); }
			set { SetColumnValue(Columns.ByContactID, value); }
		}
		  
		[XmlAttribute("LogIp")]
		[Bindable(true)]
		public string LogIp 
		{
			get { return GetColumnValue<string>(Columns.LogIp); }
			set { SetColumnValue(Columns.LogIp, value); }
		}
		  
		[XmlAttribute("LogQryDate")]
		[Bindable(true)]
		public DateTime? LogQryDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.LogQryDate); }
			set { SetColumnValue(Columns.LogQryDate, value); }
		}
		  
		[XmlAttribute("QrySourceDeprecated")]
		[Bindable(true)]
		public string QrySourceDeprecated 
		{
			get { return GetColumnValue<string>(Columns.QrySourceDeprecated); }
			set { SetColumnValue(Columns.QrySourceDeprecated, value); }
		}
		  
		[XmlAttribute("QrySource")]
		[Bindable(true)]
		public string QrySource 
		{
			get { return GetColumnValue<string>(Columns.QrySource); }
			set { SetColumnValue(Columns.QrySource, value); }
		}
		  
		[XmlAttribute("LogQryTs")]
		[Bindable(true)]
		public byte[] LogQryTs 
		{
			get { return GetColumnValue<byte[]>(Columns.LogQryTs); }
			set { SetColumnValue(Columns.LogQryTs, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varQryDesc,string varQryText,int? varByEmployeeID,int? varByContactID,string varLogIp,DateTime? varLogQryDate,string varQrySourceDeprecated,string varQrySource,byte[] varLogQryTs)
		{
			DbQueryLog item = new DbQueryLog();
			
			item.QryDesc = varQryDesc;
			
			item.QryText = varQryText;
			
			item.ByEmployeeID = varByEmployeeID;
			
			item.ByContactID = varByContactID;
			
			item.LogIp = varLogIp;
			
			item.LogQryDate = varLogQryDate;
			
			item.QrySourceDeprecated = varQrySourceDeprecated;
			
			item.QrySource = varQrySource;
			
			item.LogQryTs = varLogQryTs;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varQryId,string varQryDesc,string varQryText,int? varByEmployeeID,int? varByContactID,string varLogIp,DateTime? varLogQryDate,string varQrySourceDeprecated,string varQrySource,byte[] varLogQryTs)
		{
			DbQueryLog item = new DbQueryLog();
			
				item.QryId = varQryId;
			
				item.QryDesc = varQryDesc;
			
				item.QryText = varQryText;
			
				item.ByEmployeeID = varByEmployeeID;
			
				item.ByContactID = varByContactID;
			
				item.LogIp = varLogIp;
			
				item.LogQryDate = varLogQryDate;
			
				item.QrySourceDeprecated = varQrySourceDeprecated;
			
				item.QrySource = varQrySource;
			
				item.LogQryTs = varLogQryTs;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn QryIdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn QryDescColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn QryTextColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn ByEmployeeIDColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn ByContactIDColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn LogIpColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn LogQryDateColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn QrySourceDeprecatedColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn QrySourceColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn LogQryTsColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string QryId = @"qry_ID";
			 public static string QryDesc = @"qry_desc";
			 public static string QryText = @"qry_text";
			 public static string ByEmployeeID = @"by_employeeID";
			 public static string ByContactID = @"by_contactID";
			 public static string LogIp = @"log_ip";
			 public static string LogQryDate = @"log_qry_date";
			 public static string QrySourceDeprecated = @"qry_source_deprecated";
			 public static string QrySource = @"qry_source";
			 public static string LogQryTs = @"log_qry_ts";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
