using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DAL.Logistics
{
	/// <summary>
	/// Strongly-typed collection for the DespatchNote class.
	/// </summary>
    [Serializable]
	public partial class DespatchNoteCollection : ActiveList<DespatchNote, DespatchNoteCollection>
	{	   
		public DespatchNoteCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>DespatchNoteCollection</returns>
		public DespatchNoteCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                DespatchNote o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the despatch_note table.
	/// </summary>
	[Serializable]
	public partial class DespatchNote : ActiveRecord<DespatchNote>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public DespatchNote()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public DespatchNote(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public DespatchNote(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public DespatchNote(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("despatch_note", TableType.Table, DataService.GetInstance("WWIprov"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarDespatchId = new TableSchema.TableColumn(schema);
				colvarDespatchId.ColumnName = "despatch_id";
				colvarDespatchId.DataType = DbType.Int32;
				colvarDespatchId.MaxLength = 0;
				colvarDespatchId.AutoIncrement = true;
				colvarDespatchId.IsNullable = false;
				colvarDespatchId.IsPrimaryKey = true;
				colvarDespatchId.IsForeignKey = false;
				colvarDespatchId.IsReadOnly = false;
				colvarDespatchId.DefaultSetting = @"";
				colvarDespatchId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDespatchId);
				
				TableSchema.TableColumn colvarDespatchRef = new TableSchema.TableColumn(schema);
				colvarDespatchRef.ColumnName = "despatch_ref";
				colvarDespatchRef.DataType = DbType.String;
				colvarDespatchRef.MaxLength = 50;
				colvarDespatchRef.AutoIncrement = false;
				colvarDespatchRef.IsNullable = true;
				colvarDespatchRef.IsPrimaryKey = false;
				colvarDespatchRef.IsForeignKey = false;
				colvarDespatchRef.IsReadOnly = false;
				colvarDespatchRef.DefaultSetting = @"";
				colvarDespatchRef.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDespatchRef);
				
				TableSchema.TableColumn colvarTotalCartons = new TableSchema.TableColumn(schema);
				colvarTotalCartons.ColumnName = "total_cartons";
				colvarTotalCartons.DataType = DbType.Decimal;
				colvarTotalCartons.MaxLength = 0;
				colvarTotalCartons.AutoIncrement = false;
				colvarTotalCartons.IsNullable = true;
				colvarTotalCartons.IsPrimaryKey = false;
				colvarTotalCartons.IsForeignKey = false;
				colvarTotalCartons.IsReadOnly = false;
				
						colvarTotalCartons.DefaultSetting = @"((0))";
				colvarTotalCartons.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTotalCartons);
				
				TableSchema.TableColumn colvarTotalWeight = new TableSchema.TableColumn(schema);
				colvarTotalWeight.ColumnName = "total_weight";
				colvarTotalWeight.DataType = DbType.Decimal;
				colvarTotalWeight.MaxLength = 0;
				colvarTotalWeight.AutoIncrement = false;
				colvarTotalWeight.IsNullable = true;
				colvarTotalWeight.IsPrimaryKey = false;
				colvarTotalWeight.IsForeignKey = false;
				colvarTotalWeight.IsReadOnly = false;
				
						colvarTotalWeight.DefaultSetting = @"((0))";
				colvarTotalWeight.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTotalWeight);
				
				TableSchema.TableColumn colvarTotalCbm = new TableSchema.TableColumn(schema);
				colvarTotalCbm.ColumnName = "total_cbm";
				colvarTotalCbm.DataType = DbType.Decimal;
				colvarTotalCbm.MaxLength = 0;
				colvarTotalCbm.AutoIncrement = false;
				colvarTotalCbm.IsNullable = true;
				colvarTotalCbm.IsPrimaryKey = false;
				colvarTotalCbm.IsForeignKey = false;
				colvarTotalCbm.IsReadOnly = false;
				colvarTotalCbm.DefaultSetting = @"";
				colvarTotalCbm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTotalCbm);
				
				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "created_by";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 25;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = true;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);
				
				TableSchema.TableColumn colvarCreatedDate = new TableSchema.TableColumn(schema);
				colvarCreatedDate.ColumnName = "created_date";
				colvarCreatedDate.DataType = DbType.DateTime;
				colvarCreatedDate.MaxLength = 0;
				colvarCreatedDate.AutoIncrement = false;
				colvarCreatedDate.IsNullable = true;
				colvarCreatedDate.IsPrimaryKey = false;
				colvarCreatedDate.IsForeignKey = false;
				colvarCreatedDate.IsReadOnly = false;
				colvarCreatedDate.DefaultSetting = @"";
				colvarCreatedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedDate);
				
				TableSchema.TableColumn colvarDespatchNoteTs = new TableSchema.TableColumn(schema);
				colvarDespatchNoteTs.ColumnName = "despatch_note_ts";
				colvarDespatchNoteTs.DataType = DbType.Binary;
				colvarDespatchNoteTs.MaxLength = 0;
				colvarDespatchNoteTs.AutoIncrement = false;
				colvarDespatchNoteTs.IsNullable = true;
				colvarDespatchNoteTs.IsPrimaryKey = false;
				colvarDespatchNoteTs.IsForeignKey = false;
				colvarDespatchNoteTs.IsReadOnly = true;
				colvarDespatchNoteTs.DefaultSetting = @"";
				colvarDespatchNoteTs.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDespatchNoteTs);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["WWIprov"].AddSchema("despatch_note",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("DespatchId")]
		[Bindable(true)]
		public int DespatchId 
		{
			get { return GetColumnValue<int>(Columns.DespatchId); }
			set { SetColumnValue(Columns.DespatchId, value); }
		}
		  
		[XmlAttribute("DespatchRef")]
		[Bindable(true)]
		public string DespatchRef 
		{
			get { return GetColumnValue<string>(Columns.DespatchRef); }
			set { SetColumnValue(Columns.DespatchRef, value); }
		}
		  
		[XmlAttribute("TotalCartons")]
		[Bindable(true)]
		public decimal? TotalCartons 
		{
			get { return GetColumnValue<decimal?>(Columns.TotalCartons); }
			set { SetColumnValue(Columns.TotalCartons, value); }
		}
		  
		[XmlAttribute("TotalWeight")]
		[Bindable(true)]
		public decimal? TotalWeight 
		{
			get { return GetColumnValue<decimal?>(Columns.TotalWeight); }
			set { SetColumnValue(Columns.TotalWeight, value); }
		}
		  
		[XmlAttribute("TotalCbm")]
		[Bindable(true)]
		public decimal? TotalCbm 
		{
			get { return GetColumnValue<decimal?>(Columns.TotalCbm); }
			set { SetColumnValue(Columns.TotalCbm, value); }
		}
		  
		[XmlAttribute("CreatedBy")]
		[Bindable(true)]
		public string CreatedBy 
		{
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set { SetColumnValue(Columns.CreatedBy, value); }
		}
		  
		[XmlAttribute("CreatedDate")]
		[Bindable(true)]
		public DateTime? CreatedDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.CreatedDate); }
			set { SetColumnValue(Columns.CreatedDate, value); }
		}
		  
		[XmlAttribute("DespatchNoteTs")]
		[Bindable(true)]
		public byte[] DespatchNoteTs 
		{
			get { return GetColumnValue<byte[]>(Columns.DespatchNoteTs); }
			set { SetColumnValue(Columns.DespatchNoteTs, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varDespatchRef,decimal? varTotalCartons,decimal? varTotalWeight,decimal? varTotalCbm,string varCreatedBy,DateTime? varCreatedDate,byte[] varDespatchNoteTs)
		{
			DespatchNote item = new DespatchNote();
			
			item.DespatchRef = varDespatchRef;
			
			item.TotalCartons = varTotalCartons;
			
			item.TotalWeight = varTotalWeight;
			
			item.TotalCbm = varTotalCbm;
			
			item.CreatedBy = varCreatedBy;
			
			item.CreatedDate = varCreatedDate;
			
			item.DespatchNoteTs = varDespatchNoteTs;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varDespatchId,string varDespatchRef,decimal? varTotalCartons,decimal? varTotalWeight,decimal? varTotalCbm,string varCreatedBy,DateTime? varCreatedDate,byte[] varDespatchNoteTs)
		{
			DespatchNote item = new DespatchNote();
			
				item.DespatchId = varDespatchId;
			
				item.DespatchRef = varDespatchRef;
			
				item.TotalCartons = varTotalCartons;
			
				item.TotalWeight = varTotalWeight;
			
				item.TotalCbm = varTotalCbm;
			
				item.CreatedBy = varCreatedBy;
			
				item.CreatedDate = varCreatedDate;
			
				item.DespatchNoteTs = varDespatchNoteTs;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn DespatchIdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn DespatchRefColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn TotalCartonsColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn TotalWeightColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn TotalCbmColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedByColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedDateColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn DespatchNoteTsColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string DespatchId = @"despatch_id";
			 public static string DespatchRef = @"despatch_ref";
			 public static string TotalCartons = @"total_cartons";
			 public static string TotalWeight = @"total_weight";
			 public static string TotalCbm = @"total_cbm";
			 public static string CreatedBy = @"created_by";
			 public static string CreatedDate = @"created_date";
			 public static string DespatchNoteTs = @"despatch_note_ts";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
