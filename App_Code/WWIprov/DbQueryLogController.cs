using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DAL.Logistics
{
    /// <summary>
    /// Controller class for db_query_log
    /// </summary>
    [System.ComponentModel.DataObject]
    public partial class DbQueryLogController
    {
        // Preload our schema..
        DbQueryLog thisSchemaLoad = new DbQueryLog();
        private string userName = String.Empty;
        protected string UserName
        {
            get
            {
				if (userName.Length == 0) 
				{
    				if (System.Web.HttpContext.Current != null)
    				{
						userName=System.Web.HttpContext.Current.User.Identity.Name;
					}
					else
					{
						userName=System.Threading.Thread.CurrentPrincipal.Identity.Name;
					}
				}
				return userName;
            }
        }
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public DbQueryLogCollection FetchAll()
        {
            DbQueryLogCollection coll = new DbQueryLogCollection();
            Query qry = new Query(DbQueryLog.Schema);
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public DbQueryLogCollection FetchByID(object QryId)
        {
            DbQueryLogCollection coll = new DbQueryLogCollection().Where("qry_ID", QryId).Load();
            return coll;
        }
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
        public DbQueryLogCollection FetchByQuery(Query qry)
        {
            DbQueryLogCollection coll = new DbQueryLogCollection();
            coll.LoadAndCloseReader(qry.ExecuteReader()); 
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool Delete(object QryId)
        {
            return (DbQueryLog.Delete(QryId) == 1);
        }
        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public bool Destroy(object QryId)
        {
            return (DbQueryLog.Destroy(QryId) == 1);
        }
        
        
    	
	    /// <summary>
	    /// Inserts a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
	    public void Insert(string QryDesc,string QryText,int? ByEmployeeID,int? ByContactID,string LogIp,DateTime? LogQryDate,string QrySourceDeprecated,string QrySource,byte[] LogQryTs)
	    {
		    DbQueryLog item = new DbQueryLog();
		    
            item.QryDesc = QryDesc;
            
            item.QryText = QryText;
            
            item.ByEmployeeID = ByEmployeeID;
            
            item.ByContactID = ByContactID;
            
            item.LogIp = LogIp;
            
            item.LogQryDate = LogQryDate;
            
            item.QrySourceDeprecated = QrySourceDeprecated;
            
            item.QrySource = QrySource;
            
            item.LogQryTs = LogQryTs;
            
	    
		    item.Save(UserName);
	    }
    	
	    /// <summary>
	    /// Updates a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
	    public void Update(int QryId,string QryDesc,string QryText,int? ByEmployeeID,int? ByContactID,string LogIp,DateTime? LogQryDate,string QrySourceDeprecated,string QrySource,byte[] LogQryTs)
	    {
		    DbQueryLog item = new DbQueryLog();
	        item.MarkOld();
	        item.IsLoaded = true;
		    
			item.QryId = QryId;
				
			item.QryDesc = QryDesc;
				
			item.QryText = QryText;
				
			item.ByEmployeeID = ByEmployeeID;
				
			item.ByContactID = ByContactID;
				
			item.LogIp = LogIp;
				
			item.LogQryDate = LogQryDate;
				
			item.QrySourceDeprecated = QrySourceDeprecated;
				
			item.QrySource = QrySource;
				
			item.LogQryTs = LogQryTs;
				
	        item.Save(UserName);
	    }
    }
}
